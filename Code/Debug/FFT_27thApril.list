
FFT_27thApril.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004150  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008864  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cb3c  0800cb3c  0001cb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cb40  0800cb40  0001cb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000d4c  20000000  0800cb44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000154c  20000d4c  0800d890  00020d4c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002298  0800d890  00022298  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020d4c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015cfa  00000000  00000000  00020d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002cb6  00000000  00000000  00036a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a384  00000000  00000000  0003972c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008f8  00000000  00000000  00043ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f18  00000000  00000000  000443a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007410  00000000  00000000  000452c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004602  00000000  00000000  0004c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ea  00000000  00000000  00050cd2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000196c  00000000  00000000  00050dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000d4c 	.word	0x20000d4c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042c0 	.word	0x080042c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000d50 	.word	0x20000d50
 80001c4:	080042c0 	.word	0x080042c0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_InitTick+0x24>)
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <HAL_InitTick+0x28>)
 8000a00:	681b      	ldr	r3, [r3, #0]
{
 8000a02:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000a04:	fba2 2303 	umull	r2, r3, r2, r3
{
 8000a08:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000a0a:	0998      	lsrs	r0, r3, #6
 8000a0c:	f000 ff06 	bl	800181c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000a10:	4621      	mov	r1, r4
 8000a12:	2200      	movs	r2, #0
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 febe 	bl	8001798 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	bd10      	pop	{r4, pc}
 8000a20:	20000ce0 	.word	0x20000ce0
 8000a24:	10624dd3 	.word	0x10624dd3

08000a28 <HAL_Init>:
{
 8000a28:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f000 fea2 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff ffe3 	bl	80009fc <HAL_InitTick>
  HAL_MspInit();
 8000a36:	f002 fb7b 	bl	8003130 <HAL_MspInit>
}
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	bd08      	pop	{r3, pc}
 8000a3e:	bf00      	nop

08000a40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000a40:	4a02      	ldr	r2, [pc, #8]	; (8000a4c <HAL_IncTick+0xc>)
 8000a42:	6813      	ldr	r3, [r2, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000d70 	.word	0x20000d70

08000a50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a50:	4b01      	ldr	r3, [pc, #4]	; (8000a58 <HAL_GetTick+0x8>)
 8000a52:	6818      	ldr	r0, [r3, #0]
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000d70 	.word	0x20000d70

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b538      	push	{r3, r4, r5, lr}
 8000a5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a60:	f7ff fff6 	bl	8000a50 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a64:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000a66:	4605      	mov	r5, r0
  {
    wait++;
 8000a68:	bf18      	it	ne
 8000a6a:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000a6c:	f7ff fff0 	bl	8000a50 <HAL_GetTick>
 8000a70:	1b40      	subs	r0, r0, r5
 8000a72:	4284      	cmp	r4, r0
 8000a74:	d8fa      	bhi.n	8000a6c <HAL_Delay+0x10>
  {
  }
}
 8000a76:	bd38      	pop	{r3, r4, r5, pc}

08000a78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a80:	2800      	cmp	r0, #0
 8000a82:	f000 80bb 	beq.w	8000bfc <HAL_ADC_Init+0x184>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a86:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000a88:	4604      	mov	r4, r0
 8000a8a:	2d00      	cmp	r5, #0
 8000a8c:	f000 80ac 	beq.w	8000be8 <HAL_ADC_Init+0x170>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 8000a90:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 8000a92:	6893      	ldr	r3, [r2, #8]
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	d505      	bpl.n	8000aa4 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a98:	6893      	ldr	r3, [r2, #8]
 8000a9a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000a9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aa2:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 8000aa4:	6893      	ldr	r3, [r2, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8000aa6:	00df      	lsls	r7, r3, #3
 8000aa8:	d419      	bmi.n	8000ade <HAL_ADC_Init+0x66>
    
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8000aaa:	4b7c      	ldr	r3, [pc, #496]	; (8000c9c <HAL_ADC_Init+0x224>)
 8000aac:	487c      	ldr	r0, [pc, #496]	; (8000ca0 <HAL_ADC_Init+0x228>)
 8000aae:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8000ab0:	6891      	ldr	r1, [r2, #8]
 8000ab2:	fba0 0303 	umull	r0, r3, r0, r3
 8000ab6:	0cdb      	lsrs	r3, r3, #19
 8000ab8:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8000abc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ac0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000aca:	6091      	str	r1, [r2, #8]
 8000acc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8000ace:	9b01      	ldr	r3, [sp, #4]
 8000ad0:	b12b      	cbz	r3, 8000ade <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8000ad2:	9b01      	ldr	r3, [sp, #4]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8000ad8:	9b01      	ldr	r3, [sp, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f9      	bne.n	8000ad2 <HAL_ADC_Init+0x5a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 8000ade:	6893      	ldr	r3, [r2, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8000ae0:	00de      	lsls	r6, r3, #3
 8000ae2:	d56d      	bpl.n	8000bc0 <HAL_ADC_Init+0x148>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ae4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ae6:	06dd      	lsls	r5, r3, #27
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae8:	f04f 0000 	mov.w	r0, #0
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000aec:	d475      	bmi.n	8000bda <HAL_ADC_Init+0x162>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8000aee:	6893      	ldr	r3, [r2, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000af0:	0759      	lsls	r1, r3, #29
 8000af2:	d472      	bmi.n	8000bda <HAL_ADC_Init+0x162>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000af4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000af6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	65a3      	str	r3, [r4, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000b00:	6893      	ldr	r3, [r2, #8]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d074      	beq.n	8000bf4 <HAL_ADC_Init+0x17c>
         (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8000b0a:	4b66      	ldr	r3, [pc, #408]	; (8000ca4 <HAL_ADC_Init+0x22c>)
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	f000 8085 	beq.w	8000c1c <HAL_ADC_Init+0x1a4>
 8000b12:	4965      	ldr	r1, [pc, #404]	; (8000ca8 <HAL_ADC_Init+0x230>)
 8000b14:	428a      	cmp	r2, r1
 8000b16:	6899      	ldr	r1, [r3, #8]
 8000b18:	f001 0103 	and.w	r1, r1, #3
 8000b1c:	f000 80a5 	beq.w	8000c6a <HAL_ADC_Init+0x1f2>
 8000b20:	2901      	cmp	r1, #1
 8000b22:	f000 809d 	beq.w	8000c60 <HAL_ADC_Init+0x1e8>
 8000b26:	4960      	ldr	r1, [pc, #384]	; (8000ca8 <HAL_ADC_Init+0x230>)
 8000b28:	688b      	ldr	r3, [r1, #8]
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	f000 8081 	beq.w	8000c36 <HAL_ADC_Init+0x1be>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b34:	495d      	ldr	r1, [pc, #372]	; (8000cac <HAL_ADC_Init+0x234>)
 8000b36:	6865      	ldr	r5, [r4, #4]
 8000b38:	688b      	ldr	r3, [r1, #8]
 8000b3a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000b3e:	432b      	orrs	r3, r5
 8000b40:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 8000b42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b44:	68e7      	ldr	r7, [r4, #12]
 8000b46:	68a6      	ldr	r6, [r4, #8]
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8000b48:	6a61      	ldr	r1, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000b4a:	69e5      	ldr	r5, [r4, #28]
                hadc->Init.DataAlign                                         |
 8000b4c:	433b      	orrs	r3, r7
 8000b4e:	4333      	orrs	r3, r6
 8000b50:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b54:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000b56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b5a:	d052      	beq.n	8000c02 <HAL_ADC_Init+0x18a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000b5e:	b121      	cbz	r1, 8000b6a <HAL_ADC_Init+0xf2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8000b60:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b62:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000b66:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b68:	430b      	orrs	r3, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8000b6a:	68d5      	ldr	r5, [r2, #12]
 8000b6c:	4950      	ldr	r1, [pc, #320]	; (8000cb0 <HAL_ADC_Init+0x238>)
 8000b6e:	4029      	ands	r1, r5
 8000b70:	430b      	orrs	r3, r1
 8000b72:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000b74:	6893      	ldr	r3, [r2, #8]
 8000b76:	f013 0f0c 	tst.w	r3, #12
 8000b7a:	d112      	bne.n	8000ba2 <HAL_ADC_Init+0x12a>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000b7c:	68d1      	ldr	r1, [r2, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8000b7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000b80:	69a5      	ldr	r5, [r4, #24]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8000b82:	6be6      	ldr	r6, [r4, #60]	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000b84:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8000b88:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000b8a:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8000b8e:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000b92:	430b      	orrs	r3, r1
      if (hadc->Init.OversamplingMode == ENABLE)
 8000b94:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8000b96:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8000b98:	d051      	beq.n	8000c3e <HAL_ADC_Init+0x1c6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000b9a:	6913      	ldr	r3, [r2, #16]
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ba2:	6923      	ldr	r3, [r4, #16]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d031      	beq.n	8000c0c <HAL_ADC_Init+0x194>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ba8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000baa:	f023 030f 	bic.w	r3, r3, #15
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000bb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000bb2:	f023 0303 	bic.w	r3, r3, #3
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000bbc:	b003      	add	sp, #12
 8000bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bc8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000bd2:	06dd      	lsls	r5, r3, #27
    tmp_hal_status = HAL_ERROR;
 8000bd4:	f04f 0001 	mov.w	r0, #1
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bd8:	d589      	bpl.n	8000aee <HAL_ADC_Init+0x76>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bda:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8000bdc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8000be4:	b003      	add	sp, #12
 8000be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8000be8:	f002 faea 	bl	80031c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000bec:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8000bee:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8000bf2:	e74d      	b.n	8000a90 <HAL_ADC_Init+0x18>
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000bf4:	6813      	ldr	r3, [r2, #0]
 8000bf6:	07db      	lsls	r3, r3, #31
 8000bf8:	d4a3      	bmi.n	8000b42 <HAL_ADC_Init+0xca>
 8000bfa:	e786      	b.n	8000b0a <HAL_ADC_Init+0x92>
    return HAL_ERROR;
 8000bfc:	2001      	movs	r0, #1
}
 8000bfe:	b003      	add	sp, #12
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000c04:	3901      	subs	r1, #1
 8000c06:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8000c0a:	e7a7      	b.n	8000b5c <HAL_ADC_Init+0xe4>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000c0c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000c0e:	6a23      	ldr	r3, [r4, #32]
 8000c10:	f021 010f 	bic.w	r1, r1, #15
 8000c14:	3b01      	subs	r3, #1
 8000c16:	430b      	orrs	r3, r1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	e7c9      	b.n	8000bb0 <HAL_ADC_Init+0x138>
         (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8000c1c:	4922      	ldr	r1, [pc, #136]	; (8000ca8 <HAL_ADC_Init+0x230>)
 8000c1e:	688b      	ldr	r3, [r1, #8]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d02e      	beq.n	8000c86 <HAL_ADC_Init+0x20e>
 8000c28:	4922      	ldr	r1, [pc, #136]	; (8000cb4 <HAL_ADC_Init+0x23c>)
 8000c2a:	688b      	ldr	r3, [r1, #8]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	f47f af7f 	bne.w	8000b34 <HAL_ADC_Init+0xbc>
 8000c36:	680b      	ldr	r3, [r1, #0]
 8000c38:	07db      	lsls	r3, r3, #31
 8000c3a:	d482      	bmi.n	8000b42 <HAL_ADC_Init+0xca>
 8000c3c:	e77a      	b.n	8000b34 <HAL_ADC_Init+0xbc>
        MODIFY_REG(hadc->Instance->CFGR2,
 8000c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c40:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8000c42:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8000c44:	6915      	ldr	r5, [r2, #16]
 8000c46:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000c48:	433b      	orrs	r3, r7
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	4333      	orrs	r3, r6
 8000c50:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8000c54:	430b      	orrs	r3, r1
 8000c56:	f025 0504 	bic.w	r5, r5, #4
 8000c5a:	432b      	orrs	r3, r5
 8000c5c:	6113      	str	r3, [r2, #16]
 8000c5e:	e7a0      	b.n	8000ba2 <HAL_ADC_Init+0x12a>
         (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	07d9      	lsls	r1, r3, #31
 8000c64:	f53f af6d 	bmi.w	8000b42 <HAL_ADC_Init+0xca>
 8000c68:	e75d      	b.n	8000b26 <HAL_ADC_Init+0xae>
 8000c6a:	2901      	cmp	r1, #1
 8000c6c:	d010      	beq.n	8000c90 <HAL_ADC_Init+0x218>
 8000c6e:	4911      	ldr	r1, [pc, #68]	; (8000cb4 <HAL_ADC_Init+0x23c>)
 8000c70:	688b      	ldr	r3, [r1, #8]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	f47f af55 	bne.w	8000b26 <HAL_ADC_Init+0xae>
 8000c7c:	680b      	ldr	r3, [r1, #0]
 8000c7e:	07dd      	lsls	r5, r3, #31
 8000c80:	f53f af5f 	bmi.w	8000b42 <HAL_ADC_Init+0xca>
 8000c84:	e74f      	b.n	8000b26 <HAL_ADC_Init+0xae>
 8000c86:	680b      	ldr	r3, [r1, #0]
 8000c88:	07df      	lsls	r7, r3, #31
 8000c8a:	f53f af5a 	bmi.w	8000b42 <HAL_ADC_Init+0xca>
 8000c8e:	e7cb      	b.n	8000c28 <HAL_ADC_Init+0x1b0>
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	07de      	lsls	r6, r3, #31
 8000c94:	f53f af55 	bmi.w	8000b42 <HAL_ADC_Init+0xca>
 8000c98:	e7e9      	b.n	8000c6e <HAL_ADC_Init+0x1f6>
 8000c9a:	bf00      	nop
 8000c9c:	20000ce0 	.word	0x20000ce0
 8000ca0:	431bde83 	.word	0x431bde83
 8000ca4:	50040000 	.word	0x50040000
 8000ca8:	50040100 	.word	0x50040100
 8000cac:	50040300 	.word	0x50040300
 8000cb0:	fff0c007 	.word	0xfff0c007
 8000cb4:	50040200 	.word	0x50040200

08000cb8 <HAL_ADC_ConvCpltCallback>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <HAL_ADC_ConvHalfCpltCallback>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8000cc0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000cc2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000cc4:	f7ff fffa 	bl	8000cbc <HAL_ADC_ConvHalfCpltCallback>
 8000cc8:	bd08      	pop	{r3, pc}
 8000cca:	bf00      	nop

08000ccc <HAL_ADC_ErrorCallback>:
{
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if(HAL_IS_BIT_CLR(hadc->State, (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)))
 8000cd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cd4:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8000cd8:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  if(HAL_IS_BIT_CLR(hadc->State, (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)))
 8000cdc:	d11d      	bne.n	8000d1a <ADC_DMAConvCplt+0x4a>
    if(HAL_IS_BIT_SET(hadc->Instance->ISR, ADC_FLAG_EOS))
 8000cde:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ce4:	659a      	str	r2, [r3, #88]	; 0x58
    if(HAL_IS_BIT_SET(hadc->Instance->ISR, ADC_FLAG_EOS))
 8000ce6:	680a      	ldr	r2, [r1, #0]
 8000ce8:	f012 0f08 	tst.w	r2, #8
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000cec:	68ca      	ldr	r2, [r1, #12]
    if(HAL_IS_BIT_SET(hadc->Instance->ISR, ADC_FLAG_EOS))
 8000cee:	d01b      	beq.n	8000d28 <ADC_DMAConvCplt+0x58>
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000cf0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000cf4:	d10d      	bne.n	8000d12 <ADC_DMAConvCplt+0x42>
        if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == RESET)
 8000cf6:	68ca      	ldr	r2, [r1, #12]
 8000cf8:	0494      	lsls	r4, r2, #18
 8000cfa:	d40a      	bmi.n	8000d12 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000cfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d02:	659a      	str	r2, [r3, #88]	; 0x58
        if(HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d06:	04d1      	lsls	r1, r2, #19
 8000d08:	d403      	bmi.n	8000d12 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d0c:	f042 0201 	orr.w	r2, r2, #1
 8000d10:	659a      	str	r2, [r3, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ffd0 	bl	8000cb8 <HAL_ADC_ConvCpltCallback>
 8000d18:	bd10      	pop	{r4, pc}
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d1a:	06d2      	lsls	r2, r2, #27
 8000d1c:	d407      	bmi.n	8000d2e <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8000d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d26:	4718      	bx	r3
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == RESET)
 8000d28:	0790      	lsls	r0, r2, #30
 8000d2a:	d4f2      	bmi.n	8000d12 <ADC_DMAConvCplt+0x42>
 8000d2c:	e7e6      	b.n	8000cfc <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ffcc 	bl	8000ccc <HAL_ADC_ErrorCallback>
 8000d34:	bd10      	pop	{r4, pc}
 8000d36:	bf00      	nop

08000d38 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d38:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8000d3a:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000d3c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d42:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000d44:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000d4c:	f7ff ffbe 	bl	8000ccc <HAL_ADC_ErrorCallback>
 8000d50:	bd08      	pop	{r3, pc}
 8000d52:	bf00      	nop

08000d54 <HAL_ADC_ConfigChannel>:
{
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d56:	4603      	mov	r3, r0
 8000d58:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8000d5a:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
  __IO uint32_t wait_loop_index = 0;
 8000d5e:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8000d60:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 8000d62:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8000d64:	d05a      	beq.n	8000e1c <HAL_ADC_ConfigChannel+0xc8>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d66:	681c      	ldr	r4, [r3, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8000d68:	68a6      	ldr	r6, [r4, #8]
  __HAL_LOCK(hadc);
 8000d6a:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d6c:	f016 0604 	ands.w	r6, r6, #4
  __HAL_LOCK(hadc);
 8000d70:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d74:	d008      	beq.n	8000d88 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d78:	f042 0220 	orr.w	r2, r2, #32
 8000d7c:	659a      	str	r2, [r3, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8000d84:	b003      	add	sp, #12
 8000d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank <= 5U)
 8000d88:	6848      	ldr	r0, [r1, #4]
 8000d8a:	2805      	cmp	r0, #5
 8000d8c:	d949      	bls.n	8000e22 <HAL_ADC_ConfigChannel+0xce>
 8000d8e:	f000 0e1f 	and.w	lr, r0, #31
 8000d92:	251f      	movs	r5, #31
 8000d94:	fa05 f50e 	lsl.w	r5, r5, lr
 8000d98:	f400 7640 	and.w	r6, r0, #768	; 0x300
 8000d9c:	43ef      	mvns	r7, r5
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9e:	f44f 7540 	mov.w	r5, #768	; 0x300
 8000da2:	fa95 f5a5 	rbit	r5, r5
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000da6:	fab5 f585 	clz	r5, r5
 8000daa:	fa26 f005 	lsr.w	r0, r6, r5
 8000dae:	f104 0630 	add.w	r6, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8000db2:	680a      	ldr	r2, [r1, #0]
 8000db4:	f856 5020 	ldr.w	r5, [r6, r0, lsl #2]
 8000db8:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8000dbc:	fa02 f20e 	lsl.w	r2, r2, lr
 8000dc0:	403d      	ands	r5, r7
 8000dc2:	432a      	orrs	r2, r5
 8000dc4:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000dc8:	68a2      	ldr	r2, [r4, #8]
 8000dca:	f012 0f0c 	tst.w	r2, #12
 8000dce:	d030      	beq.n	8000e32 <HAL_ADC_ConfigChannel+0xde>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000dd0:	68a2      	ldr	r2, [r4, #8]
 8000dd2:	f002 0203 	and.w	r2, r2, #3
 8000dd6:	2a01      	cmp	r2, #1
 8000dd8:	d070      	beq.n	8000ebc <HAL_ADC_ConfigChannel+0x168>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000dda:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8000ddc:	4abc      	ldr	r2, [pc, #752]	; (80010d0 <HAL_ADC_ConfigChannel+0x37c>)
 8000dde:	f8d4 60b0 	ldr.w	r6, [r4, #176]	; 0xb0
 8000de2:	6808      	ldr	r0, [r1, #0]
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000de4:	f8df e304 	ldr.w	lr, [pc, #772]	; 80010ec <HAL_ADC_ConfigChannel+0x398>
 8000de8:	f005 0720 	and.w	r7, r5, #32
 8000dec:	40ba      	lsls	r2, r7
 8000dee:	4072      	eors	r2, r6
 8000df0:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8000df4:	403a      	ands	r2, r7
 8000df6:	4072      	eors	r2, r6
 8000df8:	4575      	cmp	r5, lr
 8000dfa:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8000dfe:	f000 80bc 	beq.w	8000f7a <HAL_ADC_ConfigChannel+0x226>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000e02:	4ab4      	ldr	r2, [pc, #720]	; (80010d4 <HAL_ADC_ConfigChannel+0x380>)
 8000e04:	4290      	cmp	r0, r2
 8000e06:	f000 80b3 	beq.w	8000f70 <HAL_ADC_ConfigChannel+0x21c>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 8000e0a:	4ab3      	ldr	r2, [pc, #716]	; (80010d8 <HAL_ADC_ConfigChannel+0x384>)
 8000e0c:	4290      	cmp	r0, r2
 8000e0e:	f000 80ed 	beq.w	8000fec <HAL_ADC_ConfigChannel+0x298>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 8000e12:	4ab2      	ldr	r2, [pc, #712]	; (80010dc <HAL_ADC_ConfigChannel+0x388>)
 8000e14:	4290      	cmp	r0, r2
 8000e16:	d06f      	beq.n	8000ef8 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e18:	2000      	movs	r0, #0
 8000e1a:	e7b0      	b.n	8000d7e <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8000e1c:	2002      	movs	r0, #2
}
 8000e1e:	b003      	add	sp, #12
 8000e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (sConfig->Rank)
 8000e22:	3802      	subs	r0, #2
 8000e24:	2803      	cmp	r0, #3
 8000e26:	f200 80e6 	bhi.w	8000ff6 <HAL_ADC_ConfigChannel+0x2a2>
 8000e2a:	e8df f000 	tbb	[pc, r0]
 8000e2e:	595f      	.short	0x595f
 8000e30:	4b53      	.short	0x4b53
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000e32:	680a      	ldr	r2, [r1, #0]
 8000e34:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000e38:	fa97 f7a7 	rbit	r7, r7
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000e3c:	fab7 f087 	clz	r0, r7
 8000e40:	f002 7700 	and.w	r7, r2, #33554432	; 0x2000000
 8000e44:	40c7      	lsrs	r7, r0
  MODIFY_REG(*preg,
 8000e46:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000e4a:	f104 0e14 	add.w	lr, r4, #20
 8000e4e:	f04f 70f8 	mov.w	r0, #32505856	; 0x1f00000
 8000e52:	fa90 fca0 	rbit	ip, r0
  MODIFY_REG(*preg,
 8000e56:	fabc fc8c 	clz	ip, ip
 8000e5a:	fa90 f0a0 	rbit	r0, r0
 8000e5e:	fab0 f080 	clz	r0, r0
 8000e62:	688e      	ldr	r6, [r1, #8]
 8000e64:	f85e 5027 	ldr.w	r5, [lr, r7, lsl #2]
 8000e68:	fa22 fc0c 	lsr.w	ip, r2, ip
 8000e6c:	40c2      	lsrs	r2, r0
 8000e6e:	2007      	movs	r0, #7
 8000e70:	fa00 fc0c 	lsl.w	ip, r0, ip
 8000e74:	fa06 f202 	lsl.w	r2, r6, r2
 8000e78:	ea25 050c 	bic.w	r5, r5, ip
 8000e7c:	432a      	orrs	r2, r5
 8000e7e:	f84e 2027 	str.w	r2, [lr, r7, lsl #2]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000e82:	690e      	ldr	r6, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000e84:	68e0      	ldr	r0, [r4, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000e86:	2e04      	cmp	r6, #4
 8000e88:	f000 80bb 	beq.w	8001002 <HAL_ADC_ConfigChannel+0x2ae>
  MODIFY_REG(*preg,
 8000e8c:	680d      	ldr	r5, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000e8e:	694a      	ldr	r2, [r1, #20]
 8000e90:	f8df e25c 	ldr.w	lr, [pc, #604]	; 80010f0 <HAL_ADC_ConfigChannel+0x39c>
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e94:	f104 0760 	add.w	r7, r4, #96	; 0x60
 8000e98:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8000e9c:	0040      	lsls	r0, r0, #1
 8000e9e:	4082      	lsls	r2, r0
  MODIFY_REG(*preg,
 8000ea0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8000ea4:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 8000ea8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000eac:	432a      	orrs	r2, r5
 8000eae:	ea00 0e0e 	and.w	lr, r0, lr
 8000eb2:	ea42 020e 	orr.w	r2, r2, lr
 8000eb6:	f847 2026 	str.w	r2, [r7, r6, lsl #2]
 8000eba:	e789      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x7c>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ebc:	6822      	ldr	r2, [r4, #0]
 8000ebe:	07d2      	lsls	r2, r2, #31
 8000ec0:	d58b      	bpl.n	8000dda <HAL_ADC_ConfigChannel+0x86>
 8000ec2:	e7a9      	b.n	8000e18 <HAL_ADC_ConfigChannel+0xc4>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000ec4:	f44f 7680 	mov.w	r6, #256	; 0x100
 8000ec8:	604e      	str	r6, [r1, #4]
 8000eca:	f04f 0e00 	mov.w	lr, #0
 8000ece:	f06f 071f 	mvn.w	r7, #31
 8000ed2:	e764      	b.n	8000d9e <HAL_ADC_ConfigChannel+0x4a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000ed4:	2218      	movs	r2, #24
 8000ed6:	604a      	str	r2, [r1, #4]
 8000ed8:	4696      	mov	lr, r2
 8000eda:	f06f 57f8 	mvn.w	r7, #520093696	; 0x1f000000
 8000ede:	e75e      	b.n	8000d9e <HAL_ADC_ConfigChannel+0x4a>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000ee0:	2212      	movs	r2, #18
 8000ee2:	604a      	str	r2, [r1, #4]
 8000ee4:	4696      	mov	lr, r2
 8000ee6:	f46f 07f8 	mvn.w	r7, #8126464	; 0x7c0000
 8000eea:	e758      	b.n	8000d9e <HAL_ADC_ConfigChannel+0x4a>
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8000eec:	220c      	movs	r2, #12
 8000eee:	604a      	str	r2, [r1, #4]
 8000ef0:	4696      	mov	lr, r2
 8000ef2:	f46f 37f8 	mvn.w	r7, #126976	; 0x1f000
 8000ef6:	e752      	b.n	8000d9e <HAL_ADC_ConfigChannel+0x4a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ef8:	4a79      	ldr	r2, [pc, #484]	; (80010e0 <HAL_ADC_ConfigChannel+0x38c>)
 8000efa:	6892      	ldr	r2, [r2, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000efc:	0255      	lsls	r5, r2, #9
 8000efe:	d48b      	bmi.n	8000e18 <HAL_ADC_ConfigChannel+0xc4>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000f00:	68a2      	ldr	r2, [r4, #8]
 8000f02:	f002 0203 	and.w	r2, r2, #3
 8000f06:	2a01      	cmp	r2, #1
 8000f08:	f000 80d7 	beq.w	80010ba <HAL_ADC_ConfigChannel+0x366>
 8000f0c:	4a75      	ldr	r2, [pc, #468]	; (80010e4 <HAL_ADC_ConfigChannel+0x390>)
 8000f0e:	4294      	cmp	r4, r2
 8000f10:	f000 815d 	beq.w	80011ce <HAL_ADC_ConfigChannel+0x47a>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8000f14:	4974      	ldr	r1, [pc, #464]	; (80010e8 <HAL_ADC_ConfigChannel+0x394>)
 8000f16:	428c      	cmp	r4, r1
 8000f18:	6891      	ldr	r1, [r2, #8]
 8000f1a:	f001 0103 	and.w	r1, r1, #3
 8000f1e:	f000 8175 	beq.w	800120c <HAL_ADC_ConfigChannel+0x4b8>
 8000f22:	2901      	cmp	r1, #1
 8000f24:	f000 813c 	beq.w	80011a0 <HAL_ADC_ConfigChannel+0x44c>
 8000f28:	496f      	ldr	r1, [pc, #444]	; (80010e8 <HAL_ADC_ConfigChannel+0x394>)
 8000f2a:	688a      	ldr	r2, [r1, #8]
 8000f2c:	f002 0203 	and.w	r2, r2, #3
 8000f30:	2a01      	cmp	r2, #1
 8000f32:	f000 819d 	beq.w	8001270 <HAL_ADC_ConfigChannel+0x51c>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f36:	4a67      	ldr	r2, [pc, #412]	; (80010d4 <HAL_ADC_ConfigChannel+0x380>)
 8000f38:	4290      	cmp	r0, r2
 8000f3a:	f000 8175 	beq.w	8001228 <HAL_ADC_ConfigChannel+0x4d4>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8000f3e:	4a66      	ldr	r2, [pc, #408]	; (80010d8 <HAL_ADC_ConfigChannel+0x384>)
 8000f40:	4290      	cmp	r0, r2
 8000f42:	f000 819a 	beq.w	800127a <HAL_ADC_ConfigChannel+0x526>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000f46:	4a65      	ldr	r2, [pc, #404]	; (80010dc <HAL_ADC_ConfigChannel+0x388>)
 8000f48:	4290      	cmp	r0, r2
 8000f4a:	f47f af65 	bne.w	8000e18 <HAL_ADC_ConfigChannel+0xc4>
            if (ADC_VREFINT_INSTANCE(hadc))
 8000f4e:	4a65      	ldr	r2, [pc, #404]	; (80010e4 <HAL_ADC_ConfigChannel+0x390>)
 8000f50:	4294      	cmp	r4, r2
 8000f52:	f47f af61 	bne.w	8000e18 <HAL_ADC_ConfigChannel+0xc4>
 8000f56:	4962      	ldr	r1, [pc, #392]	; (80010e0 <HAL_ADC_ConfigChannel+0x38c>)
 8000f58:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f5a:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f5c:	f000 70e0 	and.w	r0, r0, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f60:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8000f64:	4302      	orrs	r2, r0
 8000f66:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000f6a:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	e706      	b.n	8000d7e <HAL_ADC_ConfigChannel+0x2a>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f70:	4a5b      	ldr	r2, [pc, #364]	; (80010e0 <HAL_ADC_ConfigChannel+0x38c>)
 8000f72:	6892      	ldr	r2, [r2, #8]
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000f74:	0217      	lsls	r7, r2, #8
 8000f76:	d5c3      	bpl.n	8000f00 <HAL_ADC_ConfigChannel+0x1ac>
 8000f78:	e74e      	b.n	8000e18 <HAL_ADC_ConfigChannel+0xc4>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8000f7a:	2f00      	cmp	r7, #0
 8000f7c:	d17f      	bne.n	800107e <HAL_ADC_ConfigChannel+0x32a>
 8000f7e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8000f82:	1c46      	adds	r6, r0, #1
 8000f84:	2e09      	cmp	r6, #9
 8000f86:	f200 80ff 	bhi.w	8001188 <HAL_ADC_ConfigChannel+0x434>
 8000f8a:	2501      	movs	r5, #1
 8000f8c:	40b5      	lsls	r5, r6
 8000f8e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000f92:	ea45 6586 	orr.w	r5, r5, r6, lsl #26
 8000f96:	0512      	lsls	r2, r2, #20
 8000f98:	432a      	orrs	r2, r5
 8000f9a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000f9e:	fa97 f7a7 	rbit	r7, r7
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000fa2:	fab7 f087 	clz	r0, r7
 8000fa6:	f002 7700 	and.w	r7, r2, #33554432	; 0x2000000
 8000faa:	40c7      	lsrs	r7, r0
  MODIFY_REG(*preg,
 8000fac:	f002 72f8 	and.w	r2, r2, #32505856	; 0x1f00000
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000fb0:	f104 0e14 	add.w	lr, r4, #20
 8000fb4:	f04f 70f8 	mov.w	r0, #32505856	; 0x1f00000
 8000fb8:	fa90 fca0 	rbit	ip, r0
  MODIFY_REG(*preg,
 8000fbc:	fabc fc8c 	clz	ip, ip
 8000fc0:	fa90 f0a0 	rbit	r0, r0
 8000fc4:	fab0 f080 	clz	r0, r0
 8000fc8:	fa22 fc0c 	lsr.w	ip, r2, ip
 8000fcc:	688e      	ldr	r6, [r1, #8]
 8000fce:	f85e 5027 	ldr.w	r5, [lr, r7, lsl #2]
 8000fd2:	40c2      	lsrs	r2, r0
 8000fd4:	2007      	movs	r0, #7
 8000fd6:	fa00 fc0c 	lsl.w	ip, r0, ip
 8000fda:	fa06 f202 	lsl.w	r2, r6, r2
 8000fde:	ea25 050c 	bic.w	r5, r5, ip
 8000fe2:	432a      	orrs	r2, r5
 8000fe4:	f84e 2027 	str.w	r2, [lr, r7, lsl #2]
 8000fe8:	6808      	ldr	r0, [r1, #0]
 8000fea:	e70a      	b.n	8000e02 <HAL_ADC_ConfigChannel+0xae>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fec:	4a3c      	ldr	r2, [pc, #240]	; (80010e0 <HAL_ADC_ConfigChannel+0x38c>)
 8000fee:	6892      	ldr	r2, [r2, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000ff0:	01d6      	lsls	r6, r2, #7
 8000ff2:	d585      	bpl.n	8000f00 <HAL_ADC_ConfigChannel+0x1ac>
 8000ff4:	e710      	b.n	8000e18 <HAL_ADC_ConfigChannel+0xc4>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8000ff6:	2206      	movs	r2, #6
 8000ff8:	604a      	str	r2, [r1, #4]
 8000ffa:	4696      	mov	lr, r2
 8000ffc:	f46f 67f8 	mvn.w	r7, #1984	; 0x7c0
 8001000:	e6cd      	b.n	8000d9e <HAL_ADC_ConfigChannel+0x4a>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001002:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001004:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001006:	f3c2 0012 	ubfx	r0, r2, #0, #19
 800100a:	f3c5 6684 	ubfx	r6, r5, #26, #5
 800100e:	2800      	cmp	r0, #0
 8001010:	d170      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x3a0>
 8001012:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8001016:	42be      	cmp	r6, r7
 8001018:	d072      	beq.n	8001100 <HAL_ADC_ConfigChannel+0x3ac>
 800101a:	6e65      	ldr	r5, [r4, #100]	; 0x64
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800101c:	f104 0060 	add.w	r0, r4, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001020:	f3c5 6684 	ubfx	r6, r5, #26, #5
 8001024:	f104 0e64 	add.w	lr, r4, #100	; 0x64
 8001028:	42b7      	cmp	r7, r6
 800102a:	f040 80c2 	bne.w	80011b2 <HAL_ADC_ConfigChannel+0x45e>
  MODIFY_REG(*preg,
 800102e:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8001032:	f8ce 5000 	str.w	r5, [lr]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001036:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001038:	6885      	ldr	r5, [r0, #8]
 800103a:	f3c2 0712 	ubfx	r7, r2, #0, #19
 800103e:	f3c5 6684 	ubfx	r6, r5, #26, #5
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001042:	f100 0e08 	add.w	lr, r0, #8
 8001046:	2f00      	cmp	r7, #0
 8001048:	d175      	bne.n	8001136 <HAL_ADC_ConfigChannel+0x3e2>
 800104a:	f3c2 6784 	ubfx	r7, r2, #26, #5
 800104e:	42b7      	cmp	r7, r6
 8001050:	f040 80aa 	bne.w	80011a8 <HAL_ADC_ConfigChannel+0x454>
  MODIFY_REG(*preg,
 8001054:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8001058:	f8ce 5000 	str.w	r5, [lr]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800105c:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800105e:	68c5      	ldr	r5, [r0, #12]
 8001060:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001064:	300c      	adds	r0, #12
 8001066:	f3c5 6684 	ubfx	r6, r5, #26, #5
 800106a:	2f00      	cmp	r7, #0
 800106c:	d16d      	bne.n	800114a <HAL_ADC_ConfigChannel+0x3f6>
 800106e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001072:	42b2      	cmp	r2, r6
  MODIFY_REG(*preg,
 8001074:	bf04      	itt	eq
 8001076:	f025 4500 	biceq.w	r5, r5, #2147483648	; 0x80000000
 800107a:	6005      	streq	r5, [r0, #0]
 800107c:	e6a8      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x7c>
 800107e:	fa90 f2a0 	rbit	r2, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8001082:	fab2 f282 	clz	r2, r2
 8001086:	3201      	adds	r2, #1
 8001088:	2a09      	cmp	r2, #9
 800108a:	d863      	bhi.n	8001154 <HAL_ADC_ConfigChannel+0x400>
 800108c:	fa90 f5a0 	rbit	r5, r0
 8001090:	fab5 f585 	clz	r5, r5
 8001094:	fa90 f2a0 	rbit	r2, r0
 8001098:	fab2 f282 	clz	r2, r2
 800109c:	1c56      	adds	r6, r2, #1
 800109e:	2201      	movs	r2, #1
 80010a0:	4415      	add	r5, r2
 80010a2:	40b2      	lsls	r2, r6
 80010a4:	ea42 6585 	orr.w	r5, r2, r5, lsl #26
 80010a8:	fa90 f2a0 	rbit	r2, r0
 80010ac:	fab2 f282 	clz	r2, r2
 80010b0:	3201      	adds	r2, #1
 80010b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80010b6:	0512      	lsls	r2, r2, #20
 80010b8:	e76e      	b.n	8000f98 <HAL_ADC_ConfigChannel+0x244>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80010ba:	6822      	ldr	r2, [r4, #0]
 80010bc:	07d1      	lsls	r1, r2, #31
 80010be:	f57f af25 	bpl.w	8000f0c <HAL_ADC_ConfigChannel+0x1b8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010c4:	f042 0220 	orr.w	r2, r2, #32
 80010c8:	659a      	str	r2, [r3, #88]	; 0x58
          tmp_hal_status = HAL_ERROR;
 80010ca:	2001      	movs	r0, #1
 80010cc:	e657      	b.n	8000d7e <HAL_ADC_ConfigChannel+0x2a>
 80010ce:	bf00      	nop
 80010d0:	0007ffff 	.word	0x0007ffff
 80010d4:	c7520000 	.word	0xc7520000
 80010d8:	cb840000 	.word	0xcb840000
 80010dc:	80000001 	.word	0x80000001
 80010e0:	50040300 	.word	0x50040300
 80010e4:	50040000 	.word	0x50040000
 80010e8:	50040100 	.word	0x50040100
 80010ec:	407f0000 	.word	0x407f0000
 80010f0:	03fff000 	.word	0x03fff000
 80010f4:	fa92 f0a2 	rbit	r0, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80010f8:	fab0 f080 	clz	r0, r0
 80010fc:	4286      	cmp	r6, r0
 80010fe:	d15e      	bne.n	80011be <HAL_ADC_ConfigChannel+0x46a>
 8001100:	4620      	mov	r0, r4
 8001102:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8001106:	f840 5f60 	str.w	r5, [r0, #96]!
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800110a:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800110c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800110e:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8001112:	f3c5 6684 	ubfx	r6, r5, #26, #5
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001116:	f104 0e64 	add.w	lr, r4, #100	; 0x64
 800111a:	2f00      	cmp	r7, #0
 800111c:	f000 80c1 	beq.w	80012a2 <HAL_ADC_ConfigChannel+0x54e>
 8001120:	fa92 f7a2 	rbit	r7, r2
 8001124:	fab7 f787 	clz	r7, r7
 8001128:	42b7      	cmp	r7, r6
 800112a:	d080      	beq.n	800102e <HAL_ADC_ConfigChannel+0x2da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800112c:	6885      	ldr	r5, [r0, #8]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800112e:	f100 0e08 	add.w	lr, r0, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001132:	f3c5 6684 	ubfx	r6, r5, #26, #5
 8001136:	fa92 f7a2 	rbit	r7, r2
 800113a:	fab7 f787 	clz	r7, r7
 800113e:	42b7      	cmp	r7, r6
 8001140:	d088      	beq.n	8001054 <HAL_ADC_ConfigChannel+0x300>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001142:	68c5      	ldr	r5, [r0, #12]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001144:	300c      	adds	r0, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001146:	f3c5 6684 	ubfx	r6, r5, #26, #5
 800114a:	fa92 f2a2 	rbit	r2, r2
 800114e:	fab2 f282 	clz	r2, r2
 8001152:	e78e      	b.n	8001072 <HAL_ADC_ConfigChannel+0x31e>
 8001154:	fa90 f5a0 	rbit	r5, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8001158:	fab5 f585 	clz	r5, r5
 800115c:	fa90 f2a0 	rbit	r2, r0
 8001160:	fab2 f282 	clz	r2, r2
 8001164:	1c56      	adds	r6, r2, #1
 8001166:	2201      	movs	r2, #1
 8001168:	4415      	add	r5, r2
 800116a:	40b2      	lsls	r2, r6
 800116c:	ea42 6585 	orr.w	r5, r2, r5, lsl #26
 8001170:	fa90 f0a0 	rbit	r0, r0
 8001174:	fab0 f080 	clz	r0, r0
 8001178:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800117c:	f1a0 021b 	sub.w	r2, r0, #27
 8001180:	0512      	lsls	r2, r2, #20
 8001182:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001186:	e707      	b.n	8000f98 <HAL_ADC_ConfigChannel+0x244>
 8001188:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800118c:	f1a0 021b 	sub.w	r2, r0, #27
 8001190:	2501      	movs	r5, #1
 8001192:	0512      	lsls	r2, r2, #20
 8001194:	40b5      	lsls	r5, r6
 8001196:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800119a:	ea45 6586 	orr.w	r5, r5, r6, lsl #26
 800119e:	e6fb      	b.n	8000f98 <HAL_ADC_ConfigChannel+0x244>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	07d1      	lsls	r1, r2, #31
 80011a4:	d48d      	bmi.n	80010c2 <HAL_ADC_ConfigChannel+0x36e>
 80011a6:	e6bf      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x1d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011a8:	68c5      	ldr	r5, [r0, #12]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011aa:	300c      	adds	r0, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011ac:	f3c5 6684 	ubfx	r6, r5, #26, #5
 80011b0:	e75d      	b.n	800106e <HAL_ADC_ConfigChannel+0x31a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011b2:	6885      	ldr	r5, [r0, #8]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011b4:	f100 0e08 	add.w	lr, r0, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011b8:	f3c5 6684 	ubfx	r6, r5, #26, #5
 80011bc:	e745      	b.n	800104a <HAL_ADC_ConfigChannel+0x2f6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011be:	6e65      	ldr	r5, [r4, #100]	; 0x64
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011c0:	f104 0060 	add.w	r0, r4, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011c4:	f3c5 6684 	ubfx	r6, r5, #26, #5
 80011c8:	f104 0e64 	add.w	lr, r4, #100	; 0x64
 80011cc:	e7a8      	b.n	8001120 <HAL_ADC_ConfigChannel+0x3cc>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 80011ce:	4936      	ldr	r1, [pc, #216]	; (80012a8 <HAL_ADC_ConfigChannel+0x554>)
 80011d0:	688a      	ldr	r2, [r1, #8]
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	2a01      	cmp	r2, #1
 80011d8:	d054      	beq.n	8001284 <HAL_ADC_ConfigChannel+0x530>
 80011da:	4934      	ldr	r1, [pc, #208]	; (80012ac <HAL_ADC_ConfigChannel+0x558>)
 80011dc:	688a      	ldr	r2, [r1, #8]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	2a01      	cmp	r2, #1
 80011e4:	d053      	beq.n	800128e <HAL_ADC_ConfigChannel+0x53a>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011e6:	4a32      	ldr	r2, [pc, #200]	; (80012b0 <HAL_ADC_ConfigChannel+0x55c>)
 80011e8:	4290      	cmp	r0, r2
 80011ea:	d021      	beq.n	8001230 <HAL_ADC_ConfigChannel+0x4dc>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80011ec:	4a31      	ldr	r2, [pc, #196]	; (80012b4 <HAL_ADC_ConfigChannel+0x560>)
 80011ee:	4290      	cmp	r0, r2
 80011f0:	f47f aea9 	bne.w	8000f46 <HAL_ADC_ConfigChannel+0x1f2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011f4:	4930      	ldr	r1, [pc, #192]	; (80012b8 <HAL_ADC_ConfigChannel+0x564>)
 80011f6:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011f8:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011fa:	f000 70e0 	and.w	r0, r0, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011fe:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001202:	4302      	orrs	r2, r0
 8001204:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001208:	608a      	str	r2, [r1, #8]
 800120a:	e605      	b.n	8000e18 <HAL_ADC_ConfigChannel+0xc4>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 800120c:	2901      	cmp	r1, #1
 800120e:	d043      	beq.n	8001298 <HAL_ADC_ConfigChannel+0x544>
 8001210:	4926      	ldr	r1, [pc, #152]	; (80012ac <HAL_ADC_ConfigChannel+0x558>)
 8001212:	688a      	ldr	r2, [r1, #8]
 8001214:	f002 0203 	and.w	r2, r2, #3
 8001218:	2a01      	cmp	r2, #1
 800121a:	f47f ae85 	bne.w	8000f28 <HAL_ADC_ConfigChannel+0x1d4>
 800121e:	680a      	ldr	r2, [r1, #0]
 8001220:	07d5      	lsls	r5, r2, #31
 8001222:	f53f af4e 	bmi.w	80010c2 <HAL_ADC_ConfigChannel+0x36e>
 8001226:	e67f      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x1d4>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8001228:	4a20      	ldr	r2, [pc, #128]	; (80012ac <HAL_ADC_ConfigChannel+0x558>)
 800122a:	4294      	cmp	r4, r2
 800122c:	f47f adf4 	bne.w	8000e18 <HAL_ADC_ConfigChannel+0xc4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001230:	4921      	ldr	r1, [pc, #132]	; (80012b8 <HAL_ADC_ConfigChannel+0x564>)
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8001232:	4d22      	ldr	r5, [pc, #136]	; (80012bc <HAL_ADC_ConfigChannel+0x568>)
 8001234:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001236:	688a      	ldr	r2, [r1, #8]
 8001238:	4c21      	ldr	r4, [pc, #132]	; (80012c0 <HAL_ADC_ConfigChannel+0x56c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800123a:	f000 70e0 	and.w	r0, r0, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800123e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001242:	4302      	orrs	r2, r0
 8001244:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001248:	608a      	str	r2, [r1, #8]
 800124a:	682a      	ldr	r2, [r5, #0]
 800124c:	fba4 1202 	umull	r1, r2, r4, r2
 8001250:	0cd2      	lsrs	r2, r2, #19
 8001252:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8001256:	00d2      	lsls	r2, r2, #3
 8001258:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0)
 800125a:	9a01      	ldr	r2, [sp, #4]
 800125c:	2a00      	cmp	r2, #0
 800125e:	f43f addb 	beq.w	8000e18 <HAL_ADC_ConfigChannel+0xc4>
                wait_loop_index--;
 8001262:	9a01      	ldr	r2, [sp, #4]
 8001264:	3a01      	subs	r2, #1
 8001266:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0)
 8001268:	9a01      	ldr	r2, [sp, #4]
 800126a:	2a00      	cmp	r2, #0
 800126c:	d1f9      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x50e>
 800126e:	e5d3      	b.n	8000e18 <HAL_ADC_ConfigChannel+0xc4>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8001270:	680a      	ldr	r2, [r1, #0]
 8001272:	07d2      	lsls	r2, r2, #31
 8001274:	f53f af25 	bmi.w	80010c2 <HAL_ADC_ConfigChannel+0x36e>
 8001278:	e65d      	b.n	8000f36 <HAL_ADC_ConfigChannel+0x1e2>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <HAL_ADC_ConfigChannel+0x558>)
 800127c:	4294      	cmp	r4, r2
 800127e:	f47f adcb 	bne.w	8000e18 <HAL_ADC_ConfigChannel+0xc4>
 8001282:	e7b7      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x4a0>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
 8001284:	680a      	ldr	r2, [r1, #0]
 8001286:	07d2      	lsls	r2, r2, #31
 8001288:	f53f af1b 	bmi.w	80010c2 <HAL_ADC_ConfigChannel+0x36e>
 800128c:	e7a5      	b.n	80011da <HAL_ADC_ConfigChannel+0x486>
 800128e:	680a      	ldr	r2, [r1, #0]
 8001290:	07d7      	lsls	r7, r2, #31
 8001292:	f53f af16 	bmi.w	80010c2 <HAL_ADC_ConfigChannel+0x36e>
 8001296:	e7a6      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x492>
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	07d6      	lsls	r6, r2, #31
 800129c:	f53f af11 	bmi.w	80010c2 <HAL_ADC_ConfigChannel+0x36e>
 80012a0:	e7b6      	b.n	8001210 <HAL_ADC_ConfigChannel+0x4bc>
 80012a2:	f3c2 6784 	ubfx	r7, r2, #26, #5
 80012a6:	e6bf      	b.n	8001028 <HAL_ADC_ConfigChannel+0x2d4>
 80012a8:	50040100 	.word	0x50040100
 80012ac:	50040200 	.word	0x50040200
 80012b0:	c7520000 	.word	0xc7520000
 80012b4:	cb840000 	.word	0xcb840000
 80012b8:	50040300 	.word	0x50040300
 80012bc:	20000ce0 	.word	0x20000ce0
 80012c0:	431bde83 	.word	0x431bde83

080012c4 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80012c4:	6803      	ldr	r3, [r0, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	f012 0f0c 	tst.w	r2, #12
 80012cc:	d032      	beq.n	8001334 <ADC_ConversionStop+0x70>
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80012ce:	68da      	ldr	r2, [r3, #12]
{
 80012d0:	b570      	push	{r4, r5, r6, lr}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80012d2:	0195      	lsls	r5, r2, #6
 80012d4:	4604      	mov	r4, r0
 80012d6:	d502      	bpl.n	80012de <ADC_ConversionStop+0x1a>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 80012d8:	69c2      	ldr	r2, [r0, #28]
 80012da:	2a01      	cmp	r2, #1
 80012dc:	d03d      	beq.n	800135a <ADC_ConversionStop+0x96>
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80012de:	2902      	cmp	r1, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80012e0:	689a      	ldr	r2, [r3, #8]
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80012e2:	d029      	beq.n	8001338 <ADC_ConversionStop+0x74>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80012e4:	0755      	lsls	r5, r2, #29
 80012e6:	d502      	bpl.n	80012ee <ADC_ConversionStop+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80012e8:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80012ea:	0790      	lsls	r0, r2, #30
 80012ec:	d54b      	bpl.n	8001386 <ADC_ConversionStop+0xc2>
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80012ee:	2901      	cmp	r1, #1
 80012f0:	d029      	beq.n	8001346 <ADC_ConversionStop+0x82>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	0712      	lsls	r2, r2, #28
 80012f6:	d428      	bmi.n	800134a <ADC_ConversionStop+0x86>
    switch(ConversionGroup)
 80012f8:	2902      	cmp	r1, #2
 80012fa:	d022      	beq.n	8001342 <ADC_ConversionStop+0x7e>
 80012fc:	2903      	cmp	r1, #3
 80012fe:	d122      	bne.n	8001346 <ADC_ConversionStop+0x82>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001300:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 8001302:	f7ff fba5 	bl	8000a50 <HAL_GetTick>
 8001306:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001308:	e004      	b.n	8001314 <ADC_ConversionStop+0x50>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800130a:	f7ff fba1 	bl	8000a50 <HAL_GetTick>
 800130e:	1b80      	subs	r0, r0, r6
 8001310:	2805      	cmp	r0, #5
 8001312:	d805      	bhi.n	8001320 <ADC_ConversionStop+0x5c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	421d      	tst	r5, r3
 800131a:	d1f6      	bne.n	800130a <ADC_ConversionStop+0x46>
  return HAL_OK;
 800131c:	2000      	movs	r0, #0
 800131e:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001320:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001328:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8001330:	2001      	movs	r0, #1
 8001332:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001334:	2000      	movs	r0, #0
}
 8001336:	4770      	bx	lr
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001338:	0715      	lsls	r5, r2, #28
 800133a:	d502      	bpl.n	8001342 <ADC_ConversionStop+0x7e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800133c:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800133e:	0790      	lsls	r0, r2, #30
 8001340:	d506      	bpl.n	8001350 <ADC_ConversionStop+0x8c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001342:	2508      	movs	r5, #8
        break;
 8001344:	e7dd      	b.n	8001302 <ADC_ConversionStop+0x3e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001346:	2504      	movs	r5, #4
        break;
 8001348:	e7db      	b.n	8001302 <ADC_ConversionStop+0x3e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800134a:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800134c:	0796      	lsls	r6, r2, #30
 800134e:	d4d3      	bmi.n	80012f8 <ADC_ConversionStop+0x34>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	f042 0220 	orr.w	r2, r2, #32
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	e7ce      	b.n	80012f8 <ADC_ConversionStop+0x34>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 800135a:	6982      	ldr	r2, [r0, #24]
 800135c:	2a01      	cmp	r2, #1
 800135e:	d1be      	bne.n	80012de <ADC_ConversionStop+0x1a>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	0650      	lsls	r0, r2, #25
 8001364:	d406      	bmi.n	8001374 <ADC_ConversionStop+0xb0>
 8001366:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <ADC_ConversionStop+0xd4>)
 8001368:	e001      	b.n	800136e <ADC_ConversionStop+0xaa>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 800136a:	3a01      	subs	r2, #1
 800136c:	d0d8      	beq.n	8001320 <ADC_ConversionStop+0x5c>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800136e:	6819      	ldr	r1, [r3, #0]
 8001370:	0649      	lsls	r1, r1, #25
 8001372:	d5fa      	bpl.n	800136a <ADC_ConversionStop+0xa6>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001374:	2240      	movs	r2, #64	; 0x40
 8001376:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	0756      	lsls	r6, r2, #29
 800137c:	d5e3      	bpl.n	8001346 <ADC_ConversionStop+0x82>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800137e:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001380:	0792      	lsls	r2, r2, #30
 8001382:	d4e0      	bmi.n	8001346 <ADC_ConversionStop+0x82>
      ConversionGroup = ADC_REGULAR_GROUP;
 8001384:	2101      	movs	r1, #1
  MODIFY_REG(ADCx->CR,
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800138c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001390:	f042 0210 	orr.w	r2, r2, #16
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	e7aa      	b.n	80012ee <ADC_ConversionStop+0x2a>
 8001398:	0a340000 	.word	0x0a340000

0800139c <ADC_Enable>:
{
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80013a0:	2300      	movs	r3, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013a2:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 80013a4:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013a6:	6893      	ldr	r3, [r2, #8]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d037      	beq.n	8001420 <ADC_Enable+0x84>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80013b0:	6891      	ldr	r1, [r2, #8]
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <ADC_Enable+0xc0>)
 80013b4:	4219      	tst	r1, r3
 80013b6:	d13a      	bne.n	800142e <ADC_Enable+0x92>
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <ADC_Enable+0xc4>)
 80013ba:	4c2a      	ldr	r4, [pc, #168]	; (8001464 <ADC_Enable+0xc8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80013be:	6891      	ldr	r1, [r2, #8]
 80013c0:	fba4 4303 	umull	r4, r3, r4, r3
 80013c4:	0cdb      	lsrs	r3, r3, #19
 80013c6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80013ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013ce:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	f041 0101 	orr.w	r1, r1, #1
 80013d8:	6091      	str	r1, [r2, #8]
 80013da:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80013dc:	9b01      	ldr	r3, [sp, #4]
 80013de:	b12b      	cbz	r3, 80013ec <ADC_Enable+0x50>
      wait_loop_index--;
 80013e0:	9b01      	ldr	r3, [sp, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f9      	bne.n	80013e0 <ADC_Enable+0x44>
 80013ec:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80013ee:	f7ff fb2f 	bl	8000a50 <HAL_GetTick>
 80013f2:	4e1d      	ldr	r6, [pc, #116]	; (8001468 <ADC_Enable+0xcc>)
 80013f4:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013f6:	e00c      	b.n	8001412 <ADC_Enable+0x76>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80013f8:	689a      	ldr	r2, [r3, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 80013fa:	07d1      	lsls	r1, r2, #31
 80013fc:	d404      	bmi.n	8001408 <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	4032      	ands	r2, r6
 8001402:	f042 0201 	orr.w	r2, r2, #1
 8001406:	609a      	str	r2, [r3, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001408:	f7ff fb22 	bl	8000a50 <HAL_GetTick>
 800140c:	1b40      	subs	r0, r0, r5
 800140e:	2802      	cmp	r0, #2
 8001410:	d818      	bhi.n	8001444 <ADC_Enable+0xa8>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	07d2      	lsls	r2, r2, #31
 8001418:	d5ee      	bpl.n	80013f8 <ADC_Enable+0x5c>
  return HAL_OK;
 800141a:	2000      	movs	r0, #0
}
 800141c:	b002      	add	sp, #8
 800141e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001420:	6813      	ldr	r3, [r2, #0]
 8001422:	07dc      	lsls	r4, r3, #31
 8001424:	d4f9      	bmi.n	800141a <ADC_Enable+0x7e>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001426:	6891      	ldr	r1, [r2, #8]
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <ADC_Enable+0xc0>)
 800142a:	4219      	tst	r1, r3
 800142c:	d0c4      	beq.n	80013b8 <ADC_Enable+0x1c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001436:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 800143e:	2001      	movs	r0, #1
}
 8001440:	b002      	add	sp, #8
 8001442:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001444:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800144c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 800144e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8001456:	b002      	add	sp, #8
 8001458:	bd70      	pop	{r4, r5, r6, pc}
 800145a:	bf00      	nop
 800145c:	8000003f 	.word	0x8000003f
 8001460:	20000ce0 	.word	0x20000ce0
 8001464:	431bde83 	.word	0x431bde83
 8001468:	7fffffc0 	.word	0x7fffffc0

0800146c <HAL_ADC_Start_DMA>:
{
 800146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800146e:	6804      	ldr	r4, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001470:	68a5      	ldr	r5, [r4, #8]
 8001472:	076d      	lsls	r5, r5, #29
 8001474:	d502      	bpl.n	800147c <HAL_ADC_Start_DMA+0x10>
    tmp_hal_status = HAL_BUSY;
 8001476:	2502      	movs	r5, #2
}
 8001478:	4628      	mov	r0, r5
 800147a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800147c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8001480:	2b01      	cmp	r3, #1
 8001482:	d0f8      	beq.n	8001476 <HAL_ADC_Start_DMA+0xa>
    if (ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <HAL_ADC_Start_DMA+0xf8>)
    __HAL_LOCK(hadc);
 8001486:	2501      	movs	r5, #1
    if (ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
 8001488:	429c      	cmp	r4, r3
    __HAL_LOCK(hadc);
 800148a:	f880 5054 	strb.w	r5, [r0, #84]	; 0x54
    if (ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
 800148e:	d051      	beq.n	8001534 <HAL_ADC_Start_DMA+0xc8>
 8001490:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001494:	429c      	cmp	r4, r3
 8001496:	d04d      	beq.n	8001534 <HAL_ADC_Start_DMA+0xc8>
 8001498:	4617      	mov	r7, r2
 800149a:	460e      	mov	r6, r1
 800149c:	4604      	mov	r4, r0
      tmp_hal_status = ADC_Enable(hadc);
 800149e:	f7ff ff7d 	bl	800139c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80014a2:	4605      	mov	r5, r0
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d159      	bne.n	800155c <HAL_ADC_Start_DMA+0xf0>
        ADC_STATE_CLR_SET(hadc->State,
 80014a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014aa:	6821      	ldr	r1, [r4, #0]
 80014ac:	4a2d      	ldr	r2, [pc, #180]	; (8001564 <HAL_ADC_Start_DMA+0xf8>)
        ADC_STATE_CLR_SET(hadc->State,
 80014ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014ba:	4291      	cmp	r1, r2
        ADC_STATE_CLR_SET(hadc->State,
 80014bc:	65a3      	str	r3, [r4, #88]	; 0x58
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014be:	d007      	beq.n	80014d0 <HAL_ADC_Start_DMA+0x64>
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_ADC_Start_DMA+0xfc>)
 80014c2:	4299      	cmp	r1, r3
 80014c4:	d004      	beq.n	80014d0 <HAL_ADC_Start_DMA+0x64>
 80014c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	06db      	lsls	r3, r3, #27
 80014ce:	d103      	bne.n	80014d8 <HAL_ADC_Start_DMA+0x6c>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014d6:	65a3      	str	r3, [r4, #88]	; 0x58
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014da:	6d20      	ldr	r0, [r4, #80]	; 0x50
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014dc:	f8df e098 	ldr.w	lr, [pc, #152]	; 8001578 <HAL_ADC_Start_DMA+0x10c>
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014e0:	4a22      	ldr	r2, [pc, #136]	; (800156c <HAL_ADC_Start_DMA+0x100>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014e2:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014e6:	bf1c      	itt	ne
 80014e8:	6de3      	ldrne	r3, [r4, #92]	; 0x5c
 80014ea:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc); 
 80014ee:	65e3      	str	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <HAL_ADC_Start_DMA+0x104>)
 80014f2:	62c3      	str	r3, [r0, #44]	; 0x2c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014f4:	231c      	movs	r3, #28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014f6:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014fa:	6342      	str	r2, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014fc:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014fe:	684b      	ldr	r3, [r1, #4]
        __HAL_UNLOCK(hadc);
 8001500:	2200      	movs	r2, #0
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001502:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 8001506:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800150a:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800150c:	68cb      	ldr	r3, [r1, #12]
 800150e:	f043 0e01 	orr.w	lr, r3, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001512:	4632      	mov	r2, r6
 8001514:	463b      	mov	r3, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001516:	f8c1 e00c 	str.w	lr, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800151a:	3140      	adds	r1, #64	; 0x40
 800151c:	f000 fa0c 	bl	8001938 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001520:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001522:	6893      	ldr	r3, [r2, #8]
 8001524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001528:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6093      	str	r3, [r2, #8]
 8001532:	e7a1      	b.n	8001478 <HAL_ADC_Start_DMA+0xc>
    if (ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_ADC_Start_DMA+0x108>)
 8001536:	689c      	ldr	r4, [r3, #8]
 8001538:	06e4      	lsls	r4, r4, #27
 800153a:	d0ad      	beq.n	8001498 <HAL_ADC_Start_DMA+0x2c>
 800153c:	689c      	ldr	r4, [r3, #8]
 800153e:	f004 041f 	and.w	r4, r4, #31
 8001542:	2c05      	cmp	r4, #5
 8001544:	d0a8      	beq.n	8001498 <HAL_ADC_Start_DMA+0x2c>
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	2b09      	cmp	r3, #9
 800154e:	d0a3      	beq.n	8001498 <HAL_ADC_Start_DMA+0x2c>
      __HAL_UNLOCK(hadc);
 8001550:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
 8001552:	2501      	movs	r5, #1
      __HAL_UNLOCK(hadc);
 8001554:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
}
 8001558:	4628      	mov	r0, r5
 800155a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 800155c:	2300      	movs	r3, #0
 800155e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8001562:	e789      	b.n	8001478 <HAL_ADC_Start_DMA+0xc>
 8001564:	50040000 	.word	0x50040000
 8001568:	50040200 	.word	0x50040200
 800156c:	08000d39 	.word	0x08000d39
 8001570:	08000cd1 	.word	0x08000cd1
 8001574:	50040300 	.word	0x50040300
 8001578:	08000cc1 	.word	0x08000cc1

0800157c <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 800157c:	6802      	ldr	r2, [r0, #0]
{
 800157e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001580:	6893      	ldr	r3, [r2, #8]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d002      	beq.n	8001590 <ADC_Disable+0x14>
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001590:	6811      	ldr	r1, [r2, #0]
 8001592:	07c9      	lsls	r1, r1, #31
 8001594:	d5f9      	bpl.n	800158a <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001596:	6891      	ldr	r1, [r2, #8]
 8001598:	f001 010d 	and.w	r1, r1, #13
 800159c:	2901      	cmp	r1, #1
 800159e:	d009      	beq.n	80015b4 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80015a2:	f042 0210 	orr.w	r2, r2, #16
 80015a6:	6582      	str	r2, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	65c2      	str	r2, [r0, #92]	; 0x5c
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80015b4:	6893      	ldr	r3, [r2, #8]
 80015b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015be:	f043 0302 	orr.w	r3, r3, #2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80015c2:	2103      	movs	r1, #3
 80015c4:	6093      	str	r3, [r2, #8]
 80015c6:	6011      	str	r1, [r2, #0]
 80015c8:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80015ca:	f7ff fa41 	bl	8000a50 <HAL_GetTick>
 80015ce:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	07db      	lsls	r3, r3, #31
 80015d6:	d5d8      	bpl.n	800158a <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015d8:	f7ff fa3a 	bl	8000a50 <HAL_GetTick>
 80015dc:	1b40      	subs	r0, r0, r5
 80015de:	2802      	cmp	r0, #2
 80015e0:	d9f6      	bls.n	80015d0 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015e4:	f043 0310 	orr.w	r3, r3, #16
 80015e8:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e7ca      	b.n	800158c <ADC_Disable+0x10>
 80015f6:	bf00      	nop

080015f8 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 80015f8:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80015fc:	2a01      	cmp	r2, #1
{
 80015fe:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8001600:	d102      	bne.n	8001608 <HAL_ADC_Stop_DMA+0x10>
 8001602:	2402      	movs	r4, #2
}
 8001604:	4620      	mov	r0, r4
 8001606:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hadc);
 8001608:	2301      	movs	r3, #1
 800160a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800160e:	2103      	movs	r1, #3
 8001610:	4605      	mov	r5, r0
 8001612:	f7ff fe57 	bl	80012c4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001616:	4604      	mov	r4, r0
 8001618:	b120      	cbz	r0, 8001624 <HAL_ADC_Stop_DMA+0x2c>
  __HAL_UNLOCK(hadc);
 800161a:	2300      	movs	r3, #0
 800161c:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
}
 8001620:	4620      	mov	r0, r4
 8001622:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001624:	682a      	ldr	r2, [r5, #0]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001626:	6d28      	ldr	r0, [r5, #80]	; 0x50
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001628:	68d3      	ldr	r3, [r2, #12]
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001630:	f000 f9c2 	bl	80019b8 <HAL_DMA_Abort>
    if (tmp_hal_status != HAL_OK)
 8001634:	4604      	mov	r4, r0
 8001636:	b998      	cbnz	r0, 8001660 <HAL_ADC_Stop_DMA+0x68>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001638:	682a      	ldr	r2, [r5, #0]
 800163a:	6853      	ldr	r3, [r2, #4]
 800163c:	f023 0310 	bic.w	r3, r3, #16
 8001640:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8001642:	4628      	mov	r0, r5
 8001644:	f7ff ff9a 	bl	800157c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001648:	4604      	mov	r4, r0
 800164a:	2800      	cmp	r0, #0
 800164c:	d1e5      	bne.n	800161a <HAL_ADC_Stop_DMA+0x22>
      ADC_STATE_CLR_SET(hadc->State,
 800164e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001650:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	65ab      	str	r3, [r5, #88]	; 0x58
 800165e:	e7dc      	b.n	800161a <HAL_ADC_Stop_DMA+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001660:	6dab      	ldr	r3, [r5, #88]	; 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001662:	682a      	ldr	r2, [r5, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001668:	65ab      	str	r3, [r5, #88]	; 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800166a:	6853      	ldr	r3, [r2, #4]
 800166c:	f023 0310 	bic.w	r3, r3, #16
 8001670:	6053      	str	r3, [r2, #4]
      ADC_Disable(hadc);
 8001672:	4628      	mov	r0, r5
 8001674:	f7ff ff82 	bl	800157c <ADC_Disable>
 8001678:	e7cf      	b.n	800161a <HAL_ADC_Stop_DMA+0x22>
 800167a:	bf00      	nop

0800167c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800167c:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8001680:	2a01      	cmp	r2, #1
 8001682:	d046      	beq.n	8001712 <HAL_ADCEx_MultiModeConfigChannel+0x96>
{
 8001684:	b4f0      	push	{r4, r5, r6, r7}
  
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001686:	6802      	ldr	r2, [r0, #0]
 8001688:	4c37      	ldr	r4, [pc, #220]	; (8001768 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800168a:	680d      	ldr	r5, [r1, #0]
 800168c:	4603      	mov	r3, r0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800168e:	42a2      	cmp	r2, r4
  __HAL_LOCK(hadc);
 8001690:	f04f 0001 	mov.w	r0, #1
 8001694:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001698:	d008      	beq.n	80016ac <HAL_ADCEx_MultiModeConfigChannel+0x30>
  
  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800169a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800169c:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800169e:	f042 0220 	orr.w	r2, r2, #32
 80016a2:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 80016a4:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
} 
 80016a8:	bcf0      	pop	{r4, r5, r6, r7}
 80016aa:	4770      	bx	lr
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80016ac:	6890      	ldr	r0, [r2, #8]
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80016ae:	0747      	lsls	r7, r0, #29
 80016b0:	d509      	bpl.n	80016c6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016b4:	f042 0220 	orr.w	r2, r2, #32
 80016b8:	659a      	str	r2, [r3, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80016ba:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
} 
 80016c2:	bcf0      	pop	{r4, r5, r6, r7}
 80016c4:	4770      	bx	lr
 80016c6:	4829      	ldr	r0, [pc, #164]	; (800176c <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 80016c8:	6880      	ldr	r0, [r0, #8]
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSlave) == RESET) )
 80016ca:	0746      	lsls	r6, r0, #29
 80016cc:	d4f1      	bmi.n	80016b2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016ce:	b315      	cbz	r5, 8001716 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, 
 80016d0:	4f27      	ldr	r7, [pc, #156]	; (8001770 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 80016d2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80016d4:	68bc      	ldr	r4, [r7, #8]
 80016d6:	6848      	ldr	r0, [r1, #4]
 80016d8:	f424 4460 	bic.w	r4, r4, #57344	; 0xe000
 80016dc:	ea40 3046 	orr.w	r0, r0, r6, lsl #13
 80016e0:	4320      	orrs	r0, r4
 80016e2:	60b8      	str	r0, [r7, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 80016e4:	6890      	ldr	r0, [r2, #8]
 80016e6:	f000 0003 	and.w	r0, r0, #3
 80016ea:	2801      	cmp	r0, #1
 80016ec:	d030      	beq.n	8001750 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 80016ee:	481f      	ldr	r0, [pc, #124]	; (800176c <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 80016f0:	6882      	ldr	r2, [r0, #8]
 80016f2:	f002 0203 	and.w	r2, r2, #3
 80016f6:	2a01      	cmp	r2, #1
 80016f8:	d032      	beq.n	8001760 <HAL_ADCEx_MultiModeConfigChannel+0xe4>
          MODIFY_REG(tmpADC_Common->CCR,
 80016fa:	481d      	ldr	r0, [pc, #116]	; (8001770 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 80016fc:	6889      	ldr	r1, [r1, #8]
 80016fe:	6882      	ldr	r2, [r0, #8]
 8001700:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001704:	430d      	orrs	r5, r1
 8001706:	f022 020f 	bic.w	r2, r2, #15
 800170a:	4315      	orrs	r5, r2
 800170c:	6085      	str	r5, [r0, #8]
  HAL_StatusTypeDef  tmp_hal_status = HAL_OK;
 800170e:	2000      	movs	r0, #0
 8001710:	e7d4      	b.n	80016bc <HAL_ADCEx_MultiModeConfigChannel+0x40>
  __HAL_LOCK(hadc);
 8001712:	2002      	movs	r0, #2
 8001714:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001716:	4816      	ldr	r0, [pc, #88]	; (8001770 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8001718:	6881      	ldr	r1, [r0, #8]
 800171a:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800171e:	6081      	str	r1, [r0, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001720:	6891      	ldr	r1, [r2, #8]
 8001722:	f001 0103 	and.w	r1, r1, #3
 8001726:	2901      	cmp	r1, #1
 8001728:	d00e      	beq.n	8001748 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 800172a:	4910      	ldr	r1, [pc, #64]	; (800176c <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 800172c:	688a      	ldr	r2, [r1, #8]
 800172e:	f002 0203 	and.w	r2, r2, #3
 8001732:	2a01      	cmp	r2, #1
 8001734:	d010      	beq.n	8001758 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001736:	490e      	ldr	r1, [pc, #56]	; (8001770 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8001738:	688a      	ldr	r2, [r1, #8]
 800173a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800173e:	f022 020f 	bic.w	r2, r2, #15
 8001742:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef  tmp_hal_status = HAL_OK;
 8001744:	2000      	movs	r0, #0
 8001746:	e7b9      	b.n	80016bc <HAL_ADCEx_MultiModeConfigChannel+0x40>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	07d1      	lsls	r1, r2, #31
 800174c:	d4df      	bmi.n	800170e <HAL_ADCEx_MultiModeConfigChannel+0x92>
 800174e:	e7ec      	b.n	800172a <HAL_ADCEx_MultiModeConfigChannel+0xae>
      if ((ADC_IS_ENABLE(hadc) == RESET)                             &&
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	07d4      	lsls	r4, r2, #31
 8001754:	d5cb      	bpl.n	80016ee <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8001756:	e7da      	b.n	800170e <HAL_ADCEx_MultiModeConfigChannel+0x92>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 8001758:	680a      	ldr	r2, [r1, #0]
 800175a:	07d2      	lsls	r2, r2, #31
 800175c:	d4d7      	bmi.n	800170e <HAL_ADCEx_MultiModeConfigChannel+0x92>
 800175e:	e7ea      	b.n	8001736 <HAL_ADCEx_MultiModeConfigChannel+0xba>
          (ADC_IS_ENABLE(&tmphadcSlave) == RESET)  )
 8001760:	6802      	ldr	r2, [r0, #0]
 8001762:	07d0      	lsls	r0, r2, #31
 8001764:	d4d3      	bmi.n	800170e <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8001766:	e7c8      	b.n	80016fa <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8001768:	50040000 	.word	0x50040000
 800176c:	50040100 	.word	0x50040100
 8001770:	50040300 	.word	0x50040300

08001774 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001776:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001778:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800177c:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800177e:	0200      	lsls	r0, r0, #8
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800178c:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800178e:	60d3      	str	r3, [r2, #12]
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179a:	b470      	push	{r4, r5, r6}
 800179c:	68dc      	ldr	r4, [r3, #12]
 800179e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a2:	f1c4 0607 	rsb	r6, r4, #7
 80017a6:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	bf28      	it	cs
 80017ae:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b0:	2b06      	cmp	r3, #6
 80017b2:	d917      	bls.n	80017e4 <HAL_NVIC_SetPriority+0x4c>
 80017b4:	3c03      	subs	r4, #3
 80017b6:	2501      	movs	r5, #1
 80017b8:	40a5      	lsls	r5, r4
 80017ba:	3d01      	subs	r5, #1
 80017bc:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017be:	2301      	movs	r3, #1
 80017c0:	40b3      	lsls	r3, r6
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4019      	ands	r1, r3
 80017c6:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 80017c8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ca:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 80017ce:	db0c      	blt.n	80017ea <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017d4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017d8:	0109      	lsls	r1, r1, #4
 80017da:	b2c9      	uxtb	r1, r1
 80017dc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017e0:	bc70      	pop	{r4, r5, r6}
 80017e2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e4:	2200      	movs	r2, #0
 80017e6:	4614      	mov	r4, r2
 80017e8:	e7e9      	b.n	80017be <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_NVIC_SetPriority+0x68>)
 80017ec:	f000 000f 	and.w	r0, r0, #15
 80017f0:	0109      	lsls	r1, r1, #4
 80017f2:	4403      	add	r3, r0
 80017f4:	b2c9      	uxtb	r1, r1
 80017f6:	7619      	strb	r1, [r3, #24]
 80017f8:	bc70      	pop	{r4, r5, r6}
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	e000ecfc 	.word	0xe000ecfc

08001804 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001804:	f000 011f 	and.w	r1, r0, #31
 8001808:	2301      	movs	r3, #1
 800180a:	0940      	lsrs	r0, r0, #5
 800180c:	4a02      	ldr	r2, [pc, #8]	; (8001818 <HAL_NVIC_EnableIRQ+0x14>)
 800180e:	408b      	lsls	r3, r1
 8001810:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100

0800181c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	3801      	subs	r0, #1
 800181e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001822:	d20e      	bcs.n	8001842 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	4c08      	ldr	r4, [pc, #32]	; (800184c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	20f0      	movs	r0, #240	; 0xf0
 800182e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001832:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001834:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001836:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800183c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001840:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001842:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001852:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001854:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001856:	bf0c      	ite	eq
 8001858:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800185c:	f023 0304 	bicne.w	r3, r3, #4
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4770      	bx	lr
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <HAL_SYSTICK_IRQHandler>:
{
 800186c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800186e:	f7ff fffb 	bl	8001868 <HAL_SYSTICK_Callback>
 8001872:	bd08      	pop	{r3, pc}

08001874 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001874:	2800      	cmp	r0, #0
 8001876:	d04c      	beq.n	8001912 <HAL_DMA_Init+0x9e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001878:	6801      	ldr	r1, [r0, #0]
 800187a:	4a27      	ldr	r2, [pc, #156]	; (8001918 <HAL_DMA_Init+0xa4>)
 800187c:	4291      	cmp	r1, r2
{
 800187e:	b4f0      	push	{r4, r5, r6, r7}
 8001880:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001882:	d942      	bls.n	800190a <HAL_DMA_Init+0x96>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001884:	4a25      	ldr	r2, [pc, #148]	; (800191c <HAL_DMA_Init+0xa8>)
 8001886:	4826      	ldr	r0, [pc, #152]	; (8001920 <HAL_DMA_Init+0xac>)
    hdma->DmaBaseAddress = DMA2;
 8001888:	4c26      	ldr	r4, [pc, #152]	; (8001924 <HAL_DMA_Init+0xb0>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800188a:	689e      	ldr	r6, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188c:	691f      	ldr	r7, [r3, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	699d      	ldr	r5, [r3, #24]
    hdma->DmaBaseAddress = DMA2;
 8001890:	641c      	str	r4, [r3, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001892:	440a      	add	r2, r1
 8001894:	fba0 0202 	umull	r0, r2, r0, r2
 8001898:	0912      	lsrs	r2, r2, #4
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
  tmp |=  hdma->Init.Direction        |
 800189e:	68da      	ldr	r2, [r3, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a0:	6958      	ldr	r0, [r3, #20]
  tmp |=  hdma->Init.Direction        |
 80018a2:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a4:	433a      	orrs	r2, r7
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a6:	2702      	movs	r7, #2
 80018a8:	f883 7025 	strb.w	r7, [r3, #37]	; 0x25
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ac:	4302      	orrs	r2, r0
  tmp = hdma->Instance->CCR;
 80018ae:	680c      	ldr	r4, [r1, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 80018b0:	6a18      	ldr	r0, [r3, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b2:	432a      	orrs	r2, r5
 80018b4:	69dd      	ldr	r5, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018b6:	f424 44ff 	bic.w	r4, r4, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ba:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80018bc:	4302      	orrs	r2, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018be:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80018c2:	4322      	orrs	r2, r4
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018c4:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80018c8:	600a      	str	r2, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018ca:	d011      	beq.n	80018f0 <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80018cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80018ce:	4a16      	ldr	r2, [pc, #88]	; (8001928 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80018d0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    if (DMA1 == hdma->DmaBaseAddress)
 80018d2:	4291      	cmp	r1, r2
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80018d4:	bf0c      	ite	eq
 80018d6:	4915      	ldreq	r1, [pc, #84]	; (800192c <HAL_DMA_Init+0xb8>)
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80018d8:	4915      	ldrne	r1, [pc, #84]	; (8001930 <HAL_DMA_Init+0xbc>)
 80018da:	240f      	movs	r4, #15
 80018dc:	6808      	ldr	r0, [r1, #0]
 80018de:	40ac      	lsls	r4, r5
 80018e0:	ea20 0004 	bic.w	r0, r0, r4
 80018e4:	6008      	str	r0, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	6808      	ldr	r0, [r1, #0]
 80018ea:	40aa      	lsls	r2, r5
 80018ec:	4302      	orrs	r2, r0
 80018ee:	600a      	str	r2, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80018f0:	2000      	movs	r0, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80018f2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f4:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80018f6:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80018f8:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80018fa:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80018fc:	6398      	str	r0, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018fe:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001902:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
}
 8001906:	bcf0      	pop	{r4, r5, r6, r7}
 8001908:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_DMA_Init+0xc0>)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <HAL_DMA_Init+0xac>)
    hdma->DmaBaseAddress = DMA1;
 800190e:	4c06      	ldr	r4, [pc, #24]	; (8001928 <HAL_DMA_Init+0xb4>)
 8001910:	e7bb      	b.n	800188a <HAL_DMA_Init+0x16>
    return HAL_ERROR;
 8001912:	2001      	movs	r0, #1
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40020407 	.word	0x40020407
 800191c:	bffdfbf8 	.word	0xbffdfbf8
 8001920:	cccccccd 	.word	0xcccccccd
 8001924:	40020400 	.word	0x40020400
 8001928:	40020000 	.word	0x40020000
 800192c:	400200a8 	.word	0x400200a8
 8001930:	400204a8 	.word	0x400204a8
 8001934:	bffdfff8 	.word	0xbffdfff8

08001938 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001938:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800193a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800193e:	2c01      	cmp	r4, #1
 8001940:	d00c      	beq.n	800195c <HAL_DMA_Start_IT+0x24>

  if(HAL_DMA_STATE_READY == hdma->State)
 8001942:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8001946:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001948:	b2e4      	uxtb	r4, r4
 800194a:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800194c:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001950:	d006      	beq.n	8001960 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001952:	2300      	movs	r3, #0
 8001954:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001958:	2002      	movs	r0, #2
 800195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 800195c:	2002      	movs	r0, #2
  }
  return status;
}
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE(hdma);
 8001960:	6805      	ldr	r5, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001962:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001964:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001966:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800196a:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800196c:	682e      	ldr	r6, [r5, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800196e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001970:	f026 0e01 	bic.w	lr, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001974:	6c46      	ldr	r6, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8001976:	f8c5 e000 	str.w	lr, [r5]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800197a:	40b4      	lsls	r4, r6

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800197c:	6886      	ldr	r6, [r0, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800197e:	607c      	str	r4, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8001980:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8001982:	6b03      	ldr	r3, [r0, #48]	; 0x30
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001984:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001986:	bf0b      	itete	eq
 8001988:	60aa      	streq	r2, [r5, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800198a:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 800198c:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800198e:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001990:	b14b      	cbz	r3, 80019a6 <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001992:	682b      	ldr	r3, [r5, #0]
 8001994:	f043 030e 	orr.w	r3, r3, #14
 8001998:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800199a:	682b      	ldr	r3, [r5, #0]
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019a2:	2000      	movs	r0, #0
 80019a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a6:	682b      	ldr	r3, [r5, #0]
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019ae:	682b      	ldr	r3, [r5, #0]
 80019b0:	f043 030a 	orr.w	r3, r3, #10
 80019b4:	602b      	str	r3, [r5, #0]
 80019b6:	e7f0      	b.n	800199a <HAL_DMA_Start_IT+0x62>

080019b8 <HAL_DMA_Abort>:
  if(NULL == hdma)
 80019b8:	b1c0      	cbz	r0, 80019ec <HAL_DMA_Abort+0x34>
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ba:	6802      	ldr	r2, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019bc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80019be:	4603      	mov	r3, r0
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c0:	6810      	ldr	r0, [r2, #0]
{
 80019c2:	b470      	push	{r4, r5, r6}
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c4:	f020 000e 	bic.w	r0, r0, #14
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019c8:	6c1e      	ldr	r6, [r3, #64]	; 0x40
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ca:	6010      	str	r0, [r2, #0]
  __HAL_DMA_DISABLE(hdma);
 80019cc:	6810      	ldr	r0, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019ce:	2501      	movs	r5, #1
  __HAL_UNLOCK(hdma);
 80019d0:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80019d2:	f020 0001 	bic.w	r0, r0, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019d6:	fa05 f101 	lsl.w	r1, r5, r1
  __HAL_DMA_DISABLE(hdma);
 80019da:	6010      	str	r0, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019dc:	6071      	str	r1, [r6, #4]
  return status;
 80019de:	4620      	mov	r0, r4
  hdma->State = HAL_DMA_STATE_READY;
 80019e0:	f883 5025 	strb.w	r5, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80019e4:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
}
 80019e8:	bc70      	pop	{r4, r5, r6}
 80019ea:	4770      	bx	lr
    return HAL_ERROR;
 80019ec:	2001      	movs	r0, #1
 80019ee:	4770      	bx	lr

080019f0 <HAL_DMA_IRQHandler>:
{
 80019f0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019f2:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019f6:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80019f8:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019fa:	2304      	movs	r3, #4
 80019fc:	4093      	lsls	r3, r2
 80019fe:	4219      	tst	r1, r3
  uint32_t source_it = hdma->Instance->CCR;
 8001a00:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a02:	d00d      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x30>
 8001a04:	0777      	lsls	r7, r6, #29
 8001a06:	d50b      	bpl.n	8001a20 <HAL_DMA_IRQHandler+0x30>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001a08:	6822      	ldr	r2, [r4, #0]
 8001a0a:	0692      	lsls	r2, r2, #26
 8001a0c:	d403      	bmi.n	8001a16 <HAL_DMA_IRQHandler+0x26>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a0e:	6822      	ldr	r2, [r4, #0]
 8001a10:	f022 0204 	bic.w	r2, r2, #4
 8001a14:	6022      	str	r2, [r4, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001a16:	6b02      	ldr	r2, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8001a18:	606b      	str	r3, [r5, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001a1a:	b1c2      	cbz	r2, 8001a4e <HAL_DMA_IRQHandler+0x5e>
}
 8001a1c:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferCpltCallback(hdma);
 8001a1e:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a20:	2302      	movs	r3, #2
 8001a22:	4093      	lsls	r3, r2
 8001a24:	4219      	tst	r1, r3
 8001a26:	d014      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x62>
 8001a28:	07b7      	lsls	r7, r6, #30
 8001a2a:	d512      	bpl.n	8001a52 <HAL_DMA_IRQHandler+0x62>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001a2c:	6822      	ldr	r2, [r4, #0]
 8001a2e:	0692      	lsls	r2, r2, #26
 8001a30:	d406      	bmi.n	8001a40 <HAL_DMA_IRQHandler+0x50>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a32:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001a34:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a36:	f022 020a 	bic.w	r2, r2, #10
 8001a3a:	6022      	str	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001a3c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 8001a40:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8001a42:	606b      	str	r3, [r5, #4]
    __HAL_UNLOCK(hdma);
 8001a44:	2300      	movs	r3, #0
 8001a46:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d1e6      	bne.n	8001a1c <HAL_DMA_IRQHandler+0x2c>
}
 8001a4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a50:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a52:	2308      	movs	r3, #8
 8001a54:	4093      	lsls	r3, r2
 8001a56:	420b      	tst	r3, r1
 8001a58:	d0f9      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x5e>
 8001a5a:	0733      	lsls	r3, r6, #28
 8001a5c:	d5f7      	bpl.n	8001a4e <HAL_DMA_IRQHandler+0x5e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5e:	6821      	ldr	r1, [r4, #0]
    if (hdma->XferErrorCallback != NULL)
 8001a60:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a62:	2301      	movs	r3, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a64:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a68:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma);
 8001a6c:	2700      	movs	r7, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a6e:	6021      	str	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a70:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a72:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001a74:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8001a78:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8001a7c:	2e00      	cmp	r6, #0
 8001a7e:	d0e6      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x5e>
      hdma->XferErrorCallback(hdma);
 8001a80:	4633      	mov	r3, r6
}
 8001a82:	bcf0      	pop	{r4, r5, r6, r7}
      hdma->XferErrorCallback(hdma);
 8001a84:	4718      	bx	r3
 8001a86:	bf00      	nop

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a8a:	6809      	ldr	r1, [r1, #0]
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	f000 8104 	beq.w	8001c9a <HAL_GPIO_Init+0x212>
{
 8001a92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a96:	f8df e220 	ldr.w	lr, [pc, #544]	; 8001cb8 <HAL_GPIO_Init+0x230>
{
 8001a9a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a9c:	2500      	movs	r5, #0
 8001a9e:	e087      	b.n	8001bb0 <HAL_GPIO_Init+0x128>
 8001aa0:	ea4f 0845 	mov.w	r8, r5, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001aa4:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001aa6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001aaa:	fa03 f308 	lsl.w	r3, r3, r8
 8001aae:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ab0:	f004 0903 	and.w	r9, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001ab4:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ab8:	fa09 fa08 	lsl.w	sl, r9, r8
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001abc:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001abe:	ea4a 0a0b 	orr.w	sl, sl, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac2:	2e01      	cmp	r6, #1
      GPIOx->MODER = temp;
 8001ac4:	f8c0 a000 	str.w	sl, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac8:	f240 80a6 	bls.w	8001c18 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001acc:	f1b9 0f03 	cmp.w	r9, #3
 8001ad0:	f000 80ba 	beq.w	8001c48 <HAL_GPIO_Init+0x1c0>
      temp = GPIOx->PUPDR;
 8001ad4:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ad6:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001ada:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001adc:	fa02 f208 	lsl.w	r2, r2, r8
 8001ae0:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae2:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8001ae4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae6:	d55f      	bpl.n	8001ba8 <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae8:	4b6c      	ldr	r3, [pc, #432]	; (8001c9c <HAL_GPIO_Init+0x214>)
 8001aea:	4a6c      	ldr	r2, [pc, #432]	; (8001c9c <HAL_GPIO_Init+0x214>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6613      	str	r3, [r2, #96]	; 0x60
 8001af4:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001af6:	f025 0203 	bic.w	r2, r5, #3
 8001afa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b06:	9301      	str	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b08:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001b0e:	f8d2 9008 	ldr.w	r9, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b12:	4698      	mov	r8, r3
 8001b14:	260f      	movs	r6, #15
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	409e      	lsls	r6, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001b1a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b1e:	ea29 0906 	bic.w	r9, r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001b22:	f000 80a0 	beq.w	8001c66 <HAL_GPIO_Init+0x1de>
 8001b26:	4e5e      	ldr	r6, [pc, #376]	; (8001ca0 <HAL_GPIO_Init+0x218>)
 8001b28:	42b0      	cmp	r0, r6
 8001b2a:	f000 809e 	beq.w	8001c6a <HAL_GPIO_Init+0x1e2>
 8001b2e:	4e5d      	ldr	r6, [pc, #372]	; (8001ca4 <HAL_GPIO_Init+0x21c>)
 8001b30:	42b0      	cmp	r0, r6
 8001b32:	f000 809e 	beq.w	8001c72 <HAL_GPIO_Init+0x1ea>
 8001b36:	4e5c      	ldr	r6, [pc, #368]	; (8001ca8 <HAL_GPIO_Init+0x220>)
 8001b38:	42b0      	cmp	r0, r6
 8001b3a:	f000 809f 	beq.w	8001c7c <HAL_GPIO_Init+0x1f4>
 8001b3e:	4e5b      	ldr	r6, [pc, #364]	; (8001cac <HAL_GPIO_Init+0x224>)
 8001b40:	42b0      	cmp	r0, r6
 8001b42:	f000 80a0 	beq.w	8001c86 <HAL_GPIO_Init+0x1fe>
 8001b46:	4e5a      	ldr	r6, [pc, #360]	; (8001cb0 <HAL_GPIO_Init+0x228>)
 8001b48:	42b0      	cmp	r0, r6
 8001b4a:	f000 80a1 	beq.w	8001c90 <HAL_GPIO_Init+0x208>
 8001b4e:	4e59      	ldr	r6, [pc, #356]	; (8001cb4 <HAL_GPIO_Init+0x22c>)
 8001b50:	42b0      	cmp	r0, r6
 8001b52:	bf0c      	ite	eq
 8001b54:	f04f 0806 	moveq.w	r8, #6
 8001b58:	f04f 0807 	movne.w	r8, #7
 8001b5c:	fa08 f303 	lsl.w	r3, r8, r3
 8001b60:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b64:	6093      	str	r3, [r2, #8]
        temp = EXTI->IMR1;
 8001b66:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b6c:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	bf54      	ite	pl
 8001b70:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001b72:	433b      	orrmi	r3, r7
        }
        EXTI->IMR1 = temp;
 8001b74:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR1;
 8001b78:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b7c:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	bf54      	ite	pl
 8001b80:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001b82:	433b      	orrmi	r3, r7
        }
        EXTI->EMR1 = temp;
 8001b84:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b88:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8c:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	bf54      	ite	pl
 8001b90:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001b92:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR1 = temp;
 8001b94:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR1;
 8001b98:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	bf54      	ite	pl
 8001ba0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001ba2:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR1 = temp;
 8001ba4:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8001ba8:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001baa:	fa31 f305 	lsrs.w	r3, r1, r5
 8001bae:	d057      	beq.n	8001c60 <HAL_GPIO_Init+0x1d8>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	fa03 f205 	lsl.w	r2, r3, r5
    if(iocurrent)
 8001bb6:	ea12 0701 	ands.w	r7, r2, r1
 8001bba:	d0f5      	beq.n	8001ba8 <HAL_GPIO_Init+0x120>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bbc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8001bc0:	f024 0610 	bic.w	r6, r4, #16
 8001bc4:	2e02      	cmp	r6, #2
 8001bc6:	f47f af6b 	bne.w	8001aa0 <HAL_GPIO_Init+0x18>
        temp = GPIOx->AFR[position >> 3];
 8001bca:	ea4f 08d5 	mov.w	r8, r5, lsr #3
 8001bce:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bd2:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8001bd6:	f8d8 6020 	ldr.w	r6, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	f04f 0a0f 	mov.w	sl, #15
 8001be0:	fa0a fa03 	lsl.w	sl, sl, r3
 8001be4:	ea26 090a 	bic.w	r9, r6, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001be8:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8001bec:	fa06 f303 	lsl.w	r3, r6, r3
 8001bf0:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->AFR[position >> 3] = temp;
 8001bf4:	f8c8 3020 	str.w	r3, [r8, #32]
 8001bf8:	ea4f 0845 	mov.w	r8, r5, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001bfc:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8001bfe:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001c00:	fa03 f308 	lsl.w	r3, r3, r8
 8001c04:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c06:	f004 0903 	and.w	r9, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001c0a:	ea03 0a06 	and.w	sl, r3, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c0e:	fa09 f608 	lsl.w	r6, r9, r8
 8001c12:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8001c16:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8001c18:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001c1a:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c1e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8001c22:	fa06 f608 	lsl.w	r6, r6, r8
 8001c26:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001c2a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c2c:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001c30:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c34:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001c38:	40ae      	lsls	r6, r5
 8001c3a:	ea46 060a 	orr.w	r6, r6, sl
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c3e:	f1b9 0f03 	cmp.w	r9, #3
        GPIOx->OTYPER = temp;
 8001c42:	6046      	str	r6, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c44:	f47f af46 	bne.w	8001ad4 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->ASCR;
 8001c48:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c4c:	f3c4 06c0 	ubfx	r6, r4, #3, #1
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c50:	ea29 0902 	bic.w	r9, r9, r2
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c54:	4632      	mov	r2, r6
 8001c56:	40aa      	lsls	r2, r5
 8001c58:	ea42 0209 	orr.w	r2, r2, r9
        GPIOx->ASCR = temp;
 8001c5c:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001c5e:	e739      	b.n	8001ad4 <HAL_GPIO_Init+0x4c>
  }
}
 8001c60:	b003      	add	sp, #12
 8001c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c66:	2300      	movs	r3, #0
 8001c68:	e77a      	b.n	8001b60 <HAL_GPIO_Init+0xd8>
 8001c6a:	2601      	movs	r6, #1
 8001c6c:	fa06 f303 	lsl.w	r3, r6, r3
 8001c70:	e776      	b.n	8001b60 <HAL_GPIO_Init+0xd8>
 8001c72:	f04f 0802 	mov.w	r8, #2
 8001c76:	fa08 f303 	lsl.w	r3, r8, r3
 8001c7a:	e771      	b.n	8001b60 <HAL_GPIO_Init+0xd8>
 8001c7c:	f04f 0803 	mov.w	r8, #3
 8001c80:	fa08 f303 	lsl.w	r3, r8, r3
 8001c84:	e76c      	b.n	8001b60 <HAL_GPIO_Init+0xd8>
 8001c86:	f04f 0804 	mov.w	r8, #4
 8001c8a:	fa08 f303 	lsl.w	r3, r8, r3
 8001c8e:	e767      	b.n	8001b60 <HAL_GPIO_Init+0xd8>
 8001c90:	f04f 0805 	mov.w	r8, #5
 8001c94:	fa08 f303 	lsl.w	r3, r8, r3
 8001c98:	e762      	b.n	8001b60 <HAL_GPIO_Init+0xd8>
 8001c9a:	4770      	bx	lr
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	48000400 	.word	0x48000400
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	48000c00 	.word	0x48000c00
 8001cac:	48001000 	.word	0x48001000
 8001cb0:	48001400 	.word	0x48001400
 8001cb4:	48001800 	.word	0x48001800
 8001cb8:	40010400 	.word	0x40010400

08001cbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cbc:	b90a      	cbnz	r2, 8001cc2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cbe:	6281      	str	r1, [r0, #40]	; 0x28
 8001cc0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cc2:	6181      	str	r1, [r0, #24]
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop

08001cc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop

08001ccc <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001cce:	6951      	ldr	r1, [r2, #20]
 8001cd0:	4201      	tst	r1, r0
 8001cd2:	d100      	bne.n	8001cd6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001cd4:	4770      	bx	lr
{
 8001cd6:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cda:	f7ff fff5 	bl	8001cc8 <HAL_GPIO_EXTI_Callback>
 8001cde:	bd08      	pop	{r3, pc}
 8001ce0:	40010400 	.word	0x40010400

08001ce4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <HAL_PWREx_GetVoltageRange+0xc>)
 8001ce6:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001ce8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001cf8:	d00e      	beq.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cfa:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8001cfc:	6813      	ldr	r3, [r2, #0]
 8001cfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d06:	d005      	beq.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001d14:	2000      	movs	r0, #0
 8001d16:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d18:	4911      	ldr	r1, [pc, #68]	; (8001d60 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8001d1a:	680b      	ldr	r3, [r1, #0]
 8001d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d24:	d0f6      	beq.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d26:	6808      	ldr	r0, [r1, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_PWREx_ControlVoltageScaling+0x74>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d2c:	f420 60c0 	bic.w	r0, r0, #1536	; 0x600
 8001d30:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8001d34:	6008      	str	r0, [r1, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3c:	0c9a      	lsrs	r2, r3, #18
 8001d3e:	2332      	movs	r3, #50	; 0x32
 8001d40:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001d44:	b913      	cbnz	r3, 8001d4c <HAL_PWREx_ControlVoltageScaling+0x58>
 8001d46:	e004      	b.n	8001d52 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	d002      	beq.n	8001d52 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8001d4c:	694a      	ldr	r2, [r1, #20]
 8001d4e:	0552      	lsls	r2, r2, #21
 8001d50:	d4fa      	bmi.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d52:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	055b      	lsls	r3, r3, #21
 8001d58:	d5dc      	bpl.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8001d5a:	2003      	movs	r0, #3
}  
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40007000 	.word	0x40007000
 8001d64:	20000ce0 	.word	0x20000ce0
 8001d68:	431bde83 	.word	0x431bde83

08001d6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d6c:	b530      	push	{r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d6e:	4d20      	ldr	r5, [pc, #128]	; (8001df0 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8001d70:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001d72:	00db      	lsls	r3, r3, #3
{
 8001d74:	b083      	sub	sp, #12
 8001d76:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d78:	d51a      	bpl.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d7a:	f7ff ffb3 	bl	8001ce4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001d82:	d027      	beq.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d84:	2c80      	cmp	r4, #128	; 0x80
 8001d86:	d82c      	bhi.n	8001de2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d88:	d02f      	beq.n	8001dea <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d8a:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 8001d8e:	fab4 f484 	clz	r4, r4
 8001d92:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d94:	4917      	ldr	r1, [pc, #92]	; (8001df4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001d96:	680b      	ldr	r3, [r1, #0]
 8001d98:	f023 0307 	bic.w	r3, r3, #7
 8001d9c:	4323      	orrs	r3, r4
 8001d9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8001da0:	6808      	ldr	r0, [r1, #0]
 8001da2:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001da6:	1b00      	subs	r0, r0, r4
 8001da8:	bf18      	it	ne
 8001daa:	2001      	movne	r0, #1
 8001dac:	b003      	add	sp, #12
 8001dae:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db6:	65ab      	str	r3, [r5, #88]	; 0x58
 8001db8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001dc2:	f7ff ff8f 	bl	8001ce4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd2:	d1d7      	bne.n	8001d84 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8001dd4:	2c80      	cmp	r4, #128	; 0x80
 8001dd6:	d906      	bls.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      if(msirange > RCC_MSIRANGE_10)
 8001dd8:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dda:	bf8c      	ite	hi
 8001ddc:	2402      	movhi	r4, #2
 8001dde:	2401      	movls	r4, #1
 8001de0:	e7d8      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001de2:	2403      	movs	r4, #3
 8001de4:	e7d6      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001de6:	2400      	movs	r4, #0
 8001de8:	e7d4      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dea:	2402      	movs	r4, #2
 8001dec:	e7d2      	b.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x28>
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40022000 	.word	0x40022000

08001df8 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001df8:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xec>)
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	f012 0f0c 	tst.w	r2, #12
 8001e00:	d03b      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x82>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001e08:	2a0c      	cmp	r2, #12
 8001e0a:	d031      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x78>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e0c:	4a35      	ldr	r2, [pc, #212]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xec>)
 8001e0e:	6893      	ldr	r3, [r2, #8]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d056      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xce>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e18:	6893      	ldr	r3, [r2, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d05d      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0xe6>
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e22:	4a30      	ldr	r2, [pc, #192]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xec>)
 8001e24:	6893      	ldr	r3, [r2, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
  uint32_t sysclockfreq = 0U;
 8001e2a:	2000      	movs	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e2c:	2b0c      	cmp	r3, #12
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001e2e:	4601      	mov	r1, r0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e30:	d13f      	bne.n	8001eb2 <HAL_RCC_GetSysClockFreq+0xba>
{
 8001e32:	b410      	push	{r4}
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e34:	68d4      	ldr	r4, [r2, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e36:	68d0      	ldr	r0, [r2, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e38:	f004 0403 	and.w	r4, r4, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e3c:	f3c0 1002 	ubfx	r0, r0, #4, #3
    switch (pllsource)
 8001e40:	2c02      	cmp	r4, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e42:	f100 0301 	add.w	r3, r0, #1
    switch (pllsource)
 8001e46:	d041      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0xd4>
 8001e48:	2c03      	cmp	r4, #3
 8001e4a:	d033      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xbc>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e50:	68d0      	ldr	r0, [r2, #12]
 8001e52:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001e56:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xec>)
}
 8001e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001e66:	3301      	adds	r3, #1
 8001e68:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001e6a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001e6e:	4770      	bx	lr
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d1c8      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xec>)
    msirange = MSIRangeTable[msirange];
 8001e7c:	491a      	ldr	r1, [pc, #104]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xf0>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e82:	bf54      	ite	pl
 8001e84:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e88:	681b      	ldrmi	r3, [r3, #0]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xec>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e8c:	bf54      	ite	pl
 8001e8e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e92:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001e96:	6892      	ldr	r2, [r2, #8]
    msirange = MSIRangeTable[msirange];
 8001e98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
      sysclockfreq = msirange;
 8001e9c:	f012 0f0c 	tst.w	r2, #12
 8001ea0:	bf0c      	ite	eq
 8001ea2:	4608      	moveq	r0, r1
 8001ea4:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xec>)
 8001ea8:	6893      	ldr	r3, [r2, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d0bf      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x3a>
}
 8001eb2:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eb4:	68d2      	ldr	r2, [r2, #12]
 8001eb6:	480d      	ldr	r0, [pc, #52]	; (8001eec <HAL_RCC_GetSysClockFreq+0xf4>)
 8001eb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ebc:	f3c2 2306 	ubfx	r3, r2, #8, #7
 8001ec0:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8001ec4:	e7c9      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x62>
    sysclockfreq = HSI_VALUE;
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001ec8:	2100      	movs	r1, #0
 8001eca:	e7ec      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0xae>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ecc:	68d2      	ldr	r2, [r2, #12]
 8001ece:	4808      	ldr	r0, [pc, #32]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ed0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ed4:	f3c2 2306 	ubfx	r3, r2, #8, #7
 8001ed8:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8001edc:	e7bd      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x62>
    sysclockfreq = HSE_VALUE;
 8001ede:	4803      	ldr	r0, [pc, #12]	; (8001eec <HAL_RCC_GetSysClockFreq+0xf4>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	e7e0      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0xae>
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08004304 	.word	0x08004304
 8001eec:	007a1200 	.word	0x007a1200
 8001ef0:	00f42400 	.word	0x00f42400

08001ef4 <HAL_RCC_OscConfig>:
{
 8001ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ef8:	6803      	ldr	r3, [r0, #0]
{
 8001efa:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001efc:	06d8      	lsls	r0, r3, #27
{
 8001efe:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f00:	d557      	bpl.n	8001fb2 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001f02:	4ca6      	ldr	r4, [pc, #664]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 8001f04:	68a2      	ldr	r2, [r4, #8]
 8001f06:	f012 0f0c 	tst.w	r2, #12
 8001f0a:	f040 813d 	bne.w	8002188 <HAL_RCC_OscConfig+0x294>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	0799      	lsls	r1, r3, #30
 8001f12:	d503      	bpl.n	8001f1c <HAL_RCC_OscConfig+0x28>
 8001f14:	69ab      	ldr	r3, [r5, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 81ab 	beq.w	8002272 <HAL_RCC_OscConfig+0x37e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f1c:	4b9f      	ldr	r3, [pc, #636]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 8001f1e:	6a28      	ldr	r0, [r5, #32]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	0712      	lsls	r2, r2, #28
 8001f24:	bf56      	itet	pl
 8001f26:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8001f2a:	681b      	ldrmi	r3, [r3, #0]
 8001f2c:	091b      	lsrpl	r3, r3, #4
 8001f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f32:	4283      	cmp	r3, r0
 8001f34:	d217      	bcs.n	8001f66 <HAL_RCC_OscConfig+0x72>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f36:	f7ff ff19 	bl	8001d6c <RCC_SetFlashLatencyFromMSIRange>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	f040 8199 	bne.w	8002272 <HAL_RCC_OscConfig+0x37e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f40:	4b96      	ldr	r3, [pc, #600]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	f042 0208 	orr.w	r2, r2, #8
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	6a29      	ldr	r1, [r5, #32]
 8001f4e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	69e9      	ldr	r1, [r5, #28]
 8001f5a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	e015      	b.n	8001f92 <HAL_RCC_OscConfig+0x9e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f66:	4b8d      	ldr	r3, [pc, #564]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	f042 0208 	orr.w	r2, r2, #8
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f76:	4302      	orrs	r2, r0
 8001f78:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	69e9      	ldr	r1, [r5, #28]
 8001f7e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f86:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f88:	f7ff fef0 	bl	8001d6c <RCC_SetFlashLatencyFromMSIRange>
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	f040 8170 	bne.w	8002272 <HAL_RCC_OscConfig+0x37e>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f92:	f7ff ff31 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 8001f96:	4b81      	ldr	r3, [pc, #516]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 8001f98:	4981      	ldr	r1, [pc, #516]	; (80021a0 <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a81      	ldr	r2, [pc, #516]	; (80021a4 <HAL_RCC_OscConfig+0x2b0>)
 8001f9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	fa20 f303 	lsr.w	r3, r0, r3
        HAL_InitTick (TICK_INT_PRIORITY);
 8001fa8:	2000      	movs	r0, #0
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001faa:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001fac:	f7fe fd26 	bl	80009fc <HAL_InitTick>
 8001fb0:	682b      	ldr	r3, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	07d9      	lsls	r1, r3, #31
 8001fb4:	d52f      	bpl.n	8002016 <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001fb6:	4979      	ldr	r1, [pc, #484]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 8001fb8:	688a      	ldr	r2, [r1, #8]
 8001fba:	f002 020c 	and.w	r2, r2, #12
 8001fbe:	2a08      	cmp	r2, #8
 8001fc0:	f000 814e 	beq.w	8002260 <HAL_RCC_OscConfig+0x36c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc4:	688a      	ldr	r2, [r1, #8]
 8001fc6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001fca:	2a0c      	cmp	r2, #12
 8001fcc:	f000 8142 	beq.w	8002254 <HAL_RCC_OscConfig+0x360>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd0:	686b      	ldr	r3, [r5, #4]
 8001fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd6:	f000 8150 	beq.w	800227a <HAL_RCC_OscConfig+0x386>
 8001fda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fde:	f000 81ad 	beq.w	800233c <HAL_RCC_OscConfig+0x448>
 8001fe2:	4c6e      	ldr	r4, [pc, #440]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 8001fe4:	6822      	ldr	r2, [r4, #0]
 8001fe6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fea:	6022      	str	r2, [r4, #0]
 8001fec:	6822      	ldr	r2, [r4, #0]
 8001fee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ff2:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f040 8145 	bne.w	8002284 <HAL_RCC_OscConfig+0x390>
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fd29 	bl	8000a50 <HAL_GetTick>
 8001ffe:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002000:	e005      	b.n	800200e <HAL_RCC_OscConfig+0x11a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002002:	f7fe fd25 	bl	8000a50 <HAL_GetTick>
 8002006:	1b80      	subs	r0, r0, r6
 8002008:	2864      	cmp	r0, #100	; 0x64
 800200a:	f200 816f 	bhi.w	80022ec <HAL_RCC_OscConfig+0x3f8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	039f      	lsls	r7, r3, #14
 8002012:	d4f6      	bmi.n	8002002 <HAL_RCC_OscConfig+0x10e>
 8002014:	682b      	ldr	r3, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	079e      	lsls	r6, r3, #30
 8002018:	d52a      	bpl.n	8002070 <HAL_RCC_OscConfig+0x17c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800201a:	4960      	ldr	r1, [pc, #384]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 800201c:	688a      	ldr	r2, [r1, #8]
 800201e:	f002 020c 	and.w	r2, r2, #12
 8002022:	2a04      	cmp	r2, #4
 8002024:	f000 8142 	beq.w	80022ac <HAL_RCC_OscConfig+0x3b8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002028:	688a      	ldr	r2, [r1, #8]
 800202a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800202e:	2a0c      	cmp	r2, #12
 8002030:	f000 8136 	beq.w	80022a0 <HAL_RCC_OscConfig+0x3ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002034:	68eb      	ldr	r3, [r5, #12]
        __HAL_RCC_HSI_ENABLE();
 8002036:	4c59      	ldr	r4, [pc, #356]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80f9 	beq.w	8002230 <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_HSI_ENABLE();
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002046:	f7fe fd03 	bl	8000a50 <HAL_GetTick>
 800204a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800204c:	e005      	b.n	800205a <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204e:	f7fe fcff 	bl	8000a50 <HAL_GetTick>
 8002052:	1b80      	subs	r0, r0, r6
 8002054:	2802      	cmp	r0, #2
 8002056:	f200 8149 	bhi.w	80022ec <HAL_RCC_OscConfig+0x3f8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	0558      	lsls	r0, r3, #21
 800205e:	d5f6      	bpl.n	800204e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	6863      	ldr	r3, [r4, #4]
 8002062:	692a      	ldr	r2, [r5, #16]
 8002064:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002068:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800206c:	6063      	str	r3, [r4, #4]
 800206e:	682b      	ldr	r3, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002070:	071a      	lsls	r2, r3, #28
 8002072:	d519      	bpl.n	80020a8 <HAL_RCC_OscConfig+0x1b4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002074:	696b      	ldr	r3, [r5, #20]
      __HAL_RCC_LSI_ENABLE();
 8002076:	4c49      	ldr	r4, [pc, #292]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80c5 	beq.w	8002208 <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_LSI_ENABLE();
 800207e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800208a:	f7fe fce1 	bl	8000a50 <HAL_GetTick>
 800208e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8002090:	e005      	b.n	800209e <HAL_RCC_OscConfig+0x1aa>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002092:	f7fe fcdd 	bl	8000a50 <HAL_GetTick>
 8002096:	1b80      	subs	r0, r0, r6
 8002098:	2802      	cmp	r0, #2
 800209a:	f200 8127 	bhi.w	80022ec <HAL_RCC_OscConfig+0x3f8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800209e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80020a2:	079b      	lsls	r3, r3, #30
 80020a4:	d5f5      	bpl.n	8002092 <HAL_RCC_OscConfig+0x19e>
 80020a6:	682b      	ldr	r3, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a8:	075e      	lsls	r6, r3, #29
 80020aa:	d53e      	bpl.n	800212a <HAL_RCC_OscConfig+0x236>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020ac:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 80020ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020b0:	00d4      	lsls	r4, r2, #3
 80020b2:	f100 811f 	bmi.w	80022f4 <HAL_RCC_OscConfig+0x400>
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020bc:	659a      	str	r2, [r3, #88]	; 0x58
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020c8:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ca:	4c37      	ldr	r4, [pc, #220]	; (80021a8 <HAL_RCC_OscConfig+0x2b4>)
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	05d8      	lsls	r0, r3, #23
 80020d0:	f140 80fc 	bpl.w	80022cc <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d4:	68ab      	ldr	r3, [r5, #8]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	f000 8148 	beq.w	800236c <HAL_RCC_OscConfig+0x478>
 80020dc:	2b05      	cmp	r3, #5
 80020de:	f000 810b 	beq.w	80022f8 <HAL_RCC_OscConfig+0x404>
 80020e2:	4c2e      	ldr	r4, [pc, #184]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 80020e4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80020f0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80020f4:	f022 0204 	bic.w	r2, r2, #4
 80020f8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f040 8108 	bne.w	8002312 <HAL_RCC_OscConfig+0x41e>
      tickstart = HAL_GetTick();
 8002102:	f7fe fca5 	bl	8000a50 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800210a:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800210c:	e006      	b.n	800211c <HAL_RCC_OscConfig+0x228>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7fe fc9f 	bl	8000a50 <HAL_GetTick>
 8002112:	eba0 0008 	sub.w	r0, r0, r8
 8002116:	42b8      	cmp	r0, r7
 8002118:	f200 80e8 	bhi.w	80022ec <HAL_RCC_OscConfig+0x3f8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800211c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002120:	079b      	lsls	r3, r3, #30
 8002122:	d4f4      	bmi.n	800210e <HAL_RCC_OscConfig+0x21a>
    if(pwrclkchanged == SET)
 8002124:	2e00      	cmp	r6, #0
 8002126:	f040 811b 	bne.w	8002360 <HAL_RCC_OscConfig+0x46c>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800212c:	b342      	cbz	r2, 8002180 <HAL_RCC_OscConfig+0x28c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800212e:	4c1b      	ldr	r4, [pc, #108]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 8002130:	68a1      	ldr	r1, [r4, #8]
 8002132:	f001 010c 	and.w	r1, r1, #12
 8002136:	290c      	cmp	r1, #12
 8002138:	f000 809b 	beq.w	8002272 <HAL_RCC_OscConfig+0x37e>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800213c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800213e:	6822      	ldr	r2, [r4, #0]
 8002140:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002144:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002146:	f000 8119 	beq.w	800237c <HAL_RCC_OscConfig+0x488>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800214a:	6822      	ldr	r2, [r4, #0]
 800214c:	0111      	lsls	r1, r2, #4
 800214e:	d403      	bmi.n	8002158 <HAL_RCC_OscConfig+0x264>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8002150:	6822      	ldr	r2, [r4, #0]
           &&
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	f140 80ff 	bpl.w	8002356 <HAL_RCC_OscConfig+0x462>
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002158:	4c10      	ldr	r4, [pc, #64]	; (800219c <HAL_RCC_OscConfig+0x2a8>)
 800215a:	68e3      	ldr	r3, [r4, #12]
 800215c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002164:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002166:	f7fe fc73 	bl	8000a50 <HAL_GetTick>
 800216a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800216c:	e005      	b.n	800217a <HAL_RCC_OscConfig+0x286>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7fe fc6f 	bl	8000a50 <HAL_GetTick>
 8002172:	1b40      	subs	r0, r0, r5
 8002174:	2802      	cmp	r0, #2
 8002176:	f200 80b9 	bhi.w	80022ec <HAL_RCC_OscConfig+0x3f8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	d4f6      	bmi.n	800216e <HAL_RCC_OscConfig+0x27a>
  return HAL_OK;
 8002180:	2000      	movs	r0, #0
}
 8002182:	b002      	add	sp, #8
 8002184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002188:	69aa      	ldr	r2, [r5, #24]
 800218a:	b35a      	cbz	r2, 80021e4 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_MSI_ENABLE();
 800218c:	6822      	ldr	r2, [r4, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8002194:	f7fe fc5c 	bl	8000a50 <HAL_GetTick>
 8002198:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800219a:	e00d      	b.n	80021b8 <HAL_RCC_OscConfig+0x2c4>
 800219c:	40021000 	.word	0x40021000
 80021a0:	080042f4 	.word	0x080042f4
 80021a4:	20000ce0 	.word	0x20000ce0
 80021a8:	40007000 	.word	0x40007000
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ac:	f7fe fc50 	bl	8000a50 <HAL_GetTick>
 80021b0:	1b80      	subs	r0, r0, r6
 80021b2:	2802      	cmp	r0, #2
 80021b4:	f200 809a 	bhi.w	80022ec <HAL_RCC_OscConfig+0x3f8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	079f      	lsls	r7, r3, #30
 80021bc:	d5f6      	bpl.n	80021ac <HAL_RCC_OscConfig+0x2b8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6023      	str	r3, [r4, #0]
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	6a2a      	ldr	r2, [r5, #32]
 80021ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021ce:	4313      	orrs	r3, r2
 80021d0:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d2:	6863      	ldr	r3, [r4, #4]
 80021d4:	69ea      	ldr	r2, [r5, #28]
 80021d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80021de:	6063      	str	r3, [r4, #4]
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	e6e6      	b.n	8001fb2 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_MSI_DISABLE();
 80021e4:	6822      	ldr	r2, [r4, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80021ec:	f7fe fc30 	bl	8000a50 <HAL_GetTick>
 80021f0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80021f2:	e004      	b.n	80021fe <HAL_RCC_OscConfig+0x30a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f4:	f7fe fc2c 	bl	8000a50 <HAL_GetTick>
 80021f8:	1b80      	subs	r0, r0, r6
 80021fa:	2802      	cmp	r0, #2
 80021fc:	d876      	bhi.n	80022ec <HAL_RCC_OscConfig+0x3f8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	0798      	lsls	r0, r3, #30
 8002202:	d4f7      	bmi.n	80021f4 <HAL_RCC_OscConfig+0x300>
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	e6d4      	b.n	8001fb2 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_LSI_DISABLE();
 8002208:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002214:	f7fe fc1c 	bl	8000a50 <HAL_GetTick>
 8002218:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800221a:	e004      	b.n	8002226 <HAL_RCC_OscConfig+0x332>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7fe fc18 	bl	8000a50 <HAL_GetTick>
 8002220:	1b80      	subs	r0, r0, r6
 8002222:	2802      	cmp	r0, #2
 8002224:	d862      	bhi.n	80022ec <HAL_RCC_OscConfig+0x3f8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8002226:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800222a:	079f      	lsls	r7, r3, #30
 800222c:	d4f6      	bmi.n	800221c <HAL_RCC_OscConfig+0x328>
 800222e:	e73a      	b.n	80020a6 <HAL_RCC_OscConfig+0x1b2>
        __HAL_RCC_HSI_DISABLE();
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002236:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002238:	f7fe fc0a 	bl	8000a50 <HAL_GetTick>
 800223c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800223e:	e004      	b.n	800224a <HAL_RCC_OscConfig+0x356>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002240:	f7fe fc06 	bl	8000a50 <HAL_GetTick>
 8002244:	1b80      	subs	r0, r0, r6
 8002246:	2802      	cmp	r0, #2
 8002248:	d850      	bhi.n	80022ec <HAL_RCC_OscConfig+0x3f8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	0559      	lsls	r1, r3, #21
 800224e:	d4f7      	bmi.n	8002240 <HAL_RCC_OscConfig+0x34c>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	e70d      	b.n	8002070 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002254:	68ca      	ldr	r2, [r1, #12]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	2a03      	cmp	r2, #3
 800225c:	f47f aeb8 	bne.w	8001fd0 <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4a63      	ldr	r2, [pc, #396]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	0392      	lsls	r2, r2, #14
 8002266:	f57f aed6 	bpl.w	8002016 <HAL_RCC_OscConfig+0x122>
 800226a:	686a      	ldr	r2, [r5, #4]
 800226c:	2a00      	cmp	r2, #0
 800226e:	f47f aed2 	bne.w	8002016 <HAL_RCC_OscConfig+0x122>
        return HAL_ERROR;
 8002272:	2001      	movs	r0, #1
}
 8002274:	b002      	add	sp, #8
 8002276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227a:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 800227c:	6813      	ldr	r3, [r2, #0]
 800227e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002284:	f7fe fbe4 	bl	8000a50 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002288:	4c59      	ldr	r4, [pc, #356]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
        tickstart = HAL_GetTick();
 800228a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800228c:	e004      	b.n	8002298 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228e:	f7fe fbdf 	bl	8000a50 <HAL_GetTick>
 8002292:	1b80      	subs	r0, r0, r6
 8002294:	2864      	cmp	r0, #100	; 0x64
 8002296:	d829      	bhi.n	80022ec <HAL_RCC_OscConfig+0x3f8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	039b      	lsls	r3, r3, #14
 800229c:	d5f7      	bpl.n	800228e <HAL_RCC_OscConfig+0x39a>
 800229e:	e6b9      	b.n	8002014 <HAL_RCC_OscConfig+0x120>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022a0:	68ca      	ldr	r2, [r1, #12]
 80022a2:	f002 0203 	and.w	r2, r2, #3
 80022a6:	2a02      	cmp	r2, #2
 80022a8:	f47f aec4 	bne.w	8002034 <HAL_RCC_OscConfig+0x140>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ac:	4a50      	ldr	r2, [pc, #320]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	0554      	lsls	r4, r2, #21
 80022b2:	d502      	bpl.n	80022ba <HAL_RCC_OscConfig+0x3c6>
 80022b4:	68ea      	ldr	r2, [r5, #12]
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	d0db      	beq.n	8002272 <HAL_RCC_OscConfig+0x37e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	494d      	ldr	r1, [pc, #308]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 80022bc:	6928      	ldr	r0, [r5, #16]
 80022be:	684a      	ldr	r2, [r1, #4]
 80022c0:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 80022c4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80022c8:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ca:	e6d1      	b.n	8002070 <HAL_RCC_OscConfig+0x17c>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d2:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80022d4:	f7fe fbbc 	bl	8000a50 <HAL_GetTick>
 80022d8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	05d9      	lsls	r1, r3, #23
 80022de:	f53f aef9 	bmi.w	80020d4 <HAL_RCC_OscConfig+0x1e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e2:	f7fe fbb5 	bl	8000a50 <HAL_GetTick>
 80022e6:	1bc0      	subs	r0, r0, r7
 80022e8:	2802      	cmp	r0, #2
 80022ea:	d9f6      	bls.n	80022da <HAL_RCC_OscConfig+0x3e6>
            return HAL_TIMEOUT;
 80022ec:	2003      	movs	r0, #3
}
 80022ee:	b002      	add	sp, #8
 80022f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80022f4:	2600      	movs	r6, #0
 80022f6:	e6e8      	b.n	80020ca <HAL_RCC_OscConfig+0x1d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f8:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 80022fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022fe:	f042 0204 	orr.w	r2, r2, #4
 8002302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002306:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002312:	f7fe fb9d 	bl	8000a50 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002316:	4c36      	ldr	r4, [pc, #216]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
      tickstart = HAL_GetTick();
 8002318:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800231e:	e005      	b.n	800232c <HAL_RCC_OscConfig+0x438>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7fe fb96 	bl	8000a50 <HAL_GetTick>
 8002324:	eba0 0008 	sub.w	r0, r0, r8
 8002328:	42b8      	cmp	r0, r7
 800232a:	d8df      	bhi.n	80022ec <HAL_RCC_OscConfig+0x3f8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800232c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002330:	079a      	lsls	r2, r3, #30
 8002332:	d5f5      	bpl.n	8002320 <HAL_RCC_OscConfig+0x42c>
    if(pwrclkchanged == SET)
 8002334:	2e00      	cmp	r6, #0
 8002336:	f43f aef8 	beq.w	800212a <HAL_RCC_OscConfig+0x236>
 800233a:	e011      	b.n	8002360 <HAL_RCC_OscConfig+0x46c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002340:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e796      	b.n	8002284 <HAL_RCC_OscConfig+0x390>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002356:	68e2      	ldr	r2, [r4, #12]
 8002358:	f022 0203 	bic.w	r2, r2, #3
 800235c:	60e2      	str	r2, [r4, #12]
 800235e:	e6fb      	b.n	8002158 <HAL_RCC_OscConfig+0x264>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002360:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 8002362:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002368:	6593      	str	r3, [r2, #88]	; 0x58
 800236a:	e6de      	b.n	800212a <HAL_RCC_OscConfig+0x236>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
 800236e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800237a:	e7ca      	b.n	8002312 <HAL_RCC_OscConfig+0x41e>
        tickstart = HAL_GetTick();
 800237c:	f7fe fb68 	bl	8000a50 <HAL_GetTick>
 8002380:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002382:	e004      	b.n	800238e <HAL_RCC_OscConfig+0x49a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fb64 	bl	8000a50 <HAL_GetTick>
 8002388:	1b80      	subs	r0, r0, r6
 800238a:	2802      	cmp	r0, #2
 800238c:	d8ae      	bhi.n	80022ec <HAL_RCC_OscConfig+0x3f8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	019f      	lsls	r7, r3, #6
 8002392:	d4f7      	bmi.n	8002384 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002394:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 8002398:	cbc8      	ldmia	r3, {r3, r6, r7}
 800239a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800239e:	c807      	ldmia	r0, {r0, r1, r2}
 80023a0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80023a4:	3e01      	subs	r6, #1
 80023a6:	0900      	lsrs	r0, r0, #4
 80023a8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80023ac:	0849      	lsrs	r1, r1, #1
 80023ae:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80023b2:	3901      	subs	r1, #1
 80023b4:	0852      	lsrs	r2, r2, #1
 80023b6:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80023ba:	3a01      	subs	r2, #1
 80023bc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80023c0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80023c2:	6823      	ldr	r3, [r4, #0]
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80023c4:	4d0a      	ldr	r5, [pc, #40]	; (80023f0 <HAL_RCC_OscConfig+0x4fc>)
        __HAL_RCC_PLL_ENABLE();
 80023c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ca:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023cc:	68e3      	ldr	r3, [r4, #12]
 80023ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80023d4:	f7fe fb3c 	bl	8000a50 <HAL_GetTick>
 80023d8:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80023da:	e004      	b.n	80023e6 <HAL_RCC_OscConfig+0x4f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe fb38 	bl	8000a50 <HAL_GetTick>
 80023e0:	1b00      	subs	r0, r0, r4
 80023e2:	2802      	cmp	r0, #2
 80023e4:	d882      	bhi.n	80022ec <HAL_RCC_OscConfig+0x3f8>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	0198      	lsls	r0, r3, #6
 80023ea:	d5f7      	bpl.n	80023dc <HAL_RCC_OscConfig+0x4e8>
 80023ec:	e6c8      	b.n	8002180 <HAL_RCC_OscConfig+0x28c>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000

080023f4 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80023f4:	4a57      	ldr	r2, [pc, #348]	; (8002554 <HAL_RCC_ClockConfig+0x160>)
 80023f6:	6813      	ldr	r3, [r2, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	428b      	cmp	r3, r1
 80023fe:	d20b      	bcs.n	8002418 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002400:	6813      	ldr	r3, [r2, #0]
 8002402:	f023 0307 	bic.w	r3, r3, #7
 8002406:	430b      	orrs	r3, r1
 8002408:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800240a:	6813      	ldr	r3, [r2, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4299      	cmp	r1, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8002414:	2001      	movs	r0, #1
}
 8002416:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002418:	6803      	ldr	r3, [r0, #0]
{
 800241a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800241e:	460c      	mov	r4, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002420:	07d9      	lsls	r1, r3, #31
 8002422:	4605      	mov	r5, r0
 8002424:	d41b      	bmi.n	800245e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002426:	0799      	lsls	r1, r3, #30
 8002428:	d506      	bpl.n	8002438 <HAL_RCC_ClockConfig+0x44>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242a:	494b      	ldr	r1, [pc, #300]	; (8002558 <HAL_RCC_ClockConfig+0x164>)
 800242c:	68a8      	ldr	r0, [r5, #8]
 800242e:	688a      	ldr	r2, [r1, #8]
 8002430:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002434:	4302      	orrs	r2, r0
 8002436:	608a      	str	r2, [r1, #8]
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8002438:	4946      	ldr	r1, [pc, #280]	; (8002554 <HAL_RCC_ClockConfig+0x160>)
 800243a:	680a      	ldr	r2, [r1, #0]
 800243c:	f002 0207 	and.w	r2, r2, #7
 8002440:	4294      	cmp	r4, r2
 8002442:	d235      	bcs.n	80024b0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002444:	680a      	ldr	r2, [r1, #0]
 8002446:	f022 0207 	bic.w	r2, r2, #7
 800244a:	4322      	orrs	r2, r4
 800244c:	600a      	str	r2, [r1, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800244e:	680a      	ldr	r2, [r1, #0]
 8002450:	f002 0207 	and.w	r2, r2, #7
 8002454:	4294      	cmp	r4, r2
 8002456:	d02b      	beq.n	80024b0 <HAL_RCC_ClockConfig+0xbc>
      return HAL_ERROR;
 8002458:	2001      	movs	r0, #1
 800245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	6843      	ldr	r3, [r0, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002460:	4a3d      	ldr	r2, [pc, #244]	; (8002558 <HAL_RCC_ClockConfig+0x164>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002462:	2b03      	cmp	r3, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002464:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002466:	d06f      	beq.n	8002548 <HAL_RCC_ClockConfig+0x154>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002468:	2b02      	cmp	r3, #2
 800246a:	d067      	beq.n	800253c <HAL_RCC_ClockConfig+0x148>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800246c:	2b00      	cmp	r3, #0
 800246e:	d16e      	bne.n	800254e <HAL_RCC_ClockConfig+0x15a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002470:	0796      	lsls	r6, r2, #30
 8002472:	d5f1      	bpl.n	8002458 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002474:	4e38      	ldr	r6, [pc, #224]	; (8002558 <HAL_RCC_ClockConfig+0x164>)
 8002476:	68b2      	ldr	r2, [r6, #8]
 8002478:	f022 0203 	bic.w	r2, r2, #3
 800247c:	4313      	orrs	r3, r2
 800247e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002480:	f7fe fae6 	bl	8000a50 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002484:	686b      	ldr	r3, [r5, #4]
 8002486:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8002488:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248e:	d039      	beq.n	8002504 <HAL_RCC_ClockConfig+0x110>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002490:	2b02      	cmp	r3, #2
 8002492:	d04d      	beq.n	8002530 <HAL_RCC_ClockConfig+0x13c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002494:	2b00      	cmp	r3, #0
 8002496:	d140      	bne.n	800251a <HAL_RCC_ClockConfig+0x126>
 8002498:	e004      	b.n	80024a4 <HAL_RCC_ClockConfig+0xb0>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249a:	f7fe fad9 	bl	8000a50 <HAL_GetTick>
 800249e:	1bc0      	subs	r0, r0, r7
 80024a0:	4540      	cmp	r0, r8
 80024a2:	d84e      	bhi.n	8002542 <HAL_RCC_ClockConfig+0x14e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80024a4:	68b3      	ldr	r3, [r6, #8]
 80024a6:	f013 0f0c 	tst.w	r3, #12
 80024aa:	d1f6      	bne.n	800249a <HAL_RCC_ClockConfig+0xa6>
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	e7ba      	b.n	8002426 <HAL_RCC_ClockConfig+0x32>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	075a      	lsls	r2, r3, #29
 80024b2:	d506      	bpl.n	80024c2 <HAL_RCC_ClockConfig+0xce>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4928      	ldr	r1, [pc, #160]	; (8002558 <HAL_RCC_ClockConfig+0x164>)
 80024b6:	68e8      	ldr	r0, [r5, #12]
 80024b8:	688a      	ldr	r2, [r1, #8]
 80024ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024be:	4302      	orrs	r2, r0
 80024c0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c2:	071b      	lsls	r3, r3, #28
 80024c4:	d507      	bpl.n	80024d6 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c6:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_RCC_ClockConfig+0x164>)
 80024c8:	6929      	ldr	r1, [r5, #16]
 80024ca:	6893      	ldr	r3, [r2, #8]
 80024cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80024d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024d4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024d6:	f7ff fc8f 	bl	8001df8 <HAL_RCC_GetSysClockFreq>
 80024da:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <HAL_RCC_ClockConfig+0x164>)
 80024dc:	491f      	ldr	r1, [pc, #124]	; (800255c <HAL_RCC_ClockConfig+0x168>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a1f      	ldr	r2, [pc, #124]	; (8002560 <HAL_RCC_ClockConfig+0x16c>)
 80024e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 80024ec:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ee:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80024f0:	f7fe fa84 	bl	80009fc <HAL_InitTick>
  return HAL_OK;
 80024f4:	2000      	movs	r0, #0
}
 80024f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fa:	f7fe faa9 	bl	8000a50 <HAL_GetTick>
 80024fe:	1bc0      	subs	r0, r0, r7
 8002500:	4540      	cmp	r0, r8
 8002502:	d81e      	bhi.n	8002542 <HAL_RCC_ClockConfig+0x14e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002504:	68b3      	ldr	r3, [r6, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d1f5      	bne.n	80024fa <HAL_RCC_ClockConfig+0x106>
 800250e:	e7cd      	b.n	80024ac <HAL_RCC_ClockConfig+0xb8>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fe fa9e 	bl	8000a50 <HAL_GetTick>
 8002514:	1bc0      	subs	r0, r0, r7
 8002516:	4540      	cmp	r0, r8
 8002518:	d813      	bhi.n	8002542 <HAL_RCC_ClockConfig+0x14e>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800251a:	68b3      	ldr	r3, [r6, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b04      	cmp	r3, #4
 8002522:	d1f5      	bne.n	8002510 <HAL_RCC_ClockConfig+0x11c>
 8002524:	e7c2      	b.n	80024ac <HAL_RCC_ClockConfig+0xb8>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002526:	f7fe fa93 	bl	8000a50 <HAL_GetTick>
 800252a:	1bc0      	subs	r0, r0, r7
 800252c:	4540      	cmp	r0, r8
 800252e:	d808      	bhi.n	8002542 <HAL_RCC_ClockConfig+0x14e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002530:	68b3      	ldr	r3, [r6, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b08      	cmp	r3, #8
 8002538:	d1f5      	bne.n	8002526 <HAL_RCC_ClockConfig+0x132>
 800253a:	e7b7      	b.n	80024ac <HAL_RCC_ClockConfig+0xb8>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800253c:	0397      	lsls	r7, r2, #14
 800253e:	d499      	bmi.n	8002474 <HAL_RCC_ClockConfig+0x80>
 8002540:	e78a      	b.n	8002458 <HAL_RCC_ClockConfig+0x64>
          return HAL_TIMEOUT;
 8002542:	2003      	movs	r0, #3
 8002544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002548:	0192      	lsls	r2, r2, #6
 800254a:	d493      	bmi.n	8002474 <HAL_RCC_ClockConfig+0x80>
 800254c:	e784      	b.n	8002458 <HAL_RCC_ClockConfig+0x64>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800254e:	0550      	lsls	r0, r2, #21
 8002550:	d582      	bpl.n	8002458 <HAL_RCC_ClockConfig+0x64>
 8002552:	e78f      	b.n	8002474 <HAL_RCC_ClockConfig+0x80>
 8002554:	40022000 	.word	0x40022000
 8002558:	40021000 	.word	0x40021000
 800255c:	080042f4 	.word	0x080042f4
 8002560:	20000ce0 	.word	0x20000ce0

08002564 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8002564:	4b01      	ldr	r3, [pc, #4]	; (800256c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000ce0 	.word	0x20000ce0

08002570 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002570:	4a47      	ldr	r2, [pc, #284]	; (8002690 <RCCEx_PLLSAI1_Config+0x120>)
{
 8002572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002574:	68d3      	ldr	r3, [r2, #12]
 8002576:	079b      	lsls	r3, r3, #30
 8002578:	d007      	beq.n	800258a <RCCEx_PLLSAI1_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800257a:	68d3      	ldr	r3, [r2, #12]
 800257c:	6804      	ldr	r4, [r0, #0]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	42a3      	cmp	r3, r4
 8002584:	d00c      	beq.n	80025a0 <RCCEx_PLLSAI1_Config+0x30>
 8002586:	2001      	movs	r0, #1
 8002588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800258a:	6803      	ldr	r3, [r0, #0]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d011      	beq.n	80025b4 <RCCEx_PLLSAI1_Config+0x44>
 8002590:	2b03      	cmp	r3, #3
 8002592:	d056      	beq.n	8002642 <RCCEx_PLLSAI1_Config+0xd2>
 8002594:	2b01      	cmp	r3, #1
 8002596:	d1f6      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0x16>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	0797      	lsls	r7, r2, #30
 800259c:	d5f3      	bpl.n	8002586 <RCCEx_PLLSAI1_Config+0x16>
 800259e:	e00c      	b.n	80025ba <RCCEx_PLLSAI1_Config+0x4a>
       ||
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0x16>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025a4:	68d3      	ldr	r3, [r2, #12]
       ||
 80025a6:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025ac:	3301      	adds	r3, #1
       ||
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d1e9      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0x16>
 80025b2:	e00c      	b.n	80025ce <RCCEx_PLLSAI1_Config+0x5e>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	0556      	lsls	r6, r2, #21
 80025b8:	d5e5      	bpl.n	8002586 <RCCEx_PLLSAI1_Config+0x16>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ba:	4d35      	ldr	r5, [pc, #212]	; (8002690 <RCCEx_PLLSAI1_Config+0x120>)
 80025bc:	6844      	ldr	r4, [r0, #4]
 80025be:	68ea      	ldr	r2, [r5, #12]
 80025c0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80025c4:	4313      	orrs	r3, r2
 80025c6:	3c01      	subs	r4, #1
 80025c8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80025cc:	60eb      	str	r3, [r5, #12]
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025ce:	4c30      	ldr	r4, [pc, #192]	; (8002690 <RCCEx_PLLSAI1_Config+0x120>)
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025d6:	6023      	str	r3, [r4, #0]
 80025d8:	460f      	mov	r7, r1
 80025da:	4606      	mov	r6, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025dc:	f7fe fa38 	bl	8000a50 <HAL_GetTick>
 80025e0:	4605      	mov	r5, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80025e2:	e004      	b.n	80025ee <RCCEx_PLLSAI1_Config+0x7e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025e4:	f7fe fa34 	bl	8000a50 <HAL_GetTick>
 80025e8:	1b40      	subs	r0, r0, r5
 80025ea:	2802      	cmp	r0, #2
 80025ec:	d827      	bhi.n	800263e <RCCEx_PLLSAI1_Config+0xce>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	011a      	lsls	r2, r3, #4
 80025f2:	d4f7      	bmi.n	80025e4 <RCCEx_PLLSAI1_Config+0x74>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025f4:	bb67      	cbnz	r7, 8002650 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025f6:	6923      	ldr	r3, [r4, #16]
 80025f8:	68b1      	ldr	r1, [r6, #8]
 80025fa:	68f2      	ldr	r2, [r6, #12]
 80025fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002604:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002608:	0912      	lsrs	r2, r2, #4
 800260a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800260e:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002610:	4c1f      	ldr	r4, [pc, #124]	; (8002690 <RCCEx_PLLSAI1_Config+0x120>)
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002618:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fa19 	bl	8000a50 <HAL_GetTick>
 800261e:	4605      	mov	r5, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002620:	e004      	b.n	800262c <RCCEx_PLLSAI1_Config+0xbc>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002622:	f7fe fa15 	bl	8000a50 <HAL_GetTick>
 8002626:	1b40      	subs	r0, r0, r5
 8002628:	2802      	cmp	r0, #2
 800262a:	d808      	bhi.n	800263e <RCCEx_PLLSAI1_Config+0xce>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	d5f7      	bpl.n	8002622 <RCCEx_PLLSAI1_Config+0xb2>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002632:	69b2      	ldr	r2, [r6, #24]
 8002634:	6923      	ldr	r3, [r4, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	6123      	str	r3, [r4, #16]
 800263a:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800263c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = HAL_TIMEOUT;
 800263e:	2003      	movs	r0, #3
 8002640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002642:	6814      	ldr	r4, [r2, #0]
 8002644:	03a5      	lsls	r5, r4, #14
 8002646:	d4b8      	bmi.n	80025ba <RCCEx_PLLSAI1_Config+0x4a>
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	0354      	lsls	r4, r2, #13
 800264c:	d59b      	bpl.n	8002586 <RCCEx_PLLSAI1_Config+0x16>
 800264e:	e7b4      	b.n	80025ba <RCCEx_PLLSAI1_Config+0x4a>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002650:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002652:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002654:	d00d      	beq.n	8002672 <RCCEx_PLLSAI1_Config+0x102>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002656:	6972      	ldr	r2, [r6, #20]
 8002658:	68b1      	ldr	r1, [r6, #8]
 800265a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800265e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002662:	0852      	lsrs	r2, r2, #1
 8002664:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002668:	3a01      	subs	r2, #1
 800266a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800266e:	6123      	str	r3, [r4, #16]
 8002670:	e7ce      	b.n	8002610 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002672:	6932      	ldr	r2, [r6, #16]
 8002674:	68b1      	ldr	r1, [r6, #8]
 8002676:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800267a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800267e:	0852      	lsrs	r2, r2, #1
 8002680:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002684:	3a01      	subs	r2, #1
 8002686:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800268a:	6123      	str	r3, [r4, #16]
 800268c:	e7c0      	b.n	8002610 <RCCEx_PLLSAI1_Config+0xa0>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000

08002694 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002694:	4a3f      	ldr	r2, [pc, #252]	; (8002794 <RCCEx_PLLSAI2_Config+0x100>)
{
 8002696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002698:	68d3      	ldr	r3, [r2, #12]
 800269a:	079b      	lsls	r3, r3, #30
 800269c:	d007      	beq.n	80026ae <RCCEx_PLLSAI2_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800269e:	68d3      	ldr	r3, [r2, #12]
 80026a0:	6804      	ldr	r4, [r0, #0]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	42a3      	cmp	r3, r4
 80026a8:	d00c      	beq.n	80026c4 <RCCEx_PLLSAI2_Config+0x30>
 80026aa:	2001      	movs	r0, #1
 80026ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026ae:	6803      	ldr	r3, [r0, #0]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d011      	beq.n	80026d8 <RCCEx_PLLSAI2_Config+0x44>
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d056      	beq.n	8002766 <RCCEx_PLLSAI2_Config+0xd2>
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d1f6      	bne.n	80026aa <RCCEx_PLLSAI2_Config+0x16>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	0797      	lsls	r7, r2, #30
 80026c0:	d5f3      	bpl.n	80026aa <RCCEx_PLLSAI2_Config+0x16>
 80026c2:	e00c      	b.n	80026de <RCCEx_PLLSAI2_Config+0x4a>
       ||
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <RCCEx_PLLSAI2_Config+0x16>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026c8:	68d3      	ldr	r3, [r2, #12]
       ||
 80026ca:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026cc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80026d0:	3301      	adds	r3, #1
       ||
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d1e9      	bne.n	80026aa <RCCEx_PLLSAI2_Config+0x16>
 80026d6:	e00c      	b.n	80026f2 <RCCEx_PLLSAI2_Config+0x5e>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	0556      	lsls	r6, r2, #21
 80026dc:	d5e5      	bpl.n	80026aa <RCCEx_PLLSAI2_Config+0x16>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026de:	4d2d      	ldr	r5, [pc, #180]	; (8002794 <RCCEx_PLLSAI2_Config+0x100>)
 80026e0:	6844      	ldr	r4, [r0, #4]
 80026e2:	68ea      	ldr	r2, [r5, #12]
 80026e4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80026e8:	4313      	orrs	r3, r2
 80026ea:	3c01      	subs	r4, #1
 80026ec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80026f0:	60eb      	str	r3, [r5, #12]
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026f2:	4c28      	ldr	r4, [pc, #160]	; (8002794 <RCCEx_PLLSAI2_Config+0x100>)
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6023      	str	r3, [r4, #0]
 80026fc:	460f      	mov	r7, r1
 80026fe:	4606      	mov	r6, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002700:	f7fe f9a6 	bl	8000a50 <HAL_GetTick>
 8002704:	4605      	mov	r5, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8002706:	e004      	b.n	8002712 <RCCEx_PLLSAI2_Config+0x7e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002708:	f7fe f9a2 	bl	8000a50 <HAL_GetTick>
 800270c:	1b40      	subs	r0, r0, r5
 800270e:	2802      	cmp	r0, #2
 8002710:	d827      	bhi.n	8002762 <RCCEx_PLLSAI2_Config+0xce>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	009a      	lsls	r2, r3, #2
 8002716:	d4f7      	bmi.n	8002708 <RCCEx_PLLSAI2_Config+0x74>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002718:	bb67      	cbnz	r7, 8002774 <RCCEx_PLLSAI2_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800271a:	6963      	ldr	r3, [r4, #20]
 800271c:	68b1      	ldr	r1, [r6, #8]
 800271e:	68f2      	ldr	r2, [r6, #12]
 8002720:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002728:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800272c:	0912      	lsrs	r2, r2, #4
 800272e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002732:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002734:	4c17      	ldr	r4, [pc, #92]	; (8002794 <RCCEx_PLLSAI2_Config+0x100>)
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe f987 	bl	8000a50 <HAL_GetTick>
 8002742:	4605      	mov	r5, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8002744:	e004      	b.n	8002750 <RCCEx_PLLSAI2_Config+0xbc>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002746:	f7fe f983 	bl	8000a50 <HAL_GetTick>
 800274a:	1b40      	subs	r0, r0, r5
 800274c:	2802      	cmp	r0, #2
 800274e:	d808      	bhi.n	8002762 <RCCEx_PLLSAI2_Config+0xce>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8002750:	6823      	ldr	r3, [r4, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	d5f7      	bpl.n	8002746 <RCCEx_PLLSAI2_Config+0xb2>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002756:	6972      	ldr	r2, [r6, #20]
 8002758:	6963      	ldr	r3, [r4, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	6163      	str	r3, [r4, #20]
 800275e:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = HAL_TIMEOUT;
 8002762:	2003      	movs	r0, #3
 8002764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002766:	6814      	ldr	r4, [r2, #0]
 8002768:	03a5      	lsls	r5, r4, #14
 800276a:	d4b8      	bmi.n	80026de <RCCEx_PLLSAI2_Config+0x4a>
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	0354      	lsls	r4, r2, #13
 8002770:	d59b      	bpl.n	80026aa <RCCEx_PLLSAI2_Config+0x16>
 8002772:	e7b4      	b.n	80026de <RCCEx_PLLSAI2_Config+0x4a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002774:	6963      	ldr	r3, [r4, #20]
 8002776:	6932      	ldr	r2, [r6, #16]
 8002778:	68b1      	ldr	r1, [r6, #8]
 800277a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800277e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002782:	0852      	lsrs	r2, r2, #1
 8002784:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002788:	3a01      	subs	r2, #1
 800278a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800278e:	6163      	str	r3, [r4, #20]
 8002790:	e7d0      	b.n	8002734 <RCCEx_PLLSAI2_Config+0xa0>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000

08002798 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800279c:	6803      	ldr	r3, [r0, #0]
 800279e:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 80027a2:	b083      	sub	sp, #12
 80027a4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027a6:	d017      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->Sai1ClockSelection)
 80027a8:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80027aa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80027ae:	f000 81b6 	beq.w	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x386>
 80027b2:	f240 81d6 	bls.w	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80027b6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80027ba:	f000 81aa 	beq.w	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80027be:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80027c2:	f040 81d4 	bne.w	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c6:	48c2      	ldr	r0, [pc, #776]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027c8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80027cc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80027d0:	4311      	orrs	r1, r2
 80027d2:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 80027d6:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027d8:	04d8      	lsls	r0, r3, #19
 80027da:	f140 8100 	bpl.w	80029de <HAL_RCCEx_PeriphCLKConfig+0x246>
    switch(PeriphClkInit->Sai2ClockSelection)
 80027de:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80027e0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80027e4:	f000 8182 	beq.w	8002aec <HAL_RCCEx_PeriphCLKConfig+0x354>
 80027e8:	f240 81b2 	bls.w	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80027ec:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80027f0:	f000 8188 	beq.w	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80027f4:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80027f8:	f040 80f0 	bne.w	80029dc <HAL_RCCEx_PeriphCLKConfig+0x244>
 80027fc:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 80027fe:	2f00      	cmp	r7, #0
 8002800:	f040 817e 	bne.w	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x368>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002804:	49b2      	ldr	r1, [pc, #712]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002806:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002808:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800280c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002810:	4302      	orrs	r2, r0
 8002812:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002816:	0399      	lsls	r1, r3, #14
 8002818:	f100 80e5 	bmi.w	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800281c:	07da      	lsls	r2, r3, #31
 800281e:	d508      	bpl.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002820:	49ab      	ldr	r1, [pc, #684]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002822:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002824:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002828:	f022 0203 	bic.w	r2, r2, #3
 800282c:	4302      	orrs	r2, r0
 800282e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002832:	079f      	lsls	r7, r3, #30
 8002834:	d508      	bpl.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002836:	49a6      	ldr	r1, [pc, #664]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002838:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800283a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800283e:	f022 020c 	bic.w	r2, r2, #12
 8002842:	4302      	orrs	r2, r0
 8002844:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002848:	075d      	lsls	r5, r3, #29
 800284a:	d508      	bpl.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800284c:	49a0      	ldr	r1, [pc, #640]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800284e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002850:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002854:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002858:	4302      	orrs	r2, r0
 800285a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800285e:	0718      	lsls	r0, r3, #28
 8002860:	d508      	bpl.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002862:	499b      	ldr	r1, [pc, #620]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002864:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002866:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800286a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800286e:	4302      	orrs	r2, r0
 8002870:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002874:	06d9      	lsls	r1, r3, #27
 8002876:	d508      	bpl.n	800288a <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002878:	4995      	ldr	r1, [pc, #596]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800287a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800287c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002880:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002884:	4302      	orrs	r2, r0
 8002886:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800288a:	069a      	lsls	r2, r3, #26
 800288c:	d508      	bpl.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800288e:	4990      	ldr	r1, [pc, #576]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002890:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002892:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002896:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800289a:	4302      	orrs	r2, r0
 800289c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028a0:	059f      	lsls	r7, r3, #22
 80028a2:	d508      	bpl.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028a4:	498a      	ldr	r1, [pc, #552]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80028a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028ac:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80028b0:	4302      	orrs	r2, r0
 80028b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028b6:	055d      	lsls	r5, r3, #21
 80028b8:	d508      	bpl.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028ba:	4985      	ldr	r1, [pc, #532]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028bc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80028be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028c2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80028c6:	4302      	orrs	r2, r0
 80028c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028cc:	0658      	lsls	r0, r3, #25
 80028ce:	d508      	bpl.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028d0:	497f      	ldr	r1, [pc, #508]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80028d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028d8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80028dc:	4302      	orrs	r2, r0
 80028de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028e2:	0619      	lsls	r1, r3, #24
 80028e4:	d508      	bpl.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028e6:	497a      	ldr	r1, [pc, #488]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80028f2:	4302      	orrs	r2, r0
 80028f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f8:	05da      	lsls	r2, r3, #23
 80028fa:	d508      	bpl.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028fc:	4974      	ldr	r1, [pc, #464]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002900:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002904:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002908:	4302      	orrs	r2, r0
 800290a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800290e:	049f      	lsls	r7, r3, #18
 8002910:	d510      	bpl.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002912:	486f      	ldr	r0, [pc, #444]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002914:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002916:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800291a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800291e:	430a      	orrs	r2, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002920:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002924:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002928:	f000 80d6 	beq.w	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x340>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800292c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002930:	f000 8122 	beq.w	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002934:	031d      	lsls	r5, r3, #12
 8002936:	d510      	bpl.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002938:	4865      	ldr	r0, [pc, #404]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800293a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800293c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002940:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002944:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002946:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800294a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800294e:	f000 80c8 	beq.w	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002952:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002956:	f000 811f 	beq.w	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x400>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800295a:	0358      	lsls	r0, r3, #13
 800295c:	d510      	bpl.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800295e:	485c      	ldr	r0, [pc, #368]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002960:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002962:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8002966:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800296a:	430a      	orrs	r2, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800296c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002970:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002974:	f000 80a7 	beq.w	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002978:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800297c:	f000 8104 	beq.w	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002980:	0459      	lsls	r1, r3, #17
 8002982:	d510      	bpl.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002984:	4852      	ldr	r0, [pc, #328]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002986:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002988:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800298c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002990:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002992:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002996:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800299a:	f000 80c8 	beq.w	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x396>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800299e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80029a2:	f000 80cc 	beq.w	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029a6:	041a      	lsls	r2, r3, #16
 80029a8:	d508      	bpl.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029aa:	4949      	ldr	r1, [pc, #292]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ac:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80029ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80029b2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80029b6:	4302      	orrs	r2, r0
 80029b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029bc:	03db      	lsls	r3, r3, #15
 80029be:	d509      	bpl.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029c0:	4a43      	ldr	r2, [pc, #268]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029c2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80029c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ce:	430b      	orrs	r3, r1
 80029d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80029d4:	4630      	mov	r0, r6
 80029d6:	b003      	add	sp, #12
 80029d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = HAL_ERROR;
 80029dc:	2601      	movs	r6, #1
 80029de:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029e0:	0399      	lsls	r1, r3, #14
 80029e2:	f57f af1b 	bpl.w	800281c <HAL_RCCEx_PeriphCLKConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b3a      	ldr	r3, [pc, #232]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029ea:	00d2      	lsls	r2, r2, #3
 80029ec:	d555      	bpl.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x302>
    FlagStatus       pwrclkchanged = RESET;
 80029ee:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029f2:	4d38      	ldr	r5, [pc, #224]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fa:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80029fc:	f7fe f828 	bl	8000a50 <HAL_GetTick>
 8002a00:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8002a02:	e005      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a04:	f7fe f824 	bl	8000a50 <HAL_GetTick>
 8002a08:	eba0 0009 	sub.w	r0, r0, r9
 8002a0c:	2802      	cmp	r0, #2
 8002a0e:	d850      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	05db      	lsls	r3, r3, #23
 8002a14:	d5f6      	bpl.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    if(ret == HAL_OK)
 8002a16:	2f00      	cmp	r7, #0
 8002a18:	f040 80ce 	bne.w	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x420>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a1c:	4a2c      	ldr	r2, [pc, #176]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a1e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a22:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a26:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002a2a:	d029      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002a2c:	428b      	cmp	r3, r1
 8002a2e:	f000 80bb 	beq.w	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x410>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a36:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8002a3a:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002a3e:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a42:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a4a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8002a4e:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a56:	07d8      	lsls	r0, r3, #31
 8002a58:	d512      	bpl.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002a5a:	f7fd fff9 	bl	8000a50 <HAL_GetTick>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002a5e:	4d1c      	ldr	r5, [pc, #112]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
        tickstart = HAL_GetTick();
 8002a60:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f241 3788 	movw	r7, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002a66:	e005      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7fd fff2 	bl	8000a50 <HAL_GetTick>
 8002a6c:	eba0 0009 	sub.w	r0, r0, r9
 8002a70:	42b8      	cmp	r0, r7
 8002a72:	d81e      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002a74:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002a78:	0799      	lsls	r1, r3, #30
 8002a7a:	d5f5      	bpl.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002a7c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a80:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 8002a90:	f1b8 0f00 	cmp.w	r8, #0
 8002a94:	d111      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x322>
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	e6c0      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002aa0:	659a      	str	r2, [r3, #88]	; 0x58
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002aac:	f04f 0801 	mov.w	r8, #1
 8002ab0:	e79f      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        ret = HAL_TIMEOUT;
 8002ab2:	2603      	movs	r6, #3
    if(pwrclkchanged == SET)
 8002ab4:	f1b8 0f00 	cmp.w	r8, #0
 8002ab8:	d0ed      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002abc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac4:	e7e7      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac6:	68c2      	ldr	r2, [r0, #12]
 8002ac8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002acc:	60c2      	str	r2, [r0, #12]
 8002ace:	e757      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad8:	68c2      	ldr	r2, [r0, #12]
 8002ada:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ade:	60c2      	str	r2, [r0, #12]
 8002ae0:	e728      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae2:	68c2      	ldr	r2, [r0, #12]
 8002ae4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ae8:	60c2      	str	r2, [r0, #12]
 8002aea:	e736      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002aec:	2100      	movs	r1, #0
 8002aee:	f104 0020 	add.w	r0, r4, #32
 8002af2:	f7ff fdcf 	bl	8002694 <RCCEx_PLLSAI2_Config>
 8002af6:	4607      	mov	r7, r0
 8002af8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002afa:	2f00      	cmp	r7, #0
 8002afc:	f43f ae82 	beq.w	8002804 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002b00:	463e      	mov	r6, r7
 8002b02:	e76d      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b04:	492d      	ldr	r1, [pc, #180]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002b06:	68ca      	ldr	r2, [r1, #12]
 8002b08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b0c:	60ca      	str	r2, [r1, #12]
      break;
 8002b0e:	4637      	mov	r7, r6
 8002b10:	e675      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b12:	482a      	ldr	r0, [pc, #168]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002b14:	68c2      	ldr	r2, [r0, #12]
 8002b16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b1a:	60c2      	str	r2, [r0, #12]
      break;
 8002b1c:	e653      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b1e:	2100      	movs	r1, #0
 8002b20:	3020      	adds	r0, #32
 8002b22:	f7ff fdb7 	bl	8002694 <RCCEx_PLLSAI2_Config>
 8002b26:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002b28:	b31e      	cbz	r6, 8002b72 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	e654      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b2e:	2102      	movs	r1, #2
 8002b30:	1d20      	adds	r0, r4, #4
 8002b32:	f7ff fd1d 	bl	8002570 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002b36:	b148      	cbz	r0, 8002b4c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      if(ret != HAL_OK)
 8002b38:	4606      	mov	r6, r0
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	e733      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b3e:	2102      	movs	r1, #2
 8002b40:	f104 0020 	add.w	r0, r4, #32
 8002b44:	f7ff fda6 	bl	8002694 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d1f5      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	e72a      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002b50:	2900      	cmp	r1, #0
 8002b52:	f47f af43 	bne.w	80029dc <HAL_RCCEx_PeriphCLKConfig+0x244>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b56:	1d20      	adds	r0, r4, #4
 8002b58:	f7ff fd0a 	bl	8002570 <RCCEx_PLLSAI1_Config>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	4607      	mov	r7, r0
      break;
 8002b60:	e64d      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b62:	b921      	cbnz	r1, 8002b6e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b64:	3004      	adds	r0, #4
 8002b66:	f7ff fd03 	bl	8002570 <RCCEx_PLLSAI1_Config>
 8002b6a:	4606      	mov	r6, r0
      break;
 8002b6c:	e7dc      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = HAL_ERROR;
 8002b6e:	2601      	movs	r6, #1
 8002b70:	e632      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b72:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	e626      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b78:	2101      	movs	r1, #1
 8002b7a:	1d20      	adds	r0, r4, #4
 8002b7c:	f7ff fcf8 	bl	8002570 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002b80:	b1b0      	cbz	r0, 8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002b82:	4606      	mov	r6, r0
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	e6d5      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b88:	2101      	movs	r1, #1
 8002b8a:	1d20      	adds	r0, r4, #4
 8002b8c:	f7ff fcf0 	bl	8002570 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002b90:	b180      	cbz	r0, 8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002b92:	4606      	mov	r6, r0
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	e6f3      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b98:	2101      	movs	r1, #1
 8002b9a:	1d20      	adds	r0, r4, #4
 8002b9c:	f7ff fce8 	bl	8002570 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002ba0:	b120      	cbz	r0, 8002bac <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002ba2:	4606      	mov	r6, r0
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	e6d8      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002ba8:	460b      	mov	r3, r1
 8002baa:	e754      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	e6d4      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002bb0:	6823      	ldr	r3, [r4, #0]
 8002bb2:	e6bf      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	e6e3      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bb8:	463e      	mov	r6, r7
 8002bba:	e769      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc2:	b0b9      	sub	sp, #228	; 0xe4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002bc4:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002bc6:	2110      	movs	r1, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002bc8:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8002bca:	2280      	movs	r2, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bcc:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002bce:	9105      	str	r1, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002bd0:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002bd2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002bd4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8002bd6:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bd8:	f7ff f98c 	bl	8001ef4 <HAL_RCC_OscConfig>
 8002bdc:	b100      	cbz	r0, 8002be0 <SystemClock_Config+0x20>
 8002bde:	e7fe      	b.n	8002bde <SystemClock_Config+0x1e>
 8002be0:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002be2:	4601      	mov	r1, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002be4:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002be6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002be8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bea:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bec:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bee:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf0:	9200      	str	r2, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002bf2:	f7ff fbff 	bl	80023f4 <HAL_RCC_ClockConfig>
 8002bf6:	b100      	cbz	r0, 8002bfa <SystemClock_Config+0x3a>
 8002bf8:	e7fe      	b.n	8002bf8 <SystemClock_Config+0x38>
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002bfa:	2302      	movs	r3, #2
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002bfc:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002c00:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002c04:	2508      	movs	r5, #8
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002c06:	2107      	movs	r1, #7
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002c08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c0c:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002c0e:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002c10:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002c12:	9716      	str	r7, [sp, #88]	; 0x58
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002c14:	9634      	str	r6, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002c16:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002c18:	911a      	str	r1, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002c1a:	931b      	str	r3, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002c1c:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002c1e:	921d      	str	r2, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c20:	f7ff fdba 	bl	8002798 <HAL_RCCEx_PeriphCLKConfig>
 8002c24:	b100      	cbz	r0, 8002c28 <SystemClock_Config+0x68>
 8002c26:	e7fe      	b.n	8002c26 <SystemClock_Config+0x66>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c2c:	f7ff f862 	bl	8001cf4 <HAL_PWREx_ControlVoltageScaling>
 8002c30:	4604      	mov	r4, r0
 8002c32:	b100      	cbz	r0, 8002c36 <SystemClock_Config+0x76>
 8002c34:	e7fe      	b.n	8002c34 <SystemClock_Config+0x74>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002c36:	f7ff fc95 	bl	8002564 <HAL_RCC_GetHCLKFreq>
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <SystemClock_Config+0x9c>)
 8002c3c:	fba3 3000 	umull	r3, r0, r3, r0
 8002c40:	0980      	lsrs	r0, r0, #6
 8002c42:	f7fe fdeb 	bl	800181c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002c46:	2004      	movs	r0, #4
 8002c48:	f7fe fe02 	bl	8001850 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	4621      	mov	r1, r4
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	f7fe fda0 	bl	8001798 <HAL_NVIC_SetPriority>
}
 8002c58:	b039      	add	sp, #228	; 0xe4
 8002c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c5c:	10624dd3 	.word	0x10624dd3

08002c60 <main>:
{
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c64:	4e79      	ldr	r6, [pc, #484]	; (8002e4c <main+0x1ec>)
  hadc1.Instance = ADC1;
 8002c66:	4c7a      	ldr	r4, [pc, #488]	; (8002e50 <main+0x1f0>)
{
 8002c68:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8002c6a:	f7fd fedd 	bl	8000a28 <HAL_Init>
  SystemClock_Config();
 8002c6e:	f7ff ffa7 	bl	8002bc0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c72:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	64f3      	str	r3, [r6, #76]	; 0x4c
 8002c7a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	9305      	str	r3, [sp, #20]
 8002c82:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c84:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	64f3      	str	r3, [r6, #76]	; 0x4c
 8002c8c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8002c8e:	f003 0301 	and.w	r3, r3, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002c92:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c94:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002c96:	2120      	movs	r1, #32
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	4615      	mov	r5, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002ca0:	f7ff f80c 	bl	8001cbc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ca4:	4b6b      	ldr	r3, [pc, #428]	; (8002e54 <main+0x1f4>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca6:	486c      	ldr	r0, [pc, #432]	; (8002e58 <main+0x1f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ca8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cae:	a90a      	add	r1, sp, #40	; 0x28

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb0:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002cb2:	920a      	str	r2, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cb6:	f04f 0820 	mov.w	r8, #32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cba:	f7fe fee5 	bl	8001a88 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbe:	a90a      	add	r1, sp, #40	; 0x28
 8002cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cc8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ccc:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cce:	f7fe fedb 	bl	8001a88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002cd2:	462a      	mov	r2, r5
 8002cd4:	4639      	mov	r1, r7
 8002cd6:	2028      	movs	r0, #40	; 0x28
 8002cd8:	f7fe fd5e 	bl	8001798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cdc:	2028      	movs	r0, #40	; 0x28
 8002cde:	f7fe fd91 	bl	8001804 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ce2:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002ce4:	433b      	orrs	r3, r7
 8002ce6:	64b3      	str	r3, [r6, #72]	; 0x48
 8002ce8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002cea:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cec:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cee:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cf4:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cf6:	f7fe fd4f 	bl	8001798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002cfa:	200b      	movs	r0, #11
 8002cfc:	f7fe fd82 	bl	8001804 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8002d00:	4a56      	ldr	r2, [pc, #344]	; (8002e5c <main+0x1fc>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d02:	60a5      	str	r5, [r4, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d04:	2604      	movs	r6, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8002d06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d0a:	4620      	mov	r0, r4
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d0c:	60e5      	str	r5, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d0e:	6125      	str	r5, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d10:	61a5      	str	r5, [r4, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d12:	61e7      	str	r7, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 8002d14:	6227      	str	r7, [r4, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d16:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 8002d18:	62a7      	str	r7, [r4, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d1a:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d1c:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d1e:	6367      	str	r7, [r4, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d20:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002d22:	63e5      	str	r5, [r4, #60]	; 0x3c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8002d24:	e884 000c 	stmia.w	r4, {r2, r3}
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d28:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d2a:	f7fd fea5 	bl	8000a78 <HAL_ADC_Init>
 8002d2e:	b100      	cbz	r0, 8002d32 <main+0xd2>
 8002d30:	e7fe      	b.n	8002d30 <main+0xd0>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002d32:	a910      	add	r1, sp, #64	; 0x40
 8002d34:	4603      	mov	r3, r0
 8002d36:	f841 3d24 	str.w	r3, [r1, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f7fe fc9e 	bl	800167c <HAL_ADCEx_MultiModeConfigChannel>
 8002d40:	b100      	cbz	r0, 8002d44 <main+0xe4>
 8002d42:	e7fe      	b.n	8002d42 <main+0xe2>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d44:	2306      	movs	r3, #6
  sConfig.Channel = ADC_CHANNEL_1;
 8002d46:	4d46      	ldr	r5, [pc, #280]	; (8002e60 <main+0x200>)
  sConfig.Offset = 0;
 8002d48:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d4a:	227f      	movs	r2, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d4c:	a90a      	add	r1, sp, #40	; 0x28
 8002d4e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8002d50:	950a      	str	r5, [sp, #40]	; 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d52:	960e      	str	r6, [sp, #56]	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d54:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8002d56:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d58:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d5a:	f7fd fffb 	bl	8000d54 <HAL_ADC_ConfigChannel>
 8002d5e:	4605      	mov	r5, r0
 8002d60:	b100      	cbz	r0, 8002d64 <main+0x104>
 8002d62:	e7fe      	b.n	8002d62 <main+0x102>
  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8002d64:	463a      	mov	r2, r7
 8002d66:	4641      	mov	r1, r8
 8002d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d6c:	f7fe ffa6 	bl	8001cbc <HAL_GPIO_WritePin>
  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_data,256);
 8002d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d74:	493b      	ldr	r1, [pc, #236]	; (8002e64 <main+0x204>)
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7fe fb78 	bl	800146c <HAL_ADC_Start_DMA>
  	HAL_Delay(1000);
 8002d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d80:	f7fd fe6c 	bl	8000a5c <HAL_Delay>
  	HAL_ADC_Stop_DMA(&hadc1);
 8002d84:	4620      	mov	r0, r4
 8002d86:	f7fe fc37 	bl	80015f8 <HAL_ADC_Stop_DMA>
  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8002d8a:	462a      	mov	r2, r5
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d92:	f7fe ff93 	bl	8001cbc <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 8002d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d9a:	f7fd fe5f 	bl	8000a5c <HAL_Delay>
  	for(int i=0;i<=512;i=i+1)
 8002d9e:	462b      	mov	r3, r5
 8002da0:	4a31      	ldr	r2, [pc, #196]	; (8002e68 <main+0x208>)
 8002da2:	4d30      	ldr	r5, [pc, #192]	; (8002e64 <main+0x204>)
  			fft_inp[i]=0;
 8002da4:	2400      	movs	r4, #0
  int j=0;
 8002da6:	4619      	mov	r1, r3
  	for(int i=0;i<=512;i=i+1)
 8002da8:	f240 2001 	movw	r0, #513	; 0x201
 8002dac:	e00e      	b.n	8002dcc <main+0x16c>
  			fft_inp[i] = adc_data[j];
 8002dae:	f835 6011 	ldrh.w	r6, [r5, r1, lsl #1]
 8002db2:	ee07 6a90 	vmov	s15, r6
  	for(int i=0;i<=512;i=i+1)
 8002db6:	3301      	adds	r3, #1
  			fft_inp[i] = adc_data[j];
 8002db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
  	for(int i=0;i<=512;i=i+1)
 8002dbc:	4283      	cmp	r3, r0
  			fft_inp[i] = adc_data[j];
 8002dbe:	edc2 7a00 	vstr	s15, [r2]
  			j = j + 1;
 8002dc2:	f101 0101 	add.w	r1, r1, #1
 8002dc6:	f102 0204 	add.w	r2, r2, #4
  	for(int i=0;i<=512;i=i+1)
 8002dca:	d007      	beq.n	8002ddc <main+0x17c>
  		if(i%2 == 0)
 8002dcc:	07de      	lsls	r6, r3, #31
 8002dce:	d5ee      	bpl.n	8002dae <main+0x14e>
  	for(int i=0;i<=512;i=i+1)
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	4283      	cmp	r3, r0
  			fft_inp[i]=0;
 8002dd4:	6014      	str	r4, [r2, #0]
 8002dd6:	f102 0204 	add.w	r2, r2, #4
  	for(int i=0;i<=512;i=i+1)
 8002dda:	d1f7      	bne.n	8002dcc <main+0x16c>
  	status = arm_cfft_radix4_init_f32(&S,fftSize,ifftFlag, doBitReverse);
 8002ddc:	4d23      	ldr	r5, [pc, #140]	; (8002e6c <main+0x20c>)
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <main+0x210>)
 8002de0:	4a24      	ldr	r2, [pc, #144]	; (8002e74 <main+0x214>)
  	arm_cmplx_mag_f32(fft_inp,fft_mag ,fftSize);
 8002de2:	4c25      	ldr	r4, [pc, #148]	; (8002e78 <main+0x218>)
  	status = arm_cfft_radix4_init_f32(&S,fftSize,ifftFlag, doBitReverse);
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	8829      	ldrh	r1, [r5, #0]
 8002dea:	4e24      	ldr	r6, [pc, #144]	; (8002e7c <main+0x21c>)
 8002dec:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002e88 <main+0x228>
 8002df0:	a80a      	add	r0, sp, #40	; 0x28
 8002df2:	f000 fb95 	bl	8003520 <arm_cfft_radix4_init_f32>
  	arm_cfft_radix4_f32(&S, fft_inp);
 8002df6:	a80a      	add	r0, sp, #40	; 0x28
 8002df8:	491b      	ldr	r1, [pc, #108]	; (8002e68 <main+0x208>)
 8002dfa:	f000 ff95 	bl	8003d28 <arm_cfft_radix4_f32>
  	arm_cmplx_mag_f32(fft_inp,fft_mag ,fftSize);
 8002dfe:	682a      	ldr	r2, [r5, #0]
 8002e00:	4819      	ldr	r0, [pc, #100]	; (8002e68 <main+0x208>)
 8002e02:	4621      	mov	r1, r4
 8002e04:	f000 ffb4 	bl	8003d70 <arm_cmplx_mag_f32>
 8002e08:	f8df c080 	ldr.w	ip, [pc, #128]	; 8002e8c <main+0x22c>
  	fft_mag_k1=fft_mag[1];
 8002e0c:	edd4 7a01 	vldr	s15, [r4, #4]
 8002e10:	f8dc 2000 	ldr.w	r2, [ip]
 8002e14:	9201      	str	r2, [sp, #4]
 8002e16:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <main+0x220>)
 8002e18:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <main+0x224>)
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	edd6 6a00 	vldr	s13, [r6]
 8002e20:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8002e90 <main+0x230>
 8002e24:	9203      	str	r2, [sp, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	edc3 7a00 	vstr	s15, [r3]
 8002e2c:	4625      	mov	r5, r4
 8002e2e:	4623      	mov	r3, r4
 8002e30:	ed9e 6a00 	vldr	s12, [lr]
 8002e34:	ed98 7a00 	vldr	s14, [r8]
 8002e38:	9202      	str	r2, [sp, #8]
 8002e3a:	eef8 5a66 	vcvt.f32.u32	s11, s13
 8002e3e:	4617      	mov	r7, r2
 8002e40:	4614      	mov	r4, r2
 8002e42:	4691      	mov	r9, r2
  	int flag=0;
 8002e44:	4692      	mov	sl, r2
  	fft_mag_k1=fft_mag[1];
 8002e46:	2101      	movs	r1, #1
 8002e48:	e026      	b.n	8002e98 <main+0x238>
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	20000f9c 	.word	0x20000f9c
 8002e54:	10110000 	.word	0x10110000
 8002e58:	48000800 	.word	0x48000800
 8002e5c:	50040000 	.word	0x50040000
 8002e60:	04300002 	.word	0x04300002
 8002e64:	20001668 	.word	0x20001668
 8002e68:	20001a90 	.word	0x20001a90
 8002e6c:	20000094 	.word	0x20000094
 8002e70:	20000090 	.word	0x20000090
 8002e74:	20000d6c 	.word	0x20000d6c
 8002e78:	20001004 	.word	0x20001004
 8002e7c:	20000d68 	.word	0x20000d68
 8002e80:	20000f78 	.word	0x20000f78
 8002e84:	2000188c 	.word	0x2000188c
 8002e88:	20000f7c 	.word	0x20000f7c
 8002e8c:	20000f98 	.word	0x20000f98
 8002e90:	20000f74 	.word	0x20000f74
 8002e94:	edd0 7a00 	vldr	s15, [r0]
  		if (fft_mag[k-1]<fft_mag[k] && fft_mag[k]>fft_mag[k+1] && flag==0)
 8002e98:	ecb5 5a01 	vldmia	r5!, {s10}
 8002e9c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	f101 0b01 	add.w	fp, r1, #1
 8002ea8:	d50f      	bpl.n	8002eca <main+0x26a>
 8002eaa:	ed95 5a01 	vldr	s10, [r5, #4]
 8002eae:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb6:	d508      	bpl.n	8002eca <main+0x26a>
 8002eb8:	f1ba 0f00 	cmp.w	sl, #0
 8002ebc:	d105      	bne.n	8002eca <main+0x26a>
  			funda_value=fft_mag[k];
 8002ebe:	2401      	movs	r4, #1
 8002ec0:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8002ec4:	46a1      	mov	r9, r4
  			flag=1;
 8002ec6:	46a2      	mov	sl, r4
  			funda_index=k;
 8002ec8:	9101      	str	r1, [sp, #4]
  		if(fft_mag[k]>domi_value)
 8002eca:	eef4 5ae7 	vcmpe.f32	s11, s15
  			dom_freq=(domi_index*8000)/256;
 8002ece:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
  		if(fft_mag[k]>domi_value)
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  			dom_freq=(domi_index*8000)/256;
 8002ed6:	fb00 f001 	mul.w	r0, r0, r1
  		if(fft_mag[k]>domi_value)
 8002eda:	d50c      	bpl.n	8002ef6 <main+0x296>
  			dom_freq=(domi_index*8000)/256;
 8002edc:	0a00      	lsrs	r0, r0, #8
  			domi_value=fft_mag[k];
 8002ede:	eefc 6ae7 	vcvt.u32.f32	s13, s15
  			dom_freq=(domi_index*8000)/256;
 8002ee2:	ee07 0a90 	vmov	s15, r0
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eec:	eef8 5a66 	vcvt.f32.u32	s11, s13
  			domi_index=k;
 8002ef0:	9103      	str	r1, [sp, #12]
  			dom_freq=(domi_index*8000)/256;
 8002ef2:	9202      	str	r2, [sp, #8]
 8002ef4:	4617      	mov	r7, r2
 8002ef6:	4659      	mov	r1, fp
 8002ef8:	4866      	ldr	r0, [pc, #408]	; (8003094 <main+0x434>)
  	for(int k=1;k<256/2;k++)
 8002efa:	2980      	cmp	r1, #128	; 0x80
 8002efc:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 8002f00:	d1c8      	bne.n	8002e94 <main+0x234>
 8002f02:	f1b9 0f00 	cmp.w	r9, #0
 8002f06:	d002      	beq.n	8002f0e <main+0x2ae>
 8002f08:	9901      	ldr	r1, [sp, #4]
 8002f0a:	f8cc 1000 	str.w	r1, [ip]
 8002f0e:	b10c      	cbz	r4, 8002f14 <main+0x2b4>
 8002f10:	ed8e 6a00 	vstr	s12, [lr]
 8002f14:	b10f      	cbz	r7, 8002f1a <main+0x2ba>
 8002f16:	edc6 6a00 	vstr	s13, [r6]
 8002f1a:	9902      	ldr	r1, [sp, #8]
 8002f1c:	b111      	cbz	r1, 8002f24 <main+0x2c4>
 8002f1e:	495e      	ldr	r1, [pc, #376]	; (8003098 <main+0x438>)
 8002f20:	9803      	ldr	r0, [sp, #12]
 8002f22:	6008      	str	r0, [r1, #0]
 8002f24:	b10a      	cbz	r2, 8002f2a <main+0x2ca>
 8002f26:	ed88 7a00 	vstr	s14, [r8]
 8002f2a:	4a5c      	ldr	r2, [pc, #368]	; (800309c <main+0x43c>)
 8002f2c:	495c      	ldr	r1, [pc, #368]	; (80030a0 <main+0x440>)
  		temp_fft[l]=fft_mag[l];
 8002f2e:	f853 0b04 	ldr.w	r0, [r3], #4
 8002f32:	f842 0b04 	str.w	r0, [r2], #4
  	for (int l=0;l<128;l=l+1)
 8002f36:	428b      	cmp	r3, r1
 8002f38:	d1f9      	bne.n	8002f2e <main+0x2ce>
  	arm_mult_f32(temp_fft,filter1,filter_temp,128);//Filter1
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	4a59      	ldr	r2, [pc, #356]	; (80030a4 <main+0x444>)
 8002f3e:	495a      	ldr	r1, [pc, #360]	; (80030a8 <main+0x448>)
 8002f40:	4856      	ldr	r0, [pc, #344]	; (800309c <main+0x43c>)
 8002f42:	f001 f843 	bl	8003fcc <arm_mult_f32>
  	arm_mean_f32(filter_temp,128,&filter_energy[0]);
 8002f46:	4a59      	ldr	r2, [pc, #356]	; (80030ac <main+0x44c>)
 8002f48:	4856      	ldr	r0, [pc, #344]	; (80030a4 <main+0x444>)
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	f000 fab4 	bl	80034b8 <arm_mean_f32>
  	arm_mult_f32(temp_fft,filter2,filter_temp,128);//Filter 2
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	4a54      	ldr	r2, [pc, #336]	; (80030a4 <main+0x444>)
 8002f54:	4956      	ldr	r1, [pc, #344]	; (80030b0 <main+0x450>)
 8002f56:	4851      	ldr	r0, [pc, #324]	; (800309c <main+0x43c>)
 8002f58:	f001 f838 	bl	8003fcc <arm_mult_f32>
  	arm_mean_f32(filter_temp,128,&filter_energy[1]);
 8002f5c:	4a55      	ldr	r2, [pc, #340]	; (80030b4 <main+0x454>)
 8002f5e:	4851      	ldr	r0, [pc, #324]	; (80030a4 <main+0x444>)
 8002f60:	2180      	movs	r1, #128	; 0x80
 8002f62:	f000 faa9 	bl	80034b8 <arm_mean_f32>
  	arm_mult_f32(temp_fft,filter3,filter_temp,128);//Filter 3
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	4a4e      	ldr	r2, [pc, #312]	; (80030a4 <main+0x444>)
 8002f6a:	4953      	ldr	r1, [pc, #332]	; (80030b8 <main+0x458>)
 8002f6c:	484b      	ldr	r0, [pc, #300]	; (800309c <main+0x43c>)
 8002f6e:	f001 f82d 	bl	8003fcc <arm_mult_f32>
  	arm_mean_f32(filter_temp,128,&filter_energy[2]);
 8002f72:	4a52      	ldr	r2, [pc, #328]	; (80030bc <main+0x45c>)
 8002f74:	484b      	ldr	r0, [pc, #300]	; (80030a4 <main+0x444>)
 8002f76:	2180      	movs	r1, #128	; 0x80
 8002f78:	f000 fa9e 	bl	80034b8 <arm_mean_f32>
  	arm_mult_f32(temp_fft,filter4,filter_temp,128);//Filter 4
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	4a49      	ldr	r2, [pc, #292]	; (80030a4 <main+0x444>)
 8002f80:	494f      	ldr	r1, [pc, #316]	; (80030c0 <main+0x460>)
 8002f82:	4846      	ldr	r0, [pc, #280]	; (800309c <main+0x43c>)
 8002f84:	f001 f822 	bl	8003fcc <arm_mult_f32>
  	arm_mean_f32(filter_temp,128,&filter_energy[3]);
 8002f88:	4a4e      	ldr	r2, [pc, #312]	; (80030c4 <main+0x464>)
 8002f8a:	4846      	ldr	r0, [pc, #280]	; (80030a4 <main+0x444>)
 8002f8c:	2180      	movs	r1, #128	; 0x80
 8002f8e:	f000 fa93 	bl	80034b8 <arm_mean_f32>
  	arm_mult_f32(temp_fft,filter5,filter_temp,128);//Filter 5
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	4a43      	ldr	r2, [pc, #268]	; (80030a4 <main+0x444>)
 8002f96:	494c      	ldr	r1, [pc, #304]	; (80030c8 <main+0x468>)
 8002f98:	4840      	ldr	r0, [pc, #256]	; (800309c <main+0x43c>)
 8002f9a:	f001 f817 	bl	8003fcc <arm_mult_f32>
  	arm_mean_f32(filter_temp,128,&filter_energy[4]);
 8002f9e:	4a4b      	ldr	r2, [pc, #300]	; (80030cc <main+0x46c>)
 8002fa0:	4840      	ldr	r0, [pc, #256]	; (80030a4 <main+0x444>)
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	f000 fa88 	bl	80034b8 <arm_mean_f32>
  	arm_mult_f32(temp_fft,filter6,filter_temp,128);//Filter 6
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	4a3e      	ldr	r2, [pc, #248]	; (80030a4 <main+0x444>)
 8002fac:	4948      	ldr	r1, [pc, #288]	; (80030d0 <main+0x470>)
 8002fae:	483b      	ldr	r0, [pc, #236]	; (800309c <main+0x43c>)
 8002fb0:	f001 f80c 	bl	8003fcc <arm_mult_f32>
  	arm_mean_f32(filter_temp,128,&filter_energy[5]);
 8002fb4:	4a47      	ldr	r2, [pc, #284]	; (80030d4 <main+0x474>)
 8002fb6:	483b      	ldr	r0, [pc, #236]	; (80030a4 <main+0x444>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	f000 fa7d 	bl	80034b8 <arm_mean_f32>
  	arm_sub_f32(filter_energy,kshi_aa,temp,6); //For Kshitij
 8002fbe:	2306      	movs	r3, #6
 8002fc0:	4a45      	ldr	r2, [pc, #276]	; (80030d8 <main+0x478>)
 8002fc2:	4946      	ldr	r1, [pc, #280]	; (80030dc <main+0x47c>)
 8002fc4:	4839      	ldr	r0, [pc, #228]	; (80030ac <main+0x44c>)
 8002fc6:	f000 ffbb 	bl	8003f40 <arm_sub_f32>
  	arm_rms_f32(temp,6,&rms_energy[0]);
 8002fca:	4a45      	ldr	r2, [pc, #276]	; (80030e0 <main+0x480>)
 8002fcc:	4842      	ldr	r0, [pc, #264]	; (80030d8 <main+0x478>)
 8002fce:	2106      	movs	r1, #6
 8002fd0:	f000 f9b4 	bl	800333c <arm_rms_f32>
  	arm_sub_f32(filter_energy,kshi_o,temp,6);
 8002fd4:	2306      	movs	r3, #6
 8002fd6:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <main+0x478>)
 8002fd8:	4942      	ldr	r1, [pc, #264]	; (80030e4 <main+0x484>)
 8002fda:	4834      	ldr	r0, [pc, #208]	; (80030ac <main+0x44c>)
 8002fdc:	f000 ffb0 	bl	8003f40 <arm_sub_f32>
  	arm_rms_f32(temp,6,&rms_energy[1]);
 8002fe0:	4a41      	ldr	r2, [pc, #260]	; (80030e8 <main+0x488>)
 8002fe2:	483d      	ldr	r0, [pc, #244]	; (80030d8 <main+0x478>)
 8002fe4:	2106      	movs	r1, #6
 8002fe6:	f000 f9a9 	bl	800333c <arm_rms_f32>
  	arm_sub_f32(filter_energy,kshi_e,temp,6);
 8002fea:	2306      	movs	r3, #6
 8002fec:	4a3a      	ldr	r2, [pc, #232]	; (80030d8 <main+0x478>)
 8002fee:	493f      	ldr	r1, [pc, #252]	; (80030ec <main+0x48c>)
 8002ff0:	482e      	ldr	r0, [pc, #184]	; (80030ac <main+0x44c>)
 8002ff2:	f000 ffa5 	bl	8003f40 <arm_sub_f32>
  	arm_rms_f32(temp,6,&rms_energy[2]);
 8002ff6:	4a3e      	ldr	r2, [pc, #248]	; (80030f0 <main+0x490>)
 8002ff8:	4837      	ldr	r0, [pc, #220]	; (80030d8 <main+0x478>)
 8002ffa:	2106      	movs	r1, #6
 8002ffc:	f000 f99e 	bl	800333c <arm_rms_f32>
  	arm_sub_f32(filter_energy,aman_aa,temp,6); // For Aman
 8003000:	2306      	movs	r3, #6
 8003002:	4a35      	ldr	r2, [pc, #212]	; (80030d8 <main+0x478>)
 8003004:	493b      	ldr	r1, [pc, #236]	; (80030f4 <main+0x494>)
 8003006:	4829      	ldr	r0, [pc, #164]	; (80030ac <main+0x44c>)
 8003008:	f000 ff9a 	bl	8003f40 <arm_sub_f32>
  	arm_rms_f32(temp,6,&rms_energy[3]);
 800300c:	4a3a      	ldr	r2, [pc, #232]	; (80030f8 <main+0x498>)
 800300e:	4832      	ldr	r0, [pc, #200]	; (80030d8 <main+0x478>)
 8003010:	2106      	movs	r1, #6
 8003012:	f000 f993 	bl	800333c <arm_rms_f32>
  	arm_sub_f32(filter_energy,aman_o,temp,6);
 8003016:	2306      	movs	r3, #6
 8003018:	4a2f      	ldr	r2, [pc, #188]	; (80030d8 <main+0x478>)
 800301a:	4938      	ldr	r1, [pc, #224]	; (80030fc <main+0x49c>)
 800301c:	4823      	ldr	r0, [pc, #140]	; (80030ac <main+0x44c>)
 800301e:	f000 ff8f 	bl	8003f40 <arm_sub_f32>
  	arm_rms_f32(temp,6,&rms_energy[4]);
 8003022:	4a37      	ldr	r2, [pc, #220]	; (8003100 <main+0x4a0>)
 8003024:	482c      	ldr	r0, [pc, #176]	; (80030d8 <main+0x478>)
 8003026:	2106      	movs	r1, #6
 8003028:	f000 f988 	bl	800333c <arm_rms_f32>
  	arm_sub_f32(filter_energy,aman_e,temp,6);
 800302c:	2306      	movs	r3, #6
 800302e:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <main+0x478>)
 8003030:	4934      	ldr	r1, [pc, #208]	; (8003104 <main+0x4a4>)
 8003032:	481e      	ldr	r0, [pc, #120]	; (80030ac <main+0x44c>)
 8003034:	f000 ff84 	bl	8003f40 <arm_sub_f32>
  	arm_rms_f32(temp,6,&rms_energy[5]);
 8003038:	4a33      	ldr	r2, [pc, #204]	; (8003108 <main+0x4a8>)
 800303a:	4827      	ldr	r0, [pc, #156]	; (80030d8 <main+0x478>)
 800303c:	2106      	movs	r1, #6
 800303e:	f000 f97d 	bl	800333c <arm_rms_f32>
  	arm_sub_f32(filter_energy,aayu_aa,temp,6);// For Aayush
 8003042:	2306      	movs	r3, #6
 8003044:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <main+0x478>)
 8003046:	4931      	ldr	r1, [pc, #196]	; (800310c <main+0x4ac>)
 8003048:	4818      	ldr	r0, [pc, #96]	; (80030ac <main+0x44c>)
 800304a:	f000 ff79 	bl	8003f40 <arm_sub_f32>
  	arm_rms_f32(temp,6,&rms_energy[6]);
 800304e:	4a30      	ldr	r2, [pc, #192]	; (8003110 <main+0x4b0>)
 8003050:	4821      	ldr	r0, [pc, #132]	; (80030d8 <main+0x478>)
 8003052:	2106      	movs	r1, #6
 8003054:	f000 f972 	bl	800333c <arm_rms_f32>
  	arm_sub_f32(filter_energy,aayu_o,temp,6);
 8003058:	2306      	movs	r3, #6
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <main+0x478>)
 800305c:	492d      	ldr	r1, [pc, #180]	; (8003114 <main+0x4b4>)
 800305e:	4813      	ldr	r0, [pc, #76]	; (80030ac <main+0x44c>)
 8003060:	f000 ff6e 	bl	8003f40 <arm_sub_f32>
  	arm_rms_f32(temp,6,&rms_energy[7]);
 8003064:	4a2c      	ldr	r2, [pc, #176]	; (8003118 <main+0x4b8>)
 8003066:	481c      	ldr	r0, [pc, #112]	; (80030d8 <main+0x478>)
 8003068:	2106      	movs	r1, #6
 800306a:	f000 f967 	bl	800333c <arm_rms_f32>
  	arm_sub_f32(filter_energy,aayu_e,temp,6);
 800306e:	2306      	movs	r3, #6
 8003070:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <main+0x478>)
 8003072:	492a      	ldr	r1, [pc, #168]	; (800311c <main+0x4bc>)
 8003074:	480d      	ldr	r0, [pc, #52]	; (80030ac <main+0x44c>)
 8003076:	f000 ff63 	bl	8003f40 <arm_sub_f32>
  	arm_rms_f32(temp,6,&rms_energy[8]);
 800307a:	4a29      	ldr	r2, [pc, #164]	; (8003120 <main+0x4c0>)
 800307c:	4816      	ldr	r0, [pc, #88]	; (80030d8 <main+0x478>)
 800307e:	2106      	movs	r1, #6
 8003080:	f000 f95c 	bl	800333c <arm_rms_f32>
  	arm_min_f32(rms_energy,9,&min_dist_value,&min_dist_index); //Finding the minimum distance and value
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <main+0x4c4>)
 8003086:	4a28      	ldr	r2, [pc, #160]	; (8003128 <main+0x4c8>)
 8003088:	4815      	ldr	r0, [pc, #84]	; (80030e0 <main+0x480>)
 800308a:	2109      	movs	r1, #9
 800308c:	f000 f9ac 	bl	80033e8 <arm_min_f32>
 8003090:	e7fe      	b.n	8003090 <main+0x430>
 8003092:	bf00      	nop
 8003094:	20001004 	.word	0x20001004
 8003098:	20000f78 	.word	0x20000f78
 800309c:	20001404 	.word	0x20001404
 80030a0:	20001204 	.word	0x20001204
 80030a4:	20000d74 	.word	0x20000d74
 80030a8:	20000098 	.word	0x20000098
 80030ac:	20001604 	.word	0x20001604
 80030b0:	20000298 	.word	0x20000298
 80030b4:	20001608 	.word	0x20001608
 80030b8:	20000498 	.word	0x20000498
 80030bc:	2000160c 	.word	0x2000160c
 80030c0:	20000698 	.word	0x20000698
 80030c4:	20001610 	.word	0x20001610
 80030c8:	20000898 	.word	0x20000898
 80030cc:	20001614 	.word	0x20001614
 80030d0:	20000a98 	.word	0x20000a98
 80030d4:	20001618 	.word	0x20001618
 80030d8:	20000f80 	.word	0x20000f80
 80030dc:	20000c98 	.word	0x20000c98
 80030e0:	20001868 	.word	0x20001868
 80030e4:	20000cc8 	.word	0x20000cc8
 80030e8:	2000186c 	.word	0x2000186c
 80030ec:	20000cb0 	.word	0x20000cb0
 80030f0:	20001870 	.word	0x20001870
 80030f4:	20000048 	.word	0x20000048
 80030f8:	20001874 	.word	0x20001874
 80030fc:	20000078 	.word	0x20000078
 8003100:	20001878 	.word	0x20001878
 8003104:	20000060 	.word	0x20000060
 8003108:	2000187c 	.word	0x2000187c
 800310c:	20000000 	.word	0x20000000
 8003110:	20001880 	.word	0x20001880
 8003114:	20000030 	.word	0x20000030
 8003118:	20001884 	.word	0x20001884
 800311c:	20000018 	.word	0x20000018
 8003120:	20001888 	.word	0x20001888
 8003124:	20001664 	.word	0x20001664
 8003128:	20002294 	.word	0x20002294

0800312c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800312c:	e7fe      	b.n	800312c <_Error_Handler>
 800312e:	bf00      	nop

08003130 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <HAL_MspInit+0x8c>)
{
 8003132:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003134:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	661a      	str	r2, [r3, #96]	; 0x60
 800313c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800313e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003140:	f002 0201 	and.w	r2, r2, #1
 8003144:	9200      	str	r2, [sp, #0]
 8003146:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800314a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800314e:	659a      	str	r2, [r3, #88]	; 0x58
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003158:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800315c:	f7fe fb0a 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003160:	2200      	movs	r2, #0
 8003162:	4611      	mov	r1, r2
 8003164:	f06f 000b 	mvn.w	r0, #11
 8003168:	f7fe fb16 	bl	8001798 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800316c:	2200      	movs	r2, #0
 800316e:	4611      	mov	r1, r2
 8003170:	f06f 000a 	mvn.w	r0, #10
 8003174:	f7fe fb10 	bl	8001798 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003178:	2200      	movs	r2, #0
 800317a:	4611      	mov	r1, r2
 800317c:	f06f 0009 	mvn.w	r0, #9
 8003180:	f7fe fb0a 	bl	8001798 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003184:	2200      	movs	r2, #0
 8003186:	4611      	mov	r1, r2
 8003188:	f06f 0004 	mvn.w	r0, #4
 800318c:	f7fe fb04 	bl	8001798 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003190:	2200      	movs	r2, #0
 8003192:	4611      	mov	r1, r2
 8003194:	f06f 0003 	mvn.w	r0, #3
 8003198:	f7fe fafe 	bl	8001798 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	4611      	mov	r1, r2
 80031a0:	f06f 0001 	mvn.w	r0, #1
 80031a4:	f7fe faf8 	bl	8001798 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80031a8:	2200      	movs	r2, #0
 80031aa:	4611      	mov	r1, r2
 80031ac:	f04f 30ff 	mov.w	r0, #4294967295
 80031b0:	f7fe faf2 	bl	8001798 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b4:	b003      	add	sp, #12
 80031b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000

080031c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80031c0:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_ADC_MspInit+0x80>)
 80031c2:	6802      	ldr	r2, [r0, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d000      	beq.n	80031ca <HAL_ADC_MspInit+0xa>
 80031c8:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031ca:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80031ce:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
{
 80031d2:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_ADC_CLK_ENABLE();
 80031d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80031d6:	4d1b      	ldr	r5, [pc, #108]	; (8003244 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC_CLK_ENABLE();
 80031d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80031de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 80031e0:	b087      	sub	sp, #28
    __HAL_RCC_ADC_CLK_ENABLE();
 80031e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2600      	movs	r6, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 80031e8:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031ea:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80031ec:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ee:	a901      	add	r1, sp, #4
 80031f0:	4604      	mov	r4, r0
 80031f2:	4815      	ldr	r0, [pc, #84]	; (8003248 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC_CLK_ENABLE();
 80031f4:	9f00      	ldr	r7, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031f6:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80031f8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	9603      	str	r6, [sp, #12]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031fc:	2780      	movs	r7, #128	; 0x80
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fe:	f7fe fc43 	bl	8001a88 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8003202:	f8df e04c 	ldr.w	lr, [pc, #76]	; 8003250 <HAL_ADC_MspInit+0x90>
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003206:	606e      	str	r6, [r5, #4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003208:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800320c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003210:	2320      	movs	r3, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003212:	4628      	mov	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003214:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003216:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003218:	622e      	str	r6, [r5, #32]
    hdma_adc1.Instance = DMA1_Channel1;
 800321a:	f8c5 e000 	str.w	lr, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800321e:	612f      	str	r7, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003220:	6169      	str	r1, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003222:	61aa      	str	r2, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003224:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003226:	f7fe fb25 	bl	8001874 <HAL_DMA_Init>
 800322a:	b918      	cbnz	r0, 8003234 <HAL_ADC_MspInit+0x74>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800322c:	6525      	str	r5, [r4, #80]	; 0x50
 800322e:	62ac      	str	r4, [r5, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003230:	b007      	add	sp, #28
 8003232:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 8003234:	2174      	movs	r1, #116	; 0x74
 8003236:	4805      	ldr	r0, [pc, #20]	; (800324c <HAL_ADC_MspInit+0x8c>)
 8003238:	f7ff ff78 	bl	800312c <_Error_Handler>
 800323c:	e7f6      	b.n	800322c <HAL_ADC_MspInit+0x6c>
 800323e:	bf00      	nop
 8003240:	50040000 	.word	0x50040000
 8003244:	2000161c 	.word	0x2000161c
 8003248:	48000800 	.word	0x48000800
 800324c:	080042d8 	.word	0x080042d8
 8003250:	40020008 	.word	0x40020008

08003254 <NMI_Handler>:
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop

08003258 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003258:	e7fe      	b.n	8003258 <HardFault_Handler>
 800325a:	bf00      	nop

0800325c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800325c:	e7fe      	b.n	800325c <MemManage_Handler>
 800325e:	bf00      	nop

08003260 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003260:	e7fe      	b.n	8003260 <BusFault_Handler>
 8003262:	bf00      	nop

08003264 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003264:	e7fe      	b.n	8003264 <UsageFault_Handler>
 8003266:	bf00      	nop

08003268 <SVC_Handler>:
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop

0800326c <DebugMon_Handler>:
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop

08003270 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop

08003274 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003274:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003276:	f7fd fbe3 	bl	8000a40 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800327a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800327e:	f7fe baf5 	b.w	800186c <HAL_SYSTICK_IRQHandler>
 8003282:	bf00      	nop

08003284 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003284:	4801      	ldr	r0, [pc, #4]	; (800328c <DMA1_Channel1_IRQHandler+0x8>)
 8003286:	f7fe bbb3 	b.w	80019f0 <HAL_DMA_IRQHandler>
 800328a:	bf00      	nop
 800328c:	2000161c 	.word	0x2000161c

08003290 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003290:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003294:	f7fe bd1a 	b.w	8001ccc <HAL_GPIO_EXTI_IRQHandler>

08003298 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003298:	4911      	ldr	r1, [pc, #68]	; (80032e0 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800329c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032a0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80032a4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 80032aa:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80032ac:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80032b4:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80032bc:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80032c0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 80032c4:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 80032c6:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032c8:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032ca:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 80032ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032d2:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 80032d4:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032d6:	608c      	str	r4, [r1, #8]
#endif
}
 80032d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000ed00 	.word	0xe000ed00
 80032e4:	40021000 	.word	0x40021000

080032e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003320 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80032ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80032ee:	e003      	b.n	80032f8 <LoopCopyDataInit>

080032f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80032f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80032f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80032f6:	3104      	adds	r1, #4

080032f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80032f8:	480b      	ldr	r0, [pc, #44]	; (8003328 <LoopForever+0xa>)
	ldr	r3, =_edata
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <LoopForever+0xe>)
	adds	r2, r0, r1
 80032fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80032fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003300:	d3f6      	bcc.n	80032f0 <CopyDataInit>
	ldr	r2, =_sbss
 8003302:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003304:	e002      	b.n	800330c <LoopFillZerobss>

08003306 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003306:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003308:	f842 3b04 	str.w	r3, [r2], #4

0800330c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <LoopForever+0x16>)
	cmp	r2, r3
 800330e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003310:	d3f9      	bcc.n	8003306 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003312:	f7ff ffc1 	bl	8003298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003316:	f000 ff0f 	bl	8004138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800331a:	f7ff fca1 	bl	8002c60 <main>

0800331e <LoopForever>:

LoopForever:
    b LoopForever
 800331e:	e7fe      	b.n	800331e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003320:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003324:	0800cb44 	.word	0x0800cb44
	ldr	r0, =_sdata
 8003328:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800332c:	20000d4c 	.word	0x20000d4c
	ldr	r2, =_sbss
 8003330:	20000d4c 	.word	0x20000d4c
	ldr	r3, = _ebss
 8003334:	20002298 	.word	0x20002298

08003338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003338:	e7fe      	b.n	8003338 <ADC1_2_IRQHandler>
	...

0800333c <arm_rms_f32>:
 800333c:	b530      	push	{r4, r5, lr}
 800333e:	088d      	lsrs	r5, r1, #2
 8003340:	b083      	sub	sp, #12
 8003342:	eddf 5a28 	vldr	s11, [pc, #160]	; 80033e4 <arm_rms_f32+0xa8>
 8003346:	d020      	beq.n	800338a <arm_rms_f32+0x4e>
 8003348:	f100 0310 	add.w	r3, r0, #16
 800334c:	462c      	mov	r4, r5
 800334e:	ed53 6a04 	vldr	s13, [r3, #-16]
 8003352:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003356:	ed53 7a02 	vldr	s15, [r3, #-8]
 800335a:	ed13 6a01 	vldr	s12, [r3, #-4]
 800335e:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8003362:	ee27 7a07 	vmul.f32	s14, s14, s14
 8003366:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800336a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800336e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003372:	ee26 6a06 	vmul.f32	s12, s12, s12
 8003376:	ee77 7a87 	vadd.f32	s15, s15, s14
 800337a:	3c01      	subs	r4, #1
 800337c:	f103 0310 	add.w	r3, r3, #16
 8003380:	ee76 5a27 	vadd.f32	s11, s12, s15
 8003384:	d1e3      	bne.n	800334e <arm_rms_f32+0x12>
 8003386:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800338a:	f011 0303 	ands.w	r3, r1, #3
 800338e:	d007      	beq.n	80033a0 <arm_rms_f32+0x64>
 8003390:	ecb0 6a01 	vldmia	r0!, {s12}
 8003394:	ee26 6a06 	vmul.f32	s12, s12, s12
 8003398:	3b01      	subs	r3, #1
 800339a:	ee75 5a86 	vadd.f32	s11, s11, s12
 800339e:	d1f7      	bne.n	8003390 <arm_rms_f32+0x54>
 80033a0:	ee07 1a90 	vmov	s15, r1
 80033a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a8:	2300      	movs	r3, #0
 80033aa:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80033ae:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	da02      	bge.n	80033be <arm_rms_f32+0x82>
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	b003      	add	sp, #12
 80033bc:	bd30      	pop	{r4, r5, pc}
 80033be:	eeb1 0ac7 	vsqrt.f32	s0, s14
 80033c2:	eeb4 0a40 	vcmp.f32	s0, s0
 80033c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ca:	d103      	bne.n	80033d4 <arm_rms_f32+0x98>
 80033cc:	ed82 0a00 	vstr	s0, [r2]
 80033d0:	b003      	add	sp, #12
 80033d2:	bd30      	pop	{r4, r5, pc}
 80033d4:	eeb0 0a47 	vmov.f32	s0, s14
 80033d8:	9201      	str	r2, [sp, #4]
 80033da:	f000 fed1 	bl	8004180 <sqrtf>
 80033de:	9a01      	ldr	r2, [sp, #4]
 80033e0:	e7f4      	b.n	80033cc <arm_rms_f32+0x90>
 80033e2:	bf00      	nop
 80033e4:	00000000 	.word	0x00000000

080033e8 <arm_min_f32>:
 80033e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ec:	1e4f      	subs	r7, r1, #1
 80033ee:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80033f2:	f100 0e04 	add.w	lr, r0, #4
 80033f6:	edd0 7a00 	vldr	s15, [r0]
 80033fa:	d058      	beq.n	80034ae <arm_min_f32+0xc6>
 80033fc:	3014      	adds	r0, #20
 80033fe:	46c4      	mov	ip, r8
 8003400:	2604      	movs	r6, #4
 8003402:	2400      	movs	r4, #0
 8003404:	ed10 6a04 	vldr	s12, [r0, #-16]
 8003408:	ed50 6a03 	vldr	s13, [r0, #-12]
 800340c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8003410:	ed50 5a01 	vldr	s11, [r0, #-4]
 8003414:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341c:	bf48      	it	mi
 800341e:	eef0 7a46 	vmovmi.f32	s15, s12
 8003422:	f1a6 0503 	sub.w	r5, r6, #3
 8003426:	eef4 7ae6 	vcmpe.f32	s15, s13
 800342a:	bf48      	it	mi
 800342c:	462c      	movmi	r4, r5
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	bfc8      	it	gt
 8003434:	eef0 7a66 	vmovgt.f32	s15, s13
 8003438:	f1a6 0502 	sub.w	r5, r6, #2
 800343c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003440:	bfc8      	it	gt
 8003442:	462c      	movgt	r4, r5
 8003444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003448:	bfc8      	it	gt
 800344a:	eef0 7a47 	vmovgt.f32	s15, s14
 800344e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003452:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003456:	bfc8      	it	gt
 8003458:	462c      	movgt	r4, r5
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	bfc8      	it	gt
 8003460:	4634      	movgt	r4, r6
 8003462:	bfc8      	it	gt
 8003464:	eef0 7a65 	vmovgt.f32	s15, s11
 8003468:	f1bc 0c01 	subs.w	ip, ip, #1
 800346c:	f100 0010 	add.w	r0, r0, #16
 8003470:	f106 0604 	add.w	r6, r6, #4
 8003474:	d1c6      	bne.n	8003404 <arm_min_f32+0x1c>
 8003476:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800347a:	f017 0003 	ands.w	r0, r7, #3
 800347e:	d018      	beq.n	80034b2 <arm_min_f32+0xca>
 8003480:	1a08      	subs	r0, r1, r0
 8003482:	ecbe 7a01 	vldmia	lr!, {s14}
 8003486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348e:	bf48      	it	mi
 8003490:	4604      	movmi	r4, r0
 8003492:	f100 0001 	add.w	r0, r0, #1
 8003496:	bf58      	it	pl
 8003498:	eeb0 7a67 	vmovpl.f32	s14, s15
 800349c:	4281      	cmp	r1, r0
 800349e:	eef0 7a47 	vmov.f32	s15, s14
 80034a2:	d1ee      	bne.n	8003482 <arm_min_f32+0x9a>
 80034a4:	ed82 7a00 	vstr	s14, [r2]
 80034a8:	601c      	str	r4, [r3, #0]
 80034aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ae:	4644      	mov	r4, r8
 80034b0:	e7e3      	b.n	800347a <arm_min_f32+0x92>
 80034b2:	eeb0 7a67 	vmov.f32	s14, s15
 80034b6:	e7f5      	b.n	80034a4 <arm_min_f32+0xbc>

080034b8 <arm_mean_f32>:
 80034b8:	b430      	push	{r4, r5}
 80034ba:	088d      	lsrs	r5, r1, #2
 80034bc:	eddf 7a17 	vldr	s15, [pc, #92]	; 800351c <arm_mean_f32+0x64>
 80034c0:	d018      	beq.n	80034f4 <arm_mean_f32+0x3c>
 80034c2:	f100 0310 	add.w	r3, r0, #16
 80034c6:	462c      	mov	r4, r5
 80034c8:	ed13 7a04 	vldr	s14, [r3, #-16]
 80034cc:	ed53 5a03 	vldr	s11, [r3, #-12]
 80034d0:	ed13 6a02 	vldr	s12, [r3, #-8]
 80034d4:	ed53 6a01 	vldr	s13, [r3, #-4]
 80034d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034dc:	3c01      	subs	r4, #1
 80034de:	ee77 7a25 	vadd.f32	s15, s14, s11
 80034e2:	f103 0310 	add.w	r3, r3, #16
 80034e6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80034ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ee:	d1eb      	bne.n	80034c8 <arm_mean_f32+0x10>
 80034f0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80034f4:	f011 0303 	ands.w	r3, r1, #3
 80034f8:	d005      	beq.n	8003506 <arm_mean_f32+0x4e>
 80034fa:	ecb0 7a01 	vldmia	r0!, {s14}
 80034fe:	3b01      	subs	r3, #1
 8003500:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003504:	d1f9      	bne.n	80034fa <arm_mean_f32+0x42>
 8003506:	ee07 1a10 	vmov	s14, r1
 800350a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800350e:	bc30      	pop	{r4, r5}
 8003510:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003514:	edc2 6a00 	vstr	s13, [r2]
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	00000000 	.word	0x00000000

08003520 <arm_cfft_radix4_init_f32>:
 8003520:	b410      	push	{r4}
 8003522:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003526:	4c29      	ldr	r4, [pc, #164]	; (80035cc <arm_cfft_radix4_init_f32+0xac>)
 8003528:	7082      	strb	r2, [r0, #2]
 800352a:	70c3      	strb	r3, [r0, #3]
 800352c:	8001      	strh	r1, [r0, #0]
 800352e:	6044      	str	r4, [r0, #4]
 8003530:	d03f      	beq.n	80035b2 <arm_cfft_radix4_init_f32+0x92>
 8003532:	d80e      	bhi.n	8003552 <arm_cfft_radix4_init_f32+0x32>
 8003534:	2910      	cmp	r1, #16
 8003536:	d02f      	beq.n	8003598 <arm_cfft_radix4_init_f32+0x78>
 8003538:	2940      	cmp	r1, #64	; 0x40
 800353a:	d11c      	bne.n	8003576 <arm_cfft_radix4_init_f32+0x56>
 800353c:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8003540:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <arm_cfft_radix4_init_f32+0xb0>)
 8003542:	8181      	strh	r1, [r0, #12]
 8003544:	81c1      	strh	r1, [r0, #14]
 8003546:	6102      	str	r2, [r0, #16]
 8003548:	6083      	str	r3, [r0, #8]
 800354a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800354e:	2000      	movs	r0, #0
 8003550:	4770      	bx	lr
 8003552:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003556:	d013      	beq.n	8003580 <arm_cfft_radix4_init_f32+0x60>
 8003558:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800355c:	d10b      	bne.n	8003576 <arm_cfft_radix4_init_f32+0x56>
 800355e:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8003562:	6103      	str	r3, [r0, #16]
 8003564:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <arm_cfft_radix4_init_f32+0xb4>)
 8003566:	6082      	str	r2, [r0, #8]
 8003568:	2301      	movs	r3, #1
 800356a:	8183      	strh	r3, [r0, #12]
 800356c:	81c3      	strh	r3, [r0, #14]
 800356e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003572:	2000      	movs	r0, #0
 8003574:	4770      	bx	lr
 8003576:	f04f 30ff 	mov.w	r0, #4294967295
 800357a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 8003584:	6103      	str	r3, [r0, #16]
 8003586:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <arm_cfft_radix4_init_f32+0xb8>)
 8003588:	6082      	str	r2, [r0, #8]
 800358a:	2304      	movs	r3, #4
 800358c:	8183      	strh	r3, [r0, #12]
 800358e:	81c3      	strh	r3, [r0, #14]
 8003590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003594:	2000      	movs	r0, #0
 8003596:	4770      	bx	lr
 8003598:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 800359c:	6103      	str	r3, [r0, #16]
 800359e:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <arm_cfft_radix4_init_f32+0xbc>)
 80035a0:	6082      	str	r2, [r0, #8]
 80035a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a6:	8183      	strh	r3, [r0, #12]
 80035a8:	81c3      	strh	r3, [r0, #14]
 80035aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035ae:	2000      	movs	r0, #0
 80035b0:	4770      	bx	lr
 80035b2:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 80035b6:	6103      	str	r3, [r0, #16]
 80035b8:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <arm_cfft_radix4_init_f32+0xc0>)
 80035ba:	6082      	str	r2, [r0, #8]
 80035bc:	2310      	movs	r3, #16
 80035be:	8183      	strh	r3, [r0, #12]
 80035c0:	81c3      	strh	r3, [r0, #14]
 80035c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035c6:	2000      	movs	r0, #0
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	08004b34 	.word	0x08004b34
 80035d0:	080043b2 	.word	0x080043b2
 80035d4:	08004334 	.word	0x08004334
 80035d8:	0800433a 	.word	0x0800433a
 80035dc:	08004532 	.word	0x08004532
 80035e0:	08004352 	.word	0x08004352

080035e4 <arm_radix4_butterfly_f32>:
 80035e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e8:	ed2d 8b06 	vpush	{d8-d10}
 80035ec:	468a      	mov	sl, r1
 80035ee:	0889      	lsrs	r1, r1, #2
 80035f0:	b08d      	sub	sp, #52	; 0x34
 80035f2:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 80035f6:	eb00 040c 	add.w	r4, r0, ip
 80035fa:	460d      	mov	r5, r1
 80035fc:	461f      	mov	r7, r3
 80035fe:	4691      	mov	r9, r2
 8003600:	920a      	str	r2, [sp, #40]	; 0x28
 8003602:	eb04 020c 	add.w	r2, r4, ip
 8003606:	4606      	mov	r6, r0
 8003608:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800360c:	9700      	str	r7, [sp, #0]
 800360e:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 8003612:	9009      	str	r0, [sp, #36]	; 0x24
 8003614:	eba2 07c5 	sub.w	r7, r2, r5, lsl #3
 8003618:	f10c 0004 	add.w	r0, ip, #4
 800361c:	9701      	str	r7, [sp, #4]
 800361e:	9103      	str	r1, [sp, #12]
 8003620:	4430      	add	r0, r6
 8003622:	4631      	mov	r1, r6
 8003624:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8003628:	1d37      	adds	r7, r6, #4
 800362a:	9e00      	ldr	r6, [sp, #0]
 800362c:	46ab      	mov	fp, r5
 800362e:	00f5      	lsls	r5, r6, #3
 8003630:	9502      	str	r5, [sp, #8]
 8003632:	f8cd b010 	str.w	fp, [sp, #16]
 8003636:	f8dd b008 	ldr.w	fp, [sp, #8]
 800363a:	f8cd a008 	str.w	sl, [sp, #8]
 800363e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8003642:	ea4f 1806 	mov.w	r8, r6, lsl #4
 8003646:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800364a:	464e      	mov	r6, r9
 800364c:	464d      	mov	r5, r9
 800364e:	edd1 4a01 	vldr	s9, [r1, #4]
 8003652:	ed10 4a01 	vldr	s8, [r0, #-4]
 8003656:	ed17 6a01 	vldr	s12, [r7, #-4]
 800365a:	edd2 6a00 	vldr	s13, [r2]
 800365e:	ed94 7a01 	vldr	s14, [r4, #4]
 8003662:	edd3 7a01 	vldr	s15, [r3, #4]
 8003666:	ed93 5a00 	vldr	s10, [r3]
 800366a:	edd2 5a01 	vldr	s11, [r2, #4]
 800366e:	ed99 3a00 	vldr	s6, [r9]
 8003672:	edd9 3a01 	vldr	s7, [r9, #4]
 8003676:	ee36 2a26 	vadd.f32	s4, s12, s13
 800367a:	ee74 2a05 	vadd.f32	s5, s8, s10
 800367e:	ee34 1aa5 	vadd.f32	s2, s9, s11
 8003682:	ee77 1a27 	vadd.f32	s3, s14, s15
 8003686:	ee32 0a22 	vadd.f32	s0, s4, s5
 800368a:	ee71 0a21 	vadd.f32	s1, s2, s3
 800368e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8003692:	ee34 5a45 	vsub.f32	s10, s8, s10
 8003696:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800369a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800369e:	ed07 0a01 	vstr	s0, [r7, #-4]
 80036a2:	edc1 0a01 	vstr	s1, [r1, #4]
 80036a6:	ed95 4a00 	vldr	s8, [r5]
 80036aa:	edd6 6a00 	vldr	s13, [r6]
 80036ae:	edd6 7a01 	vldr	s15, [r6, #4]
 80036b2:	ee72 4a62 	vsub.f32	s9, s4, s5
 80036b6:	ee71 1a61 	vsub.f32	s3, s2, s3
 80036ba:	ee75 2ac5 	vsub.f32	s5, s11, s10
 80036be:	ed95 1a01 	vldr	s2, [r5, #4]
 80036c2:	ee36 2a07 	vadd.f32	s4, s12, s14
 80036c6:	ee36 7a47 	vsub.f32	s14, s12, s14
 80036ca:	ee35 6a25 	vadd.f32	s12, s10, s11
 80036ce:	ee62 0a04 	vmul.f32	s1, s4, s8
 80036d2:	ee23 5a21 	vmul.f32	s10, s6, s3
 80036d6:	ee22 2a01 	vmul.f32	s4, s4, s2
 80036da:	ee22 4a84 	vmul.f32	s8, s5, s8
 80036de:	ee22 1a81 	vmul.f32	s2, s5, s2
 80036e2:	ee67 5a26 	vmul.f32	s11, s14, s13
 80036e6:	ee63 2a24 	vmul.f32	s5, s6, s9
 80036ea:	ee66 6a26 	vmul.f32	s13, s12, s13
 80036ee:	ee63 4aa4 	vmul.f32	s9, s7, s9
 80036f2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036f6:	ee63 1aa1 	vmul.f32	s3, s7, s3
 80036fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fe:	ee31 3a20 	vadd.f32	s6, s2, s1
 8003702:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003706:	ee71 3aa2 	vadd.f32	s7, s3, s5
 800370a:	ee35 5a64 	vsub.f32	s10, s10, s9
 800370e:	ee36 7a25 	vadd.f32	s14, s12, s11
 8003712:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003716:	3108      	adds	r1, #8
 8003718:	4551      	cmp	r1, sl
 800371a:	ed40 3a01 	vstr	s7, [r0, #-4]
 800371e:	f107 0708 	add.w	r7, r7, #8
 8003722:	ed84 5a01 	vstr	s10, [r4, #4]
 8003726:	44c1      	add	r9, r8
 8003728:	ed82 3a00 	vstr	s6, [r2]
 800372c:	ed82 4a01 	vstr	s8, [r2, #4]
 8003730:	445d      	add	r5, fp
 8003732:	ed83 7a00 	vstr	s14, [r3]
 8003736:	edc3 7a01 	vstr	s15, [r3, #4]
 800373a:	4476      	add	r6, lr
 800373c:	f100 0008 	add.w	r0, r0, #8
 8003740:	f104 0408 	add.w	r4, r4, #8
 8003744:	f102 0208 	add.w	r2, r2, #8
 8003748:	f103 0308 	add.w	r3, r3, #8
 800374c:	f47f af7f 	bne.w	800364e <arm_radix4_butterfly_f32+0x6a>
 8003750:	9b00      	ldr	r3, [sp, #0]
 8003752:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8003756:	f8dd b010 	ldr.w	fp, [sp, #16]
 800375a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800375e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	b29b      	uxth	r3, r3
 8003764:	2a04      	cmp	r2, #4
 8003766:	9306      	str	r3, [sp, #24]
 8003768:	f240 80ba 	bls.w	80038e0 <arm_radix4_butterfly_f32+0x2fc>
 800376c:	9806      	ldr	r0, [sp, #24]
 800376e:	9207      	str	r2, [sp, #28]
 8003770:	ea4f 039b 	mov.w	r3, fp, lsr #2
 8003774:	4619      	mov	r1, r3
 8003776:	9308      	str	r3, [sp, #32]
 8003778:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800377c:	1e4a      	subs	r2, r1, #1
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003782:	9205      	str	r2, [sp, #20]
 8003784:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003786:	9303      	str	r3, [sp, #12]
 8003788:	010a      	lsls	r2, r1, #4
 800378a:	0103      	lsls	r3, r0, #4
 800378c:	9204      	str	r2, [sp, #16]
 800378e:	9302      	str	r3, [sp, #8]
 8003790:	00c2      	lsls	r2, r0, #3
 8003792:	2300      	movs	r3, #0
 8003794:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 8003798:	9201      	str	r2, [sp, #4]
 800379a:	46b8      	mov	r8, r7
 800379c:	46be      	mov	lr, r7
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	9b04      	ldr	r3, [sp, #16]
 80037a2:	ed97 1a00 	vldr	s2, [r7]
 80037a6:	edd7 1a01 	vldr	s3, [r7, #4]
 80037aa:	ed9e 2a00 	vldr	s4, [lr]
 80037ae:	edde 2a01 	vldr	s5, [lr, #4]
 80037b2:	ed98 3a00 	vldr	s6, [r8]
 80037b6:	edd8 3a01 	vldr	s7, [r8, #4]
 80037ba:	9d00      	ldr	r5, [sp, #0]
 80037bc:	18f1      	adds	r1, r6, r3
 80037be:	eb09 0203 	add.w	r2, r9, r3
 80037c2:	1d34      	adds	r4, r6, #4
 80037c4:	464b      	mov	r3, r9
 80037c6:	4630      	mov	r0, r6
 80037c8:	ed90 4a01 	vldr	s8, [r0, #4]
 80037cc:	ed54 5a01 	vldr	s11, [r4, #-4]
 80037d0:	ed91 7a00 	vldr	s14, [r1]
 80037d4:	edd2 7a00 	vldr	s15, [r2]
 80037d8:	edd3 4a01 	vldr	s9, [r3, #4]
 80037dc:	ed92 5a01 	vldr	s10, [r2, #4]
 80037e0:	ed93 6a00 	vldr	s12, [r3]
 80037e4:	edd1 6a01 	vldr	s13, [r1, #4]
 80037e8:	ee35 0a87 	vadd.f32	s0, s11, s14
 80037ec:	ee34 8a26 	vadd.f32	s16, s8, s13
 80037f0:	ee76 8a27 	vadd.f32	s17, s12, s15
 80037f4:	ee74 6a66 	vsub.f32	s13, s8, s13
 80037f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80037fc:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8003800:	ee74 7ac5 	vsub.f32	s15, s9, s10
 8003804:	ee74 0a85 	vadd.f32	s1, s9, s10
 8003808:	ee35 7ae7 	vsub.f32	s14, s11, s15
 800380c:	ee78 4a60 	vsub.f32	s9, s16, s1
 8003810:	ee35 5aa7 	vadd.f32	s10, s11, s15
 8003814:	ee30 4a68 	vsub.f32	s8, s0, s17
 8003818:	ee76 5ac6 	vsub.f32	s11, s13, s12
 800381c:	ee76 7a26 	vadd.f32	s15, s12, s13
 8003820:	ee22 aa04 	vmul.f32	s20, s4, s8
 8003824:	ee62 aaa4 	vmul.f32	s21, s5, s9
 8003828:	ee22 4a84 	vmul.f32	s8, s5, s8
 800382c:	ee21 9a05 	vmul.f32	s18, s2, s10
 8003830:	ee61 9aa5 	vmul.f32	s19, s3, s11
 8003834:	ee63 6a07 	vmul.f32	s13, s6, s14
 8003838:	ee23 6aa7 	vmul.f32	s12, s7, s15
 800383c:	ee62 4a24 	vmul.f32	s9, s4, s9
 8003840:	ee21 5a85 	vmul.f32	s10, s3, s10
 8003844:	ee61 5a25 	vmul.f32	s11, s2, s11
 8003848:	ee23 7a87 	vmul.f32	s14, s7, s14
 800384c:	ee63 7a27 	vmul.f32	s15, s6, s15
 8003850:	ee78 0a20 	vadd.f32	s1, s16, s1
 8003854:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8003858:	ee30 0a28 	vadd.f32	s0, s0, s17
 800385c:	ee3a 8a8a 	vadd.f32	s16, s21, s20
 8003860:	ee39 4a89 	vadd.f32	s8, s19, s18
 8003864:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8003868:	ee76 6a26 	vadd.f32	s13, s12, s13
 800386c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003870:	445d      	add	r5, fp
 8003872:	45aa      	cmp	sl, r5
 8003874:	ed04 0a01 	vstr	s0, [r4, #-4]
 8003878:	edc0 0a01 	vstr	s1, [r0, #4]
 800387c:	4464      	add	r4, ip
 800387e:	ed83 8a00 	vstr	s16, [r3]
 8003882:	edc3 4a01 	vstr	s9, [r3, #4]
 8003886:	4460      	add	r0, ip
 8003888:	ed81 4a00 	vstr	s8, [r1]
 800388c:	edc1 5a01 	vstr	s11, [r1, #4]
 8003890:	4463      	add	r3, ip
 8003892:	edc2 6a00 	vstr	s13, [r2]
 8003896:	edc2 7a01 	vstr	s15, [r2, #4]
 800389a:	4461      	add	r1, ip
 800389c:	4462      	add	r2, ip
 800389e:	d893      	bhi.n	80037c8 <arm_radix4_butterfly_f32+0x1e4>
 80038a0:	9a01      	ldr	r2, [sp, #4]
 80038a2:	9b00      	ldr	r3, [sp, #0]
 80038a4:	4417      	add	r7, r2
 80038a6:	9a02      	ldr	r2, [sp, #8]
 80038a8:	4496      	add	lr, r2
 80038aa:	9a03      	ldr	r2, [sp, #12]
 80038ac:	4490      	add	r8, r2
 80038ae:	9a05      	ldr	r2, [sp, #20]
 80038b0:	3301      	adds	r3, #1
 80038b2:	4293      	cmp	r3, r2
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	f106 0608 	add.w	r6, r6, #8
 80038ba:	f109 0908 	add.w	r9, r9, #8
 80038be:	f67f af6f 	bls.w	80037a0 <arm_radix4_butterfly_f32+0x1bc>
 80038c2:	9b06      	ldr	r3, [sp, #24]
 80038c4:	9a07      	ldr	r2, [sp, #28]
 80038c6:	f8dd b020 	ldr.w	fp, [sp, #32]
 80038ca:	0892      	lsrs	r2, r2, #2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2a04      	cmp	r2, #4
 80038d2:	9207      	str	r2, [sp, #28]
 80038d4:	9306      	str	r3, [sp, #24]
 80038d6:	d903      	bls.n	80038e0 <arm_radix4_butterfly_f32+0x2fc>
 80038d8:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 80038dc:	4618      	mov	r0, r3
 80038de:	e747      	b.n	8003770 <arm_radix4_butterfly_f32+0x18c>
 80038e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80038e4:	3320      	adds	r3, #32
 80038e6:	ed53 4a04 	vldr	s9, [r3, #-16]
 80038ea:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 80038ee:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 80038f2:	ed53 5a01 	vldr	s11, [r3, #-4]
 80038f6:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 80038fa:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 80038fe:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003902:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003906:	ee34 3a24 	vadd.f32	s6, s8, s9
 800390a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800390e:	ee34 4a64 	vsub.f32	s8, s8, s9
 8003912:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003916:	ee75 4a65 	vsub.f32	s9, s10, s11
 800391a:	ee35 6a25 	vadd.f32	s12, s10, s11
 800391e:	ee76 5a87 	vadd.f32	s11, s13, s14
 8003922:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003926:	ee73 2a23 	vadd.f32	s5, s6, s7
 800392a:	ee35 5a86 	vadd.f32	s10, s11, s12
 800392e:	ee73 3a63 	vsub.f32	s7, s6, s7
 8003932:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003936:	ee34 3a24 	vadd.f32	s6, s8, s9
 800393a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800393e:	ee74 4a64 	vsub.f32	s9, s8, s9
 8003942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003946:	3a01      	subs	r2, #1
 8003948:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 800394c:	ed43 3a06 	vstr	s7, [r3, #-24]	; 0xffffffe8
 8003950:	ed03 3a04 	vstr	s6, [r3, #-16]
 8003954:	ed43 4a02 	vstr	s9, [r3, #-8]
 8003958:	ed03 5a07 	vstr	s10, [r3, #-28]	; 0xffffffe4
 800395c:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
 8003960:	ed43 6a03 	vstr	s13, [r3, #-12]
 8003964:	ed43 7a01 	vstr	s15, [r3, #-4]
 8003968:	f103 0320 	add.w	r3, r3, #32
 800396c:	d1bb      	bne.n	80038e6 <arm_radix4_butterfly_f32+0x302>
 800396e:	b00d      	add	sp, #52	; 0x34
 8003970:	ecbd 8b06 	vpop	{d8-d10}
 8003974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003978 <arm_radix4_butterfly_inverse_f32>:
 8003978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397c:	ed2d 8b08 	vpush	{d8-d11}
 8003980:	b08d      	sub	sp, #52	; 0x34
 8003982:	461f      	mov	r7, r3
 8003984:	9700      	str	r7, [sp, #0]
 8003986:	468a      	mov	sl, r1
 8003988:	9c00      	ldr	r4, [sp, #0]
 800398a:	9009      	str	r0, [sp, #36]	; 0x24
 800398c:	0889      	lsrs	r1, r1, #2
 800398e:	460d      	mov	r5, r1
 8003990:	9103      	str	r1, [sp, #12]
 8003992:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003996:	46ab      	mov	fp, r5
 8003998:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 800399c:	eba1 08c5 	sub.w	r8, r1, r5, lsl #3
 80039a0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80039a4:	0125      	lsls	r5, r4, #4
 80039a6:	00e4      	lsls	r4, r4, #3
 80039a8:	9402      	str	r4, [sp, #8]
 80039aa:	9501      	str	r5, [sp, #4]
 80039ac:	4606      	mov	r6, r0
 80039ae:	4691      	mov	r9, r2
 80039b0:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 80039b4:	f10c 0004 	add.w	r0, ip, #4
 80039b8:	f8cd b010 	str.w	fp, [sp, #16]
 80039bc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80039c0:	f8cd a008 	str.w	sl, [sp, #8]
 80039c4:	f8dd a004 	ldr.w	sl, [sp, #4]
 80039c8:	920a      	str	r2, [sp, #40]	; 0x28
 80039ca:	4430      	add	r0, r6
 80039cc:	4632      	mov	r2, r6
 80039ce:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80039d2:	4647      	mov	r7, r8
 80039d4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80039d8:	3604      	adds	r6, #4
 80039da:	464d      	mov	r5, r9
 80039dc:	464c      	mov	r4, r9
 80039de:	edd2 4a01 	vldr	s9, [r2, #4]
 80039e2:	ed10 4a01 	vldr	s8, [r0, #-4]
 80039e6:	ed16 6a01 	vldr	s12, [r6, #-4]
 80039ea:	edd1 6a00 	vldr	s13, [r1]
 80039ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80039f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80039f6:	edd3 5a00 	vldr	s11, [r3]
 80039fa:	ed91 5a01 	vldr	s10, [r1, #4]
 80039fe:	edd9 3a01 	vldr	s7, [r9, #4]
 8003a02:	ed99 3a00 	vldr	s6, [r9]
 8003a06:	ee36 2a26 	vadd.f32	s4, s12, s13
 8003a0a:	ee74 2a25 	vadd.f32	s5, s8, s11
 8003a0e:	ee34 1a85 	vadd.f32	s2, s9, s10
 8003a12:	ee77 1a27 	vadd.f32	s3, s14, s15
 8003a16:	ee32 8a22 	vadd.f32	s16, s4, s5
 8003a1a:	ee71 0a21 	vadd.f32	s1, s2, s3
 8003a1e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8003a22:	ee74 5a65 	vsub.f32	s11, s8, s11
 8003a26:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8003a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a2e:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003a32:	edc2 0a01 	vstr	s1, [r2, #4]
 8003a36:	ed94 4a00 	vldr	s8, [r4]
 8003a3a:	edd5 6a00 	vldr	s13, [r5]
 8003a3e:	edd5 7a01 	vldr	s15, [r5, #4]
 8003a42:	ee72 4a62 	vsub.f32	s9, s4, s5
 8003a46:	ee71 1a61 	vsub.f32	s3, s2, s3
 8003a4a:	ee75 2a85 	vadd.f32	s5, s11, s10
 8003a4e:	ed94 1a01 	vldr	s2, [r4, #4]
 8003a52:	ee36 2a47 	vsub.f32	s4, s12, s14
 8003a56:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003a5a:	ee35 6a65 	vsub.f32	s12, s10, s11
 8003a5e:	ee62 0a04 	vmul.f32	s1, s4, s8
 8003a62:	ee23 5aa4 	vmul.f32	s10, s7, s9
 8003a66:	ee22 4a84 	vmul.f32	s8, s5, s8
 8003a6a:	ee22 2a01 	vmul.f32	s4, s4, s2
 8003a6e:	ee67 5a26 	vmul.f32	s11, s14, s13
 8003a72:	ee22 1a81 	vmul.f32	s2, s5, s2
 8003a76:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003a7a:	ee63 2a24 	vmul.f32	s5, s6, s9
 8003a7e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a82:	ee23 3a21 	vmul.f32	s6, s6, s3
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	ee63 1aa1 	vmul.f32	s3, s7, s3
 8003a8e:	ee72 4a04 	vadd.f32	s9, s4, s8
 8003a92:	ee70 3ac1 	vsub.f32	s7, s1, s2
 8003a96:	ee32 4ae1 	vsub.f32	s8, s5, s3
 8003a9a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8003a9e:	ee35 7ac6 	vsub.f32	s14, s11, s12
 8003aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa6:	3208      	adds	r2, #8
 8003aa8:	4542      	cmp	r2, r8
 8003aaa:	ed00 4a01 	vstr	s8, [r0, #-4]
 8003aae:	f106 0608 	add.w	r6, r6, #8
 8003ab2:	ed87 5a01 	vstr	s10, [r7, #4]
 8003ab6:	44d1      	add	r9, sl
 8003ab8:	edc1 3a00 	vstr	s7, [r1]
 8003abc:	edc1 4a01 	vstr	s9, [r1, #4]
 8003ac0:	445c      	add	r4, fp
 8003ac2:	ed83 7a00 	vstr	s14, [r3]
 8003ac6:	edc3 7a01 	vstr	s15, [r3, #4]
 8003aca:	4475      	add	r5, lr
 8003acc:	f100 0008 	add.w	r0, r0, #8
 8003ad0:	f107 0708 	add.w	r7, r7, #8
 8003ad4:	f101 0108 	add.w	r1, r1, #8
 8003ad8:	f103 0308 	add.w	r3, r3, #8
 8003adc:	f47f af7f 	bne.w	80039de <arm_radix4_butterfly_inverse_f32+0x66>
 8003ae0:	9b00      	ldr	r3, [sp, #0]
 8003ae2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8003ae6:	f8dd b010 	ldr.w	fp, [sp, #16]
 8003aea:	f8dd a008 	ldr.w	sl, [sp, #8]
 8003aee:	920b      	str	r2, [sp, #44]	; 0x2c
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2a04      	cmp	r2, #4
 8003af6:	9306      	str	r3, [sp, #24]
 8003af8:	f240 80ba 	bls.w	8003c70 <arm_radix4_butterfly_inverse_f32+0x2f8>
 8003afc:	9806      	ldr	r0, [sp, #24]
 8003afe:	9207      	str	r2, [sp, #28]
 8003b00:	ea4f 039b 	mov.w	r3, fp, lsr #2
 8003b04:	4619      	mov	r1, r3
 8003b06:	9308      	str	r3, [sp, #32]
 8003b08:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8003b0c:	1e4a      	subs	r2, r1, #1
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003b12:	9205      	str	r2, [sp, #20]
 8003b14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003b16:	9303      	str	r3, [sp, #12]
 8003b18:	010a      	lsls	r2, r1, #4
 8003b1a:	0103      	lsls	r3, r0, #4
 8003b1c:	9204      	str	r2, [sp, #16]
 8003b1e:	9302      	str	r3, [sp, #8]
 8003b20:	00c2      	lsls	r2, r0, #3
 8003b22:	2300      	movs	r3, #0
 8003b24:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 8003b28:	9201      	str	r2, [sp, #4]
 8003b2a:	46b8      	mov	r8, r7
 8003b2c:	46be      	mov	lr, r7
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	9b04      	ldr	r3, [sp, #16]
 8003b32:	ed97 1a00 	vldr	s2, [r7]
 8003b36:	edd7 1a01 	vldr	s3, [r7, #4]
 8003b3a:	ed9e 2a00 	vldr	s4, [lr]
 8003b3e:	edde 2a01 	vldr	s5, [lr, #4]
 8003b42:	ed98 3a00 	vldr	s6, [r8]
 8003b46:	edd8 3a01 	vldr	s7, [r8, #4]
 8003b4a:	9d00      	ldr	r5, [sp, #0]
 8003b4c:	18f1      	adds	r1, r6, r3
 8003b4e:	eb09 0203 	add.w	r2, r9, r3
 8003b52:	1d34      	adds	r4, r6, #4
 8003b54:	464b      	mov	r3, r9
 8003b56:	4630      	mov	r0, r6
 8003b58:	ed90 4a01 	vldr	s8, [r0, #4]
 8003b5c:	ed14 6a01 	vldr	s12, [r4, #-4]
 8003b60:	ed91 7a00 	vldr	s14, [r1]
 8003b64:	edd2 7a00 	vldr	s15, [r2]
 8003b68:	ed93 5a01 	vldr	s10, [r3, #4]
 8003b6c:	edd1 4a01 	vldr	s9, [r1, #4]
 8003b70:	edd2 5a01 	vldr	s11, [r2, #4]
 8003b74:	edd3 6a00 	vldr	s13, [r3]
 8003b78:	ee76 0a07 	vadd.f32	s1, s12, s14
 8003b7c:	ee36 8aa7 	vadd.f32	s16, s13, s15
 8003b80:	ee36 6a47 	vsub.f32	s12, s12, s14
 8003b84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b88:	ee74 8a24 	vadd.f32	s17, s8, s9
 8003b8c:	ee74 7a64 	vsub.f32	s15, s8, s9
 8003b90:	ee35 7a65 	vsub.f32	s14, s10, s11
 8003b94:	ee35 4a25 	vadd.f32	s8, s10, s11
 8003b98:	ee70 4ac8 	vsub.f32	s9, s1, s16
 8003b9c:	ee76 5a47 	vsub.f32	s11, s12, s14
 8003ba0:	ee38 5ac4 	vsub.f32	s10, s17, s8
 8003ba4:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003ba8:	ee36 6aa7 	vadd.f32	s12, s13, s15
 8003bac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003bb0:	ee22 ba24 	vmul.f32	s22, s4, s9
 8003bb4:	ee62 aa85 	vmul.f32	s21, s5, s10
 8003bb8:	ee62 4aa4 	vmul.f32	s9, s5, s9
 8003bbc:	ee21 aa25 	vmul.f32	s20, s2, s11
 8003bc0:	ee61 9a86 	vmul.f32	s19, s3, s12
 8003bc4:	ee23 9a07 	vmul.f32	s18, s6, s14
 8003bc8:	ee63 6aa7 	vmul.f32	s13, s7, s15
 8003bcc:	ee22 5a05 	vmul.f32	s10, s4, s10
 8003bd0:	ee61 5aa5 	vmul.f32	s11, s3, s11
 8003bd4:	ee21 6a06 	vmul.f32	s12, s2, s12
 8003bd8:	ee23 7a87 	vmul.f32	s14, s7, s14
 8003bdc:	ee63 7a27 	vmul.f32	s15, s6, s15
 8003be0:	ee70 0a88 	vadd.f32	s1, s1, s16
 8003be4:	ee34 5a85 	vadd.f32	s10, s9, s10
 8003be8:	ee38 4a84 	vadd.f32	s8, s17, s8
 8003bec:	ee3b 8a6a 	vsub.f32	s16, s22, s21
 8003bf0:	ee7a 4a69 	vsub.f32	s9, s20, s19
 8003bf4:	ee35 6a86 	vadd.f32	s12, s11, s12
 8003bf8:	ee79 6a66 	vsub.f32	s13, s18, s13
 8003bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c00:	445d      	add	r5, fp
 8003c02:	45aa      	cmp	sl, r5
 8003c04:	ed44 0a01 	vstr	s1, [r4, #-4]
 8003c08:	ed80 4a01 	vstr	s8, [r0, #4]
 8003c0c:	4464      	add	r4, ip
 8003c0e:	ed83 8a00 	vstr	s16, [r3]
 8003c12:	ed83 5a01 	vstr	s10, [r3, #4]
 8003c16:	4460      	add	r0, ip
 8003c18:	edc1 4a00 	vstr	s9, [r1]
 8003c1c:	ed81 6a01 	vstr	s12, [r1, #4]
 8003c20:	4463      	add	r3, ip
 8003c22:	edc2 6a00 	vstr	s13, [r2]
 8003c26:	edc2 7a01 	vstr	s15, [r2, #4]
 8003c2a:	4461      	add	r1, ip
 8003c2c:	4462      	add	r2, ip
 8003c2e:	d893      	bhi.n	8003b58 <arm_radix4_butterfly_inverse_f32+0x1e0>
 8003c30:	9a01      	ldr	r2, [sp, #4]
 8003c32:	9b00      	ldr	r3, [sp, #0]
 8003c34:	4417      	add	r7, r2
 8003c36:	9a02      	ldr	r2, [sp, #8]
 8003c38:	4496      	add	lr, r2
 8003c3a:	9a03      	ldr	r2, [sp, #12]
 8003c3c:	4490      	add	r8, r2
 8003c3e:	9a05      	ldr	r2, [sp, #20]
 8003c40:	3301      	adds	r3, #1
 8003c42:	4293      	cmp	r3, r2
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	f106 0608 	add.w	r6, r6, #8
 8003c4a:	f109 0908 	add.w	r9, r9, #8
 8003c4e:	f67f af6f 	bls.w	8003b30 <arm_radix4_butterfly_inverse_f32+0x1b8>
 8003c52:	9b06      	ldr	r3, [sp, #24]
 8003c54:	9a07      	ldr	r2, [sp, #28]
 8003c56:	f8dd b020 	ldr.w	fp, [sp, #32]
 8003c5a:	0892      	lsrs	r2, r2, #2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2a04      	cmp	r2, #4
 8003c62:	9207      	str	r2, [sp, #28]
 8003c64:	9306      	str	r3, [sp, #24]
 8003c66:	d903      	bls.n	8003c70 <arm_radix4_butterfly_inverse_f32+0x2f8>
 8003c68:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	e747      	b.n	8003b00 <arm_radix4_butterfly_inverse_f32+0x188>
 8003c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c74:	3320      	adds	r3, #32
 8003c76:	ed53 4a04 	vldr	s9, [r3, #-16]
 8003c7a:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 8003c7e:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 8003c82:	ed53 5a01 	vldr	s11, [r3, #-4]
 8003c86:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 8003c8a:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 8003c8e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003c92:	ed13 7a03 	vldr	s14, [r3, #-12]
 8003c96:	ee34 3a24 	vadd.f32	s6, s8, s9
 8003c9a:	ee76 3a27 	vadd.f32	s7, s12, s15
 8003c9e:	ee34 4a64 	vsub.f32	s8, s8, s9
 8003ca2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ca6:	ee75 4a65 	vsub.f32	s9, s10, s11
 8003caa:	ee35 6a25 	vadd.f32	s12, s10, s11
 8003cae:	ee76 5a87 	vadd.f32	s11, s13, s14
 8003cb2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003cb6:	ee73 2a23 	vadd.f32	s5, s6, s7
 8003cba:	ee74 6a24 	vadd.f32	s13, s8, s9
 8003cbe:	ee37 5a27 	vadd.f32	s10, s14, s15
 8003cc2:	ee73 3a63 	vsub.f32	s7, s6, s7
 8003cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cca:	ee34 3a64 	vsub.f32	s6, s8, s9
 8003cce:	ee75 4a86 	vadd.f32	s9, s11, s12
 8003cd2:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8003cd6:	ee62 2a80 	vmul.f32	s5, s5, s0
 8003cda:	ee26 7a00 	vmul.f32	s14, s12, s0
 8003cde:	ee63 5a80 	vmul.f32	s11, s7, s0
 8003ce2:	ee23 4a00 	vmul.f32	s8, s6, s0
 8003ce6:	ee66 6a80 	vmul.f32	s13, s13, s0
 8003cea:	ee64 4a80 	vmul.f32	s9, s9, s0
 8003cee:	ee25 6a00 	vmul.f32	s12, s10, s0
 8003cf2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003cf6:	3a01      	subs	r2, #1
 8003cf8:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 8003cfc:	ed43 5a06 	vstr	s11, [r3, #-24]	; 0xffffffe8
 8003d00:	ed03 4a04 	vstr	s8, [r3, #-16]
 8003d04:	ed43 6a02 	vstr	s13, [r3, #-8]
 8003d08:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8003d0c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8003d10:	ed03 6a03 	vstr	s12, [r3, #-12]
 8003d14:	ed43 7a01 	vstr	s15, [r3, #-4]
 8003d18:	f103 0320 	add.w	r3, r3, #32
 8003d1c:	d1ab      	bne.n	8003c76 <arm_radix4_butterfly_inverse_f32+0x2fe>
 8003d1e:	b00d      	add	sp, #52	; 0x34
 8003d20:	ecbd 8b08 	vpop	{d8-d11}
 8003d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003d28 <arm_cfft_radix4_f32>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	7883      	ldrb	r3, [r0, #2]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	4604      	mov	r4, r0
 8003d30:	460d      	mov	r5, r1
 8003d32:	d009      	beq.n	8003d48 <arm_cfft_radix4_f32+0x20>
 8003d34:	8983      	ldrh	r3, [r0, #12]
 8003d36:	6842      	ldr	r2, [r0, #4]
 8003d38:	8801      	ldrh	r1, [r0, #0]
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f7ff fc52 	bl	80035e4 <arm_radix4_butterfly_f32>
 8003d40:	78e3      	ldrb	r3, [r4, #3]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d00b      	beq.n	8003d5e <arm_cfft_radix4_f32+0x36>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	8983      	ldrh	r3, [r0, #12]
 8003d4a:	ed90 0a04 	vldr	s0, [r0, #16]
 8003d4e:	6842      	ldr	r2, [r0, #4]
 8003d50:	8801      	ldrh	r1, [r0, #0]
 8003d52:	4628      	mov	r0, r5
 8003d54:	f7ff fe10 	bl	8003978 <arm_radix4_butterfly_inverse_f32>
 8003d58:	78e3      	ldrb	r3, [r4, #3]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d1f3      	bne.n	8003d46 <arm_cfft_radix4_f32+0x1e>
 8003d5e:	4628      	mov	r0, r5
 8003d60:	68a3      	ldr	r3, [r4, #8]
 8003d62:	89e2      	ldrh	r2, [r4, #14]
 8003d64:	8821      	ldrh	r1, [r4, #0]
 8003d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003d6a:	f000 b975 	b.w	8004058 <arm_bitreversal_f32>
 8003d6e:	bf00      	nop

08003d70 <arm_cmplx_mag_f32>:
 8003d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d74:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8003d78:	b084      	sub	sp, #16
 8003d7a:	d07f      	beq.n	8003e7c <arm_cmplx_mag_f32+0x10c>
 8003d7c:	2700      	movs	r7, #0
 8003d7e:	f100 0420 	add.w	r4, r0, #32
 8003d82:	f101 0510 	add.w	r5, r1, #16
 8003d86:	4646      	mov	r6, r8
 8003d88:	e05a      	b.n	8003e40 <arm_cmplx_mag_f32+0xd0>
 8003d8a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003d8e:	eeb4 0a40 	vcmp.f32	s0, s0
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	f040 80a4 	bne.w	8003ee2 <arm_cmplx_mag_f32+0x172>
 8003d9a:	ed05 0a04 	vstr	s0, [r5, #-16]
 8003d9e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8003da2:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8003da6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003daa:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003dae:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003db2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dba:	f2c0 808f 	blt.w	8003edc <arm_cmplx_mag_f32+0x16c>
 8003dbe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003dc2:	eeb4 0a40 	vcmp.f32	s0, s0
 8003dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dca:	f040 80af 	bne.w	8003f2c <arm_cmplx_mag_f32+0x1bc>
 8003dce:	ed05 0a03 	vstr	s0, [r5, #-12]
 8003dd2:	ed54 7a04 	vldr	s15, [r4, #-16]
 8003dd6:	ed14 0a03 	vldr	s0, [r4, #-12]
 8003dda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003dde:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003de2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003de6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dee:	db72      	blt.n	8003ed6 <arm_cmplx_mag_f32+0x166>
 8003df0:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003df4:	eeb4 0a40 	vcmp.f32	s0, s0
 8003df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfc:	f040 808c 	bne.w	8003f18 <arm_cmplx_mag_f32+0x1a8>
 8003e00:	ed05 0a02 	vstr	s0, [r5, #-8]
 8003e04:	ed54 7a02 	vldr	s15, [r4, #-8]
 8003e08:	ed14 0a01 	vldr	s0, [r4, #-4]
 8003e0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e10:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003e14:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003e18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e20:	db20      	blt.n	8003e64 <arm_cmplx_mag_f32+0xf4>
 8003e22:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003e26:	eeb4 0a40 	vcmp.f32	s0, s0
 8003e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2e:	d169      	bne.n	8003f04 <arm_cmplx_mag_f32+0x194>
 8003e30:	3e01      	subs	r6, #1
 8003e32:	ed05 0a01 	vstr	s0, [r5, #-4]
 8003e36:	f104 0420 	add.w	r4, r4, #32
 8003e3a:	f105 0510 	add.w	r5, r5, #16
 8003e3e:	d019      	beq.n	8003e74 <arm_cmplx_mag_f32+0x104>
 8003e40:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8003e44:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8003e48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e4c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003e50:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5c:	da95      	bge.n	8003d8a <arm_cmplx_mag_f32+0x1a>
 8003e5e:	f845 7c10 	str.w	r7, [r5, #-16]
 8003e62:	e79c      	b.n	8003d9e <arm_cmplx_mag_f32+0x2e>
 8003e64:	3e01      	subs	r6, #1
 8003e66:	f845 7c04 	str.w	r7, [r5, #-4]
 8003e6a:	f104 0420 	add.w	r4, r4, #32
 8003e6e:	f105 0510 	add.w	r5, r5, #16
 8003e72:	d1e5      	bne.n	8003e40 <arm_cmplx_mag_f32+0xd0>
 8003e74:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8003e78:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8003e7c:	f012 0503 	ands.w	r5, r2, #3
 8003e80:	d026      	beq.n	8003ed0 <arm_cmplx_mag_f32+0x160>
 8003e82:	2600      	movs	r6, #0
 8003e84:	f100 0408 	add.w	r4, r0, #8
 8003e88:	e00c      	b.n	8003ea4 <arm_cmplx_mag_f32+0x134>
 8003e8a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003e8e:	eeb4 0a40 	vcmp.f32	s0, s0
 8003e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e96:	d12e      	bne.n	8003ef6 <arm_cmplx_mag_f32+0x186>
 8003e98:	3d01      	subs	r5, #1
 8003e9a:	ed01 0a01 	vstr	s0, [r1, #-4]
 8003e9e:	f104 0408 	add.w	r4, r4, #8
 8003ea2:	d015      	beq.n	8003ed0 <arm_cmplx_mag_f32+0x160>
 8003ea4:	ed54 7a02 	vldr	s15, [r4, #-8]
 8003ea8:	ed14 0a01 	vldr	s0, [r4, #-4]
 8003eac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003eb0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003eb4:	3104      	adds	r1, #4
 8003eb6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003eba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec2:	dae2      	bge.n	8003e8a <arm_cmplx_mag_f32+0x11a>
 8003ec4:	3d01      	subs	r5, #1
 8003ec6:	f841 6c04 	str.w	r6, [r1, #-4]
 8003eca:	f104 0408 	add.w	r4, r4, #8
 8003ece:	d1e9      	bne.n	8003ea4 <arm_cmplx_mag_f32+0x134>
 8003ed0:	b004      	add	sp, #16
 8003ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed6:	f845 7c08 	str.w	r7, [r5, #-8]
 8003eda:	e793      	b.n	8003e04 <arm_cmplx_mag_f32+0x94>
 8003edc:	f845 7c0c 	str.w	r7, [r5, #-12]
 8003ee0:	e777      	b.n	8003dd2 <arm_cmplx_mag_f32+0x62>
 8003ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee6:	9203      	str	r2, [sp, #12]
 8003ee8:	9102      	str	r1, [sp, #8]
 8003eea:	9001      	str	r0, [sp, #4]
 8003eec:	f000 f948 	bl	8004180 <sqrtf>
 8003ef0:	a801      	add	r0, sp, #4
 8003ef2:	c807      	ldmia	r0, {r0, r1, r2}
 8003ef4:	e751      	b.n	8003d9a <arm_cmplx_mag_f32+0x2a>
 8003ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8003efa:	9101      	str	r1, [sp, #4]
 8003efc:	f000 f940 	bl	8004180 <sqrtf>
 8003f00:	9901      	ldr	r1, [sp, #4]
 8003f02:	e7c9      	b.n	8003e98 <arm_cmplx_mag_f32+0x128>
 8003f04:	eeb0 0a67 	vmov.f32	s0, s15
 8003f08:	9203      	str	r2, [sp, #12]
 8003f0a:	9102      	str	r1, [sp, #8]
 8003f0c:	9001      	str	r0, [sp, #4]
 8003f0e:	f000 f937 	bl	8004180 <sqrtf>
 8003f12:	a801      	add	r0, sp, #4
 8003f14:	c807      	ldmia	r0, {r0, r1, r2}
 8003f16:	e78b      	b.n	8003e30 <arm_cmplx_mag_f32+0xc0>
 8003f18:	eeb0 0a67 	vmov.f32	s0, s15
 8003f1c:	9203      	str	r2, [sp, #12]
 8003f1e:	9102      	str	r1, [sp, #8]
 8003f20:	9001      	str	r0, [sp, #4]
 8003f22:	f000 f92d 	bl	8004180 <sqrtf>
 8003f26:	a801      	add	r0, sp, #4
 8003f28:	c807      	ldmia	r0, {r0, r1, r2}
 8003f2a:	e769      	b.n	8003e00 <arm_cmplx_mag_f32+0x90>
 8003f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f30:	9203      	str	r2, [sp, #12]
 8003f32:	9102      	str	r1, [sp, #8]
 8003f34:	9001      	str	r0, [sp, #4]
 8003f36:	f000 f923 	bl	8004180 <sqrtf>
 8003f3a:	a801      	add	r0, sp, #4
 8003f3c:	c807      	ldmia	r0, {r0, r1, r2}
 8003f3e:	e746      	b.n	8003dce <arm_cmplx_mag_f32+0x5e>

08003f40 <arm_sub_f32>:
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8003f46:	d033      	beq.n	8003fb0 <arm_sub_f32+0x70>
 8003f48:	f100 0610 	add.w	r6, r0, #16
 8003f4c:	f101 0510 	add.w	r5, r1, #16
 8003f50:	f102 0410 	add.w	r4, r2, #16
 8003f54:	4677      	mov	r7, lr
 8003f56:	ed16 6a03 	vldr	s12, [r6, #-12]
 8003f5a:	ed15 4a03 	vldr	s8, [r5, #-12]
 8003f5e:	ed56 6a02 	vldr	s13, [r6, #-8]
 8003f62:	ed55 4a02 	vldr	s9, [r5, #-8]
 8003f66:	ed16 7a01 	vldr	s14, [r6, #-4]
 8003f6a:	ed15 5a01 	vldr	s10, [r5, #-4]
 8003f6e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8003f72:	ed55 5a04 	vldr	s11, [r5, #-16]
 8003f76:	ee36 6a44 	vsub.f32	s12, s12, s8
 8003f7a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8003f7e:	ee37 7a45 	vsub.f32	s14, s14, s10
 8003f82:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003f86:	3f01      	subs	r7, #1
 8003f88:	ed04 6a03 	vstr	s12, [r4, #-12]
 8003f8c:	ed44 6a02 	vstr	s13, [r4, #-8]
 8003f90:	ed04 7a01 	vstr	s14, [r4, #-4]
 8003f94:	ed44 7a04 	vstr	s15, [r4, #-16]
 8003f98:	f106 0610 	add.w	r6, r6, #16
 8003f9c:	f105 0510 	add.w	r5, r5, #16
 8003fa0:	f104 0410 	add.w	r4, r4, #16
 8003fa4:	d1d7      	bne.n	8003f56 <arm_sub_f32+0x16>
 8003fa6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8003faa:	4420      	add	r0, r4
 8003fac:	4421      	add	r1, r4
 8003fae:	4422      	add	r2, r4
 8003fb0:	f013 0303 	ands.w	r3, r3, #3
 8003fb4:	d009      	beq.n	8003fca <arm_sub_f32+0x8a>
 8003fb6:	ecf0 7a01 	vldmia	r0!, {s15}
 8003fba:	ecb1 7a01 	vldmia	r1!, {s14}
 8003fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	ece2 7a01 	vstmia	r2!, {s15}
 8003fc8:	d1f5      	bne.n	8003fb6 <arm_sub_f32+0x76>
 8003fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fcc <arm_mult_f32>:
 8003fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fce:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8003fd2:	d033      	beq.n	800403c <arm_mult_f32+0x70>
 8003fd4:	f100 0610 	add.w	r6, r0, #16
 8003fd8:	f101 0510 	add.w	r5, r1, #16
 8003fdc:	f102 0410 	add.w	r4, r2, #16
 8003fe0:	4677      	mov	r7, lr
 8003fe2:	ed16 6a04 	vldr	s12, [r6, #-16]
 8003fe6:	ed55 4a04 	vldr	s9, [r5, #-16]
 8003fea:	ed56 6a02 	vldr	s13, [r6, #-8]
 8003fee:	ed15 5a02 	vldr	s10, [r5, #-8]
 8003ff2:	ed16 7a03 	vldr	s14, [r6, #-12]
 8003ff6:	ed55 5a03 	vldr	s11, [r5, #-12]
 8003ffa:	ed56 7a01 	vldr	s15, [r6, #-4]
 8003ffe:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004002:	ee66 6a85 	vmul.f32	s13, s13, s10
 8004006:	ed04 6a04 	vstr	s12, [r4, #-16]
 800400a:	ed15 6a01 	vldr	s12, [r5, #-4]
 800400e:	ed44 6a02 	vstr	s13, [r4, #-8]
 8004012:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004016:	ee67 7a86 	vmul.f32	s15, s15, s12
 800401a:	3f01      	subs	r7, #1
 800401c:	ed04 7a03 	vstr	s14, [r4, #-12]
 8004020:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004024:	f106 0610 	add.w	r6, r6, #16
 8004028:	f105 0510 	add.w	r5, r5, #16
 800402c:	f104 0410 	add.w	r4, r4, #16
 8004030:	d1d7      	bne.n	8003fe2 <arm_mult_f32+0x16>
 8004032:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8004036:	4420      	add	r0, r4
 8004038:	4421      	add	r1, r4
 800403a:	4422      	add	r2, r4
 800403c:	f013 0303 	ands.w	r3, r3, #3
 8004040:	d009      	beq.n	8004056 <arm_mult_f32+0x8a>
 8004042:	ecf0 7a01 	vldmia	r0!, {s15}
 8004046:	ecb1 7a01 	vldmia	r1!, {s14}
 800404a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800404e:	3b01      	subs	r3, #1
 8004050:	ece2 7a01 	vstmia	r2!, {s15}
 8004054:	d1f5      	bne.n	8004042 <arm_mult_f32+0x76>
 8004056:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004058 <arm_bitreversal_f32>:
 8004058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	b085      	sub	sp, #20
 800405e:	0849      	lsrs	r1, r1, #1
 8004060:	0052      	lsls	r2, r2, #1
 8004062:	2400      	movs	r4, #0
 8004064:	9203      	str	r2, [sp, #12]
 8004066:	1e8a      	subs	r2, r1, #2
 8004068:	9101      	str	r1, [sp, #4]
 800406a:	f101 0c01 	add.w	ip, r1, #1
 800406e:	9202      	str	r2, [sp, #8]
 8004070:	4621      	mov	r1, r4
 8004072:	4622      	mov	r2, r4
 8004074:	9d01      	ldr	r5, [sp, #4]
 8004076:	3101      	adds	r1, #1
 8004078:	442a      	add	r2, r5
 800407a:	00c9      	lsls	r1, r1, #3
 800407c:	00d2      	lsls	r2, r2, #3
 800407e:	1846      	adds	r6, r0, r1
 8004080:	1885      	adds	r5, r0, r2
 8004082:	3104      	adds	r1, #4
 8004084:	3204      	adds	r2, #4
 8004086:	6837      	ldr	r7, [r6, #0]
 8004088:	f8d5 e000 	ldr.w	lr, [r5]
 800408c:	f8c6 e000 	str.w	lr, [r6]
 8004090:	4401      	add	r1, r0
 8004092:	4402      	add	r2, r0
 8004094:	602f      	str	r7, [r5, #0]
 8004096:	3402      	adds	r4, #2
 8004098:	680e      	ldr	r6, [r1, #0]
 800409a:	f8d2 9000 	ldr.w	r9, [r2]
 800409e:	f8c1 9000 	str.w	r9, [r1]
 80040a2:	b2a4      	uxth	r4, r4
 80040a4:	6016      	str	r6, [r2, #0]
 80040a6:	eb04 050c 	add.w	r5, r4, ip
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	00ed      	lsls	r5, r5, #3
 80040ae:	eb00 0e05 	add.w	lr, r0, r5
 80040b2:	3504      	adds	r5, #4
 80040b4:	9500      	str	r5, [sp, #0]
 80040b6:	eb02 010c 	add.w	r1, r2, ip
 80040ba:	9d02      	ldr	r5, [sp, #8]
 80040bc:	00c9      	lsls	r1, r1, #3
 80040be:	00e7      	lsls	r7, r4, #3
 80040c0:	00d6      	lsls	r6, r2, #3
 80040c2:	f101 0b04 	add.w	fp, r1, #4
 80040c6:	eb00 0901 	add.w	r9, r0, r1
 80040ca:	42ac      	cmp	r4, r5
 80040cc:	9903      	ldr	r1, [sp, #12]
 80040ce:	9d00      	ldr	r5, [sp, #0]
 80040d0:	eb00 0807 	add.w	r8, r0, r7
 80040d4:	eb00 0a06 	add.w	sl, r0, r6
 80040d8:	f107 0704 	add.w	r7, r7, #4
 80040dc:	f106 0604 	add.w	r6, r6, #4
 80040e0:	440b      	add	r3, r1
 80040e2:	4407      	add	r7, r0
 80040e4:	4406      	add	r6, r0
 80040e6:	4621      	mov	r1, r4
 80040e8:	4405      	add	r5, r0
 80040ea:	4483      	add	fp, r0
 80040ec:	d820      	bhi.n	8004130 <arm_bitreversal_f32+0xd8>
 80040ee:	42a2      	cmp	r2, r4
 80040f0:	d9c0      	bls.n	8004074 <arm_bitreversal_f32+0x1c>
 80040f2:	edd8 7a00 	vldr	s15, [r8]
 80040f6:	ed9a 7a00 	vldr	s14, [sl]
 80040fa:	ed88 7a00 	vstr	s14, [r8]
 80040fe:	edca 7a00 	vstr	s15, [sl]
 8004102:	f8d7 8000 	ldr.w	r8, [r7]
 8004106:	f8d6 a000 	ldr.w	sl, [r6]
 800410a:	f8c7 a000 	str.w	sl, [r7]
 800410e:	f8c6 8000 	str.w	r8, [r6]
 8004112:	f8de 6000 	ldr.w	r6, [lr]
 8004116:	f8d9 7000 	ldr.w	r7, [r9]
 800411a:	f8ce 7000 	str.w	r7, [lr]
 800411e:	f8c9 6000 	str.w	r6, [r9]
 8004122:	682e      	ldr	r6, [r5, #0]
 8004124:	f8db 7000 	ldr.w	r7, [fp]
 8004128:	602f      	str	r7, [r5, #0]
 800412a:	f8cb 6000 	str.w	r6, [fp]
 800412e:	e7a1      	b.n	8004074 <arm_bitreversal_f32+0x1c>
 8004130:	b005      	add	sp, #20
 8004132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004136:	bf00      	nop

08004138 <__libc_init_array>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4e0d      	ldr	r6, [pc, #52]	; (8004170 <__libc_init_array+0x38>)
 800413c:	4c0d      	ldr	r4, [pc, #52]	; (8004174 <__libc_init_array+0x3c>)
 800413e:	1ba4      	subs	r4, r4, r6
 8004140:	10a4      	asrs	r4, r4, #2
 8004142:	2500      	movs	r5, #0
 8004144:	42a5      	cmp	r5, r4
 8004146:	d109      	bne.n	800415c <__libc_init_array+0x24>
 8004148:	4e0b      	ldr	r6, [pc, #44]	; (8004178 <__libc_init_array+0x40>)
 800414a:	4c0c      	ldr	r4, [pc, #48]	; (800417c <__libc_init_array+0x44>)
 800414c:	f000 f8b8 	bl	80042c0 <_init>
 8004150:	1ba4      	subs	r4, r4, r6
 8004152:	10a4      	asrs	r4, r4, #2
 8004154:	2500      	movs	r5, #0
 8004156:	42a5      	cmp	r5, r4
 8004158:	d105      	bne.n	8004166 <__libc_init_array+0x2e>
 800415a:	bd70      	pop	{r4, r5, r6, pc}
 800415c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004160:	4798      	blx	r3
 8004162:	3501      	adds	r5, #1
 8004164:	e7ee      	b.n	8004144 <__libc_init_array+0xc>
 8004166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800416a:	4798      	blx	r3
 800416c:	3501      	adds	r5, #1
 800416e:	e7f2      	b.n	8004156 <__libc_init_array+0x1e>
 8004170:	0800cb3c 	.word	0x0800cb3c
 8004174:	0800cb3c 	.word	0x0800cb3c
 8004178:	0800cb3c 	.word	0x0800cb3c
 800417c:	0800cb40 	.word	0x0800cb40

08004180 <sqrtf>:
 8004180:	b510      	push	{r4, lr}
 8004182:	ed2d 8b02 	vpush	{d8}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	eeb0 8a40 	vmov.f32	s16, s0
 800418c:	f000 f848 	bl	8004220 <__ieee754_sqrtf>
 8004190:	4b21      	ldr	r3, [pc, #132]	; (8004218 <sqrtf+0x98>)
 8004192:	f993 4000 	ldrsb.w	r4, [r3]
 8004196:	1c63      	adds	r3, r4, #1
 8004198:	d02c      	beq.n	80041f4 <sqrtf+0x74>
 800419a:	eeb4 8a48 	vcmp.f32	s16, s16
 800419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a2:	d627      	bvs.n	80041f4 <sqrtf+0x74>
 80041a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80041a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ac:	d522      	bpl.n	80041f4 <sqrtf+0x74>
 80041ae:	2301      	movs	r3, #1
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	4b1a      	ldr	r3, [pc, #104]	; (800421c <sqrtf+0x9c>)
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	ee18 0a10 	vmov	r0, s16
 80041ba:	2300      	movs	r3, #0
 80041bc:	9308      	str	r3, [sp, #32]
 80041be:	f7fc f967 	bl	8000490 <__aeabi_f2d>
 80041c2:	2200      	movs	r2, #0
 80041c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041cc:	2300      	movs	r3, #0
 80041ce:	b9ac      	cbnz	r4, 80041fc <sqrtf+0x7c>
 80041d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80041d4:	4668      	mov	r0, sp
 80041d6:	f000 f86a 	bl	80042ae <matherr>
 80041da:	b1b8      	cbz	r0, 800420c <sqrtf+0x8c>
 80041dc:	9b08      	ldr	r3, [sp, #32]
 80041de:	b11b      	cbz	r3, 80041e8 <sqrtf+0x68>
 80041e0:	f000 f868 	bl	80042b4 <__errno>
 80041e4:	9b08      	ldr	r3, [sp, #32]
 80041e6:	6003      	str	r3, [r0, #0]
 80041e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041ec:	f7fc fbb6 	bl	800095c <__aeabi_d2f>
 80041f0:	ee00 0a10 	vmov	s0, r0
 80041f4:	b00a      	add	sp, #40	; 0x28
 80041f6:	ecbd 8b02 	vpop	{d8}
 80041fa:	bd10      	pop	{r4, pc}
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	f7fc fac4 	bl	800078c <__aeabi_ddiv>
 8004204:	2c02      	cmp	r4, #2
 8004206:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800420a:	d1e3      	bne.n	80041d4 <sqrtf+0x54>
 800420c:	f000 f852 	bl	80042b4 <__errno>
 8004210:	2321      	movs	r3, #33	; 0x21
 8004212:	6003      	str	r3, [r0, #0]
 8004214:	e7e2      	b.n	80041dc <sqrtf+0x5c>
 8004216:	bf00      	nop
 8004218:	20000ce4 	.word	0x20000ce4
 800421c:	0800cb34 	.word	0x0800cb34

08004220 <__ieee754_sqrtf>:
 8004220:	ee10 2a10 	vmov	r2, s0
 8004224:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004228:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	d302      	bcc.n	8004236 <__ieee754_sqrtf+0x16>
 8004230:	eea0 0a00 	vfma.f32	s0, s0, s0
 8004234:	bd70      	pop	{r4, r5, r6, pc}
 8004236:	b3b1      	cbz	r1, 80042a6 <__ieee754_sqrtf+0x86>
 8004238:	2a00      	cmp	r2, #0
 800423a:	da04      	bge.n	8004246 <__ieee754_sqrtf+0x26>
 800423c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004240:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004244:	bd70      	pop	{r4, r5, r6, pc}
 8004246:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800424a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800424e:	d204      	bcs.n	800425a <__ieee754_sqrtf+0x3a>
 8004250:	2100      	movs	r1, #0
 8004252:	0210      	lsls	r0, r2, #8
 8004254:	d528      	bpl.n	80042a8 <__ieee754_sqrtf+0x88>
 8004256:	3901      	subs	r1, #1
 8004258:	1a5b      	subs	r3, r3, r1
 800425a:	3b7f      	subs	r3, #127	; 0x7f
 800425c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8004260:	07d9      	lsls	r1, r3, #31
 8004262:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004266:	bf48      	it	mi
 8004268:	0052      	lslmi	r2, r2, #1
 800426a:	1059      	asrs	r1, r3, #1
 800426c:	2300      	movs	r3, #0
 800426e:	0052      	lsls	r2, r2, #1
 8004270:	2419      	movs	r4, #25
 8004272:	461e      	mov	r6, r3
 8004274:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8004278:	1835      	adds	r5, r6, r0
 800427a:	4295      	cmp	r5, r2
 800427c:	bfde      	ittt	le
 800427e:	182e      	addle	r6, r5, r0
 8004280:	1b52      	suble	r2, r2, r5
 8004282:	181b      	addle	r3, r3, r0
 8004284:	3c01      	subs	r4, #1
 8004286:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800428a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800428e:	d1f3      	bne.n	8004278 <__ieee754_sqrtf+0x58>
 8004290:	b112      	cbz	r2, 8004298 <__ieee754_sqrtf+0x78>
 8004292:	3301      	adds	r3, #1
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	105b      	asrs	r3, r3, #1
 800429a:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800429e:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 80042a2:	ee00 3a10 	vmov	s0, r3
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	0052      	lsls	r2, r2, #1
 80042aa:	3101      	adds	r1, #1
 80042ac:	e7d1      	b.n	8004252 <__ieee754_sqrtf+0x32>

080042ae <matherr>:
 80042ae:	2000      	movs	r0, #0
 80042b0:	4770      	bx	lr
	...

080042b4 <__errno>:
 80042b4:	4b01      	ldr	r3, [pc, #4]	; (80042bc <__errno+0x8>)
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000ce8 	.word	0x20000ce8

080042c0 <_init>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr

080042cc <_fini>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	bf00      	nop
 80042d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d2:	bc08      	pop	{r3}
 80042d4:	469e      	mov	lr, r3
 80042d6:	4770      	bx	lr
